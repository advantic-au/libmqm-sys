/* automatically generated by rust-bindgen 0.70.1 */

#[allow(unsafe_code)]
pub const MQAIR_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"AIR \0") };
pub const MQAIR_VERSION_1: MQLONG = 1;
pub const MQAIR_VERSION_2: MQLONG = 2;
pub const MQAIR_CURRENT_VERSION: MQLONG = 2;
pub const MQAIR_LENGTH_1: usize = 328;
pub const MQAIR_LENGTH_2: usize = 584;
pub const MQAIR_CURRENT_LENGTH: usize = 584;
pub const MQAIT_ALL: MQLONG = 0;
pub const MQAIT_CRL_LDAP: MQLONG = 1;
pub const MQAIT_OCSP: MQLONG = 2;
pub const MQAIT_IDPW_OS: MQLONG = 3;
pub const MQAIT_IDPW_LDAP: MQLONG = 4;
#[allow(unsafe_code)]
pub const MQBNO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"BNO \0") };
pub const MQBNO_VERSION_1: MQLONG = 1;
pub const MQBNO_CURRENT_VERSION: MQLONG = 1;
pub const MQBNO_LENGTH_1: usize = 20;
pub const MQBNO_CURRENT_LENGTH: usize = 20;
pub const MQBNO_OPTIONS_NONE: MQLONG = 0;
pub const MQBNO_OPTIONS_IGNORE_TRANS: MQLONG = 1;
pub const MQBNO_BALTYPE_SIMPLE: MQLONG = 0;
pub const MQBNO_BALTYPE_REQREP: MQLONG = 1;
pub const MQBNO_BALTYPE_RA_MANAGED: MQLONG = 65536;
pub const MQBNO_TIMEOUT_AS_DEFAULT: MQLONG = -1;
pub const MQBNO_TIMEOUT_IMMEDIATE: MQLONG = 0;
pub const MQBNO_TIMEOUT_NEVER: MQLONG = -2;
#[allow(unsafe_code)]
pub const MQBMHO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"BMHO\0") };
pub const MQBMHO_VERSION_1: MQLONG = 1;
pub const MQBMHO_CURRENT_VERSION: MQLONG = 1;
pub const MQBMHO_LENGTH_1: usize = 12;
pub const MQBMHO_CURRENT_LENGTH: usize = 12;
pub const MQBMHO_NONE: MQLONG = 0;
pub const MQBMHO_DELETE_PROPERTIES: MQLONG = 1;
#[allow(unsafe_code)]
pub const MQBO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"BO  \0") };
pub const MQBO_VERSION_1: MQLONG = 1;
pub const MQBO_CURRENT_VERSION: MQLONG = 1;
pub const MQBO_LENGTH_1: usize = 12;
pub const MQBO_CURRENT_LENGTH: usize = 12;
pub const MQBO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQCBC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CBC \0") };
pub const MQCBC_VERSION_1: MQLONG = 1;
pub const MQCBC_VERSION_2: MQLONG = 2;
pub const MQCBC_CURRENT_VERSION: MQLONG = 2;
pub const MQCBC_LENGTH_1: usize = 56;
pub const MQCBC_LENGTH_2: usize = 64;
pub const MQCBC_CURRENT_LENGTH: usize = 64;
pub const MQCBCF_NONE: MQLONG = 0;
pub const MQCBCF_READA_BUFFER_EMPTY: MQLONG = 1;
pub const MQCBCT_START_CALL: MQLONG = 1;
pub const MQCBCT_STOP_CALL: MQLONG = 2;
pub const MQCBCT_REGISTER_CALL: MQLONG = 3;
pub const MQCBCT_DEREGISTER_CALL: MQLONG = 4;
pub const MQCBCT_EVENT_CALL: MQLONG = 5;
pub const MQCBCT_MSG_REMOVED: MQLONG = 6;
pub const MQCBCT_MSG_NOT_REMOVED: MQLONG = 7;
pub const MQCBCT_MC_EVENT_CALL: MQLONG = 8;
pub const MQCS_NONE: MQLONG = 0;
pub const MQCS_SUSPENDED_TEMPORARY: MQLONG = 1;
pub const MQCS_SUSPENDED_USER_ACTION: MQLONG = 2;
pub const MQCS_SUSPENDED: MQLONG = 3;
pub const MQCS_STOPPED: MQLONG = 4;
pub const MQRD_NO_RECONNECT: MQLONG = -1;
pub const MQRD_NO_DELAY: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQCBD_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CBD \0") };
pub const MQCBD_VERSION_1: MQLONG = 1;
pub const MQCBD_CURRENT_VERSION: MQLONG = 1;
pub const MQCBD_LENGTH_1: usize = 168;
pub const MQCBD_CURRENT_LENGTH: usize = 168;
pub const MQCBDO_NONE: MQLONG = 0;
pub const MQCBDO_START_CALL: MQLONG = 1;
pub const MQCBDO_STOP_CALL: MQLONG = 4;
pub const MQCBDO_REGISTER_CALL: MQLONG = 256;
pub const MQCBDO_DEREGISTER_CALL: MQLONG = 512;
pub const MQCBDO_FAIL_IF_QUIESCING: MQLONG = 8192;
pub const MQCBDO_EVENT_CALL: MQLONG = 16384;
pub const MQCBDO_MC_EVENT_CALL: MQLONG = 32768;
pub const MQCBT_MESSAGE_CONSUMER: MQLONG = 1;
pub const MQCBT_EVENT_HANDLER: MQLONG = 2;
pub const MQCBD_FULL_MSG_LENGTH: usize = 18446744073709551615;
pub const MQVS_NULL_TERMINATED: MQLONG = -1;
#[allow(unsafe_code)]
pub const MQCIH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CIH \0") };
pub const MQCIH_VERSION_1: MQLONG = 1;
pub const MQCIH_VERSION_2: MQLONG = 2;
pub const MQCIH_CURRENT_VERSION: MQLONG = 2;
pub const MQCIH_LENGTH_1: usize = 164;
pub const MQCIH_LENGTH_2: usize = 180;
pub const MQCIH_CURRENT_LENGTH: usize = 180;
pub const MQCIH_NONE: MQLONG = 0;
pub const MQCIH_PASS_EXPIRATION: MQLONG = 1;
pub const MQCIH_UNLIMITED_EXPIRATION: MQLONG = 0;
pub const MQCIH_REPLY_WITHOUT_NULLS: MQLONG = 2;
pub const MQCIH_REPLY_WITH_NULLS: MQLONG = 0;
pub const MQCIH_SYNC_ON_RETURN: MQLONG = 4;
pub const MQCIH_NO_SYNC_ON_RETURN: MQLONG = 0;
pub const MQCRC_OK: MQLONG = 0;
pub const MQCRC_CICS_EXEC_ERROR: MQLONG = 1;
pub const MQCRC_MQ_API_ERROR: MQLONG = 2;
pub const MQCRC_BRIDGE_ERROR: MQLONG = 3;
pub const MQCRC_BRIDGE_ABEND: MQLONG = 4;
pub const MQCRC_APPLICATION_ABEND: MQLONG = 5;
pub const MQCRC_SECURITY_ERROR: MQLONG = 6;
pub const MQCRC_PROGRAM_NOT_AVAILABLE: MQLONG = 7;
pub const MQCRC_BRIDGE_TIMEOUT: MQLONG = 8;
pub const MQCRC_TRANSID_NOT_AVAILABLE: MQLONG = 9;
pub const MQCUOWC_ONLY: MQLONG = 273;
pub const MQCUOWC_CONTINUE: MQLONG = 65536;
pub const MQCUOWC_FIRST: MQLONG = 17;
pub const MQCUOWC_MIDDLE: MQLONG = 16;
pub const MQCUOWC_LAST: MQLONG = 272;
pub const MQCUOWC_COMMIT: MQLONG = 256;
pub const MQCUOWC_BACKOUT: MQLONG = 4352;
pub const MQCGWI_DEFAULT: MQLONG = -2;
pub const MQCLT_PROGRAM: MQLONG = 1;
pub const MQCLT_TRANSACTION: MQLONG = 2;
pub const MQCODL_AS_INPUT: MQLONG = -1;
pub const MQCADSD_NONE: MQLONG = 0;
pub const MQCADSD_SEND: MQLONG = 1;
pub const MQCADSD_RECV: MQLONG = 16;
pub const MQCADSD_MSGFORMAT: MQLONG = 256;
pub const MQCCT_YES: MQLONG = 1;
pub const MQCCT_NO: MQLONG = 0;
pub const MQCTES_NOSYNC: MQLONG = 0;
pub const MQCTES_COMMIT: MQLONG = 256;
pub const MQCTES_BACKOUT: MQLONG = 4352;
pub const MQCTES_ENDTASK: MQLONG = 65536;
pub const MQCFAC_NONE: &[u8; 9] = b"\0\0\0\0\0\0\0\0\0";
#[allow(unsafe_code)]
pub const MQCFUNC_MQCONN: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CONN\0") };
#[allow(unsafe_code)]
pub const MQCFUNC_MQGET: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"GET \0") };
#[allow(unsafe_code)]
pub const MQCFUNC_MQINQ: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"INQ \0") };
#[allow(unsafe_code)]
pub const MQCFUNC_MQOPEN: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"OPEN\0") };
#[allow(unsafe_code)]
pub const MQCFUNC_MQPUT: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"PUT \0") };
#[allow(unsafe_code)]
pub const MQCFUNC_MQPUT1: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"PUT1\0") };
#[allow(unsafe_code)]
pub const MQCFUNC_NONE: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"    \0") };
#[allow(unsafe_code)]
pub const MQCSC_START: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"S   \0") };
#[allow(unsafe_code)]
pub const MQCSC_STARTDATA: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SD  \0") };
#[allow(unsafe_code)]
pub const MQCSC_TERMINPUT: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"TD  \0") };
#[allow(unsafe_code)]
pub const MQCSC_NONE: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"    \0") };
#[allow(unsafe_code)]
pub const MQCMHO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CMHO\0") };
pub const MQCMHO_VERSION_1: MQLONG = 1;
pub const MQCMHO_CURRENT_VERSION: MQLONG = 1;
pub const MQCMHO_LENGTH_1: usize = 12;
pub const MQCMHO_CURRENT_LENGTH: usize = 12;
pub const MQCMHO_DEFAULT_VALIDATION: MQLONG = 0;
pub const MQCMHO_NO_VALIDATION: MQLONG = 1;
pub const MQCMHO_VALIDATE: MQLONG = 2;
pub const MQCMHO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQCTLO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CTLO\0") };
pub const MQCTLO_VERSION_1: MQLONG = 1;
pub const MQCTLO_CURRENT_VERSION: MQLONG = 1;
pub const MQCTLO_LENGTH_1: usize = 24;
pub const MQCTLO_CURRENT_LENGTH: usize = 24;
pub const MQCTLO_NONE: MQLONG = 0;
pub const MQCTLO_THREAD_AFFINITY: MQLONG = 1;
pub const MQCTLO_FAIL_IF_QUIESCING: MQLONG = 8192;
#[allow(unsafe_code)]
pub const MQSCO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SCO \0") };
pub const MQSCO_VERSION_1: MQLONG = 1;
pub const MQSCO_VERSION_2: MQLONG = 2;
pub const MQSCO_VERSION_3: MQLONG = 3;
pub const MQSCO_VERSION_4: MQLONG = 4;
pub const MQSCO_VERSION_5: MQLONG = 5;
pub const MQSCO_VERSION_6: MQLONG = 6;
pub const MQSCO_CURRENT_VERSION: MQLONG = 6;
pub const MQSCO_LENGTH_1: usize = 536;
pub const MQSCO_LENGTH_2: usize = 544;
pub const MQSCO_LENGTH_3: usize = 560;
pub const MQSCO_LENGTH_4: usize = 568;
pub const MQSCO_LENGTH_5: usize = 632;
pub const MQSCO_LENGTH_6: usize = 648;
pub const MQSCO_CURRENT_LENGTH: usize = 648;
pub const MQ_SUITE_B_NOT_AVAILABLE: MQLONG = 0;
pub const MQ_SUITE_B_NONE: MQLONG = 1;
pub const MQ_SUITE_B_128_BIT: MQLONG = 2;
pub const MQ_SUITE_B_192_BIT: MQLONG = 4;
pub const MQSCO_RESET_COUNT_DEFAULT: MQLONG = 0;
pub const MQ_CERT_VAL_POLICY_DEFAULT: MQLONG = 0;
pub const MQ_CERT_VAL_POLICY_ANY: MQLONG = 0;
pub const MQ_CERT_VAL_POLICY_RFC5280: MQLONG = 1;
pub const MQ_CERT_VAL_POLICY_NONE: MQLONG = 2;
#[allow(unsafe_code)]
pub const MQCSP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CSP \0") };
pub const MQCSP_VERSION_1: MQLONG = 1;
pub const MQCSP_VERSION_2: MQLONG = 2;
pub const MQCSP_VERSION_3: MQLONG = 3;
pub const MQCSP_CURRENT_VERSION: MQLONG = 3;
pub const MQCSP_LENGTH_1: usize = 56;
pub const MQCSP_LENGTH_2: usize = 80;
pub const MQCSP_LENGTH_3: usize = 104;
pub const MQCSP_CURRENT_LENGTH: usize = 104;
pub const MQCSP_AUTH_NONE: MQLONG = 0;
pub const MQCSP_AUTH_USER_ID_AND_PWD: MQLONG = 1;
pub const MQCSP_AUTH_ID_TOKEN: MQLONG = 2;
#[allow(unsafe_code)]
pub const MQCNO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CNO \0") };
pub const MQCNO_VERSION_1: MQLONG = 1;
pub const MQCNO_VERSION_2: MQLONG = 2;
pub const MQCNO_VERSION_3: MQLONG = 3;
pub const MQCNO_VERSION_4: MQLONG = 4;
pub const MQCNO_VERSION_5: MQLONG = 5;
pub const MQCNO_VERSION_6: MQLONG = 6;
pub const MQCNO_VERSION_7: MQLONG = 7;
pub const MQCNO_VERSION_8: MQLONG = 8;
pub const MQCNO_CURRENT_VERSION: MQLONG = 8;
pub const MQCNO_LENGTH_1: usize = 12;
pub const MQCNO_LENGTH_2: usize = 24;
pub const MQCNO_LENGTH_3: usize = 152;
pub const MQCNO_LENGTH_4: usize = 168;
pub const MQCNO_LENGTH_5: usize = 200;
pub const MQCNO_LENGTH_6: usize = 224;
pub const MQCNO_LENGTH_7: usize = 256;
pub const MQCNO_LENGTH_8: usize = 272;
pub const MQCNO_CURRENT_LENGTH: usize = 272;
pub const MQCNO_STANDARD_BINDING: MQLONG = 0;
pub const MQCNO_FASTPATH_BINDING: MQLONG = 1;
pub const MQCNO_SERIALIZE_CONN_TAG_Q_MGR: MQLONG = 2;
pub const MQCNO_SERIALIZE_CONN_TAG_QSG: MQLONG = 4;
pub const MQCNO_RESTRICT_CONN_TAG_Q_MGR: MQLONG = 8;
pub const MQCNO_RESTRICT_CONN_TAG_QSG: MQLONG = 16;
pub const MQCNO_HANDLE_SHARE_NONE: MQLONG = 32;
pub const MQCNO_HANDLE_SHARE_BLOCK: MQLONG = 64;
pub const MQCNO_HANDLE_SHARE_NO_BLOCK: MQLONG = 128;
pub const MQCNO_SHARED_BINDING: MQLONG = 256;
pub const MQCNO_ISOLATED_BINDING: MQLONG = 512;
pub const MQCNO_LOCAL_BINDING: MQLONG = 1024;
pub const MQCNO_CLIENT_BINDING: MQLONG = 2048;
pub const MQCNO_ACCOUNTING_MQI_ENABLED: MQLONG = 4096;
pub const MQCNO_ACCOUNTING_MQI_DISABLED: MQLONG = 8192;
pub const MQCNO_ACCOUNTING_Q_ENABLED: MQLONG = 16384;
pub const MQCNO_ACCOUNTING_Q_DISABLED: MQLONG = 32768;
pub const MQCNO_NO_CONV_SHARING: MQLONG = 65536;
pub const MQCNO_ALL_CONVS_SHARE: MQLONG = 262144;
pub const MQCNO_CD_FOR_OUTPUT_ONLY: MQLONG = 524288;
pub const MQCNO_USE_CD_SELECTION: MQLONG = 1048576;
pub const MQCNO_GENERATE_CONN_TAG: MQLONG = 2097152;
pub const MQCNO_RECONNECT_AS_DEF: MQLONG = 0;
pub const MQCNO_RECONNECT: MQLONG = 16777216;
pub const MQCNO_RECONNECT_DISABLED: MQLONG = 33554432;
pub const MQCNO_RECONNECT_Q_MGR: MQLONG = 67108864;
pub const MQCNO_ACTIVITY_TRACE_ENABLED: MQLONG = 134217728;
pub const MQCNO_ACTIVITY_TRACE_DISABLED: MQLONG = 268435456;
pub const MQCNO_NONE: MQLONG = 0;
pub const MQCT_NONE : & [u8 ; 129] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" ;
pub const MQCONNID_NONE: &[u8; 25] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
#[allow(unsafe_code)]
pub const MQAN_NONE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"                            \0") };
#[allow(unsafe_code)]
pub const MQDH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"DH  \0") };
pub const MQDH_VERSION_1: MQLONG = 1;
pub const MQDH_CURRENT_VERSION: MQLONG = 1;
pub const MQDH_LENGTH_1: usize = 48;
pub const MQDH_CURRENT_LENGTH: usize = 48;
pub const MQDHF_NEW_MSG_IDS: MQLONG = 1;
pub const MQDHF_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQDLH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"DLH \0") };
pub const MQDLH_VERSION_1: MQLONG = 1;
pub const MQDLH_CURRENT_VERSION: MQLONG = 1;
pub const MQDLH_LENGTH_1: usize = 172;
pub const MQDLH_CURRENT_LENGTH: usize = 172;
#[allow(unsafe_code)]
pub const MQDMHO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"DMHO\0") };
pub const MQDMHO_VERSION_1: MQLONG = 1;
pub const MQDMHO_CURRENT_VERSION: MQLONG = 1;
pub const MQDMHO_LENGTH_1: usize = 12;
pub const MQDMHO_CURRENT_LENGTH: usize = 12;
pub const MQDMHO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQDMPO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"DMPO\0") };
pub const MQDMPO_VERSION_1: MQLONG = 1;
pub const MQDMPO_CURRENT_VERSION: MQLONG = 1;
pub const MQDMPO_LENGTH_1: usize = 12;
pub const MQDMPO_CURRENT_LENGTH: usize = 12;
pub const MQDMPO_DEL_FIRST: MQLONG = 0;
pub const MQDMPO_DEL_PROP_UNDER_CURSOR: MQLONG = 1;
pub const MQDMPO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQGMO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"GMO \0") };
pub const MQGMO_VERSION_1: MQLONG = 1;
pub const MQGMO_VERSION_2: MQLONG = 2;
pub const MQGMO_VERSION_3: MQLONG = 3;
pub const MQGMO_VERSION_4: MQLONG = 4;
pub const MQGMO_CURRENT_VERSION: MQLONG = 4;
pub const MQGMO_LENGTH_1: usize = 72;
pub const MQGMO_LENGTH_2: usize = 80;
pub const MQGMO_LENGTH_3: usize = 100;
pub const MQGMO_LENGTH_4: usize = 112;
pub const MQGMO_CURRENT_LENGTH: usize = 112;
pub const MQGMO_WAIT: MQLONG = 1;
pub const MQGMO_NO_WAIT: MQLONG = 0;
pub const MQGMO_SET_SIGNAL: MQLONG = 8;
pub const MQGMO_FAIL_IF_QUIESCING: MQLONG = 8192;
pub const MQGMO_SYNCPOINT: MQLONG = 2;
pub const MQGMO_SYNCPOINT_IF_PERSISTENT: MQLONG = 4096;
pub const MQGMO_NO_SYNCPOINT: MQLONG = 4;
pub const MQGMO_MARK_SKIP_BACKOUT: MQLONG = 128;
pub const MQGMO_BROWSE_FIRST: MQLONG = 16;
pub const MQGMO_BROWSE_NEXT: MQLONG = 32;
pub const MQGMO_BROWSE_MSG_UNDER_CURSOR: MQLONG = 2048;
pub const MQGMO_MSG_UNDER_CURSOR: MQLONG = 256;
pub const MQGMO_LOCK: MQLONG = 512;
pub const MQGMO_UNLOCK: MQLONG = 1024;
pub const MQGMO_ACCEPT_TRUNCATED_MSG: MQLONG = 64;
pub const MQGMO_CONVERT: MQLONG = 16384;
pub const MQGMO_LOGICAL_ORDER: MQLONG = 32768;
pub const MQGMO_COMPLETE_MSG: MQLONG = 65536;
pub const MQGMO_ALL_MSGS_AVAILABLE: MQLONG = 131072;
pub const MQGMO_ALL_SEGMENTS_AVAILABLE: MQLONG = 262144;
pub const MQGMO_MARK_BROWSE_HANDLE: MQLONG = 1048576;
pub const MQGMO_MARK_BROWSE_CO_OP: MQLONG = 2097152;
pub const MQGMO_UNMARK_BROWSE_CO_OP: MQLONG = 4194304;
pub const MQGMO_UNMARK_BROWSE_HANDLE: MQLONG = 8388608;
pub const MQGMO_UNMARKED_BROWSE_MSG: MQLONG = 16777216;
pub const MQGMO_PROPERTIES_FORCE_MQRFH2: MQLONG = 33554432;
pub const MQGMO_NO_PROPERTIES: MQLONG = 67108864;
pub const MQGMO_PROPERTIES_IN_HANDLE: MQLONG = 134217728;
pub const MQGMO_PROPERTIES_COMPATIBILITY: MQLONG = 268435456;
pub const MQGMO_PROPERTIES_AS_Q_DEF: MQLONG = 0;
pub const MQGMO_NONE: MQLONG = 0;
pub const MQGMO_BROWSE_HANDLE: MQLONG = 17825808;
pub const MQGMO_BROWSE_CO_OP: MQLONG = 18874384;
pub const MQWI_UNLIMITED: MQLONG = -1;
pub const MQEC_MSG_ARRIVED: MQLONG = 2;
pub const MQEC_WAIT_INTERVAL_EXPIRED: MQLONG = 3;
pub const MQEC_WAIT_CANCELED: MQLONG = 4;
pub const MQEC_Q_MGR_QUIESCING: MQLONG = 5;
pub const MQEC_CONNECTION_QUIESCING: MQLONG = 6;
pub const MQMO_MATCH_MSG_ID: MQLONG = 1;
pub const MQMO_MATCH_CORREL_ID: MQLONG = 2;
pub const MQMO_MATCH_GROUP_ID: MQLONG = 4;
pub const MQMO_MATCH_MSG_SEQ_NUMBER: MQLONG = 8;
pub const MQMO_MATCH_OFFSET: MQLONG = 16;
pub const MQMO_MATCH_MSG_TOKEN: MQLONG = 32;
pub const MQMO_NONE: MQLONG = 0;
pub const MQGS_NOT_IN_GROUP: u8 = 32u8;
pub const MQGS_MSG_IN_GROUP: u8 = 71u8;
pub const MQGS_LAST_MSG_IN_GROUP: u8 = 76u8;
pub const MQSS_NOT_A_SEGMENT: u8 = 32u8;
pub const MQSS_SEGMENT: u8 = 83u8;
pub const MQSS_LAST_SEGMENT: u8 = 76u8;
pub const MQSEG_INHIBITED: u8 = 32u8;
pub const MQSEG_ALLOWED: u8 = 65u8;
pub const MQMTOK_NONE: &[u8; 17] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQRL_UNDEFINED: MQLONG = -1;
#[allow(unsafe_code)]
pub const MQIIH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"IIH \0") };
pub const MQIIH_VERSION_1: MQLONG = 1;
pub const MQIIH_CURRENT_VERSION: MQLONG = 1;
pub const MQIIH_LENGTH_1: usize = 84;
pub const MQIIH_CURRENT_LENGTH: usize = 84;
pub const MQIIH_NONE: MQLONG = 0;
pub const MQIIH_PASS_EXPIRATION: MQLONG = 1;
pub const MQIIH_UNLIMITED_EXPIRATION: MQLONG = 0;
pub const MQIIH_REPLY_FORMAT_NONE: MQLONG = 8;
pub const MQIIH_IGNORE_PURG: MQLONG = 16;
pub const MQIIH_CM0_REQUEST_RESPONSE: MQLONG = 32;
#[allow(unsafe_code)]
pub const MQIAUT_NONE: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"        \0") };
pub const MQITII_NONE: &[u8; 17] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQITS_IN_CONVERSATION: u8 = 67u8;
pub const MQITS_NOT_IN_CONVERSATION: u8 = 32u8;
pub const MQITS_ARCHITECTED: u8 = 65u8;
pub const MQICM_COMMIT_THEN_SEND: u8 = 48u8;
pub const MQICM_SEND_THEN_COMMIT: u8 = 49u8;
pub const MQISS_CHECK: u8 = 67u8;
pub const MQISS_FULL: u8 = 70u8;
#[allow(unsafe_code)]
pub const MQIMPO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"IMPO\0") };
pub const MQIMPO_VERSION_1: MQLONG = 1;
pub const MQIMPO_CURRENT_VERSION: MQLONG = 1;
pub const MQIMPO_LENGTH_1: usize = 64;
pub const MQIMPO_CURRENT_LENGTH: usize = 64;
pub const MQIMPO_CONVERT_TYPE: MQLONG = 2;
pub const MQIMPO_QUERY_LENGTH: usize = 4;
pub const MQIMPO_INQ_FIRST: MQLONG = 0;
pub const MQIMPO_INQ_NEXT: MQLONG = 8;
pub const MQIMPO_INQ_PROP_UNDER_CURSOR: MQLONG = 16;
pub const MQIMPO_CONVERT_VALUE: MQLONG = 32;
pub const MQIMPO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQMD_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MD  \0") };
pub const MQMD_VERSION_1: MQLONG = 1;
pub const MQMD_VERSION_2: MQLONG = 2;
pub const MQMD_CURRENT_VERSION: MQLONG = 2;
pub const MQMD_LENGTH_1: usize = 324;
pub const MQMD_LENGTH_2: usize = 364;
pub const MQMD_CURRENT_LENGTH: usize = 364;
pub const MQRO_EXCEPTION: MQLONG = 16777216;
pub const MQRO_EXCEPTION_WITH_DATA: MQLONG = 50331648;
pub const MQRO_EXCEPTION_WITH_FULL_DATA: MQLONG = 117440512;
pub const MQRO_EXPIRATION: MQLONG = 2097152;
pub const MQRO_EXPIRATION_WITH_DATA: MQLONG = 6291456;
pub const MQRO_EXPIRATION_WITH_FULL_DATA: MQLONG = 14680064;
pub const MQRO_COA: MQLONG = 256;
pub const MQRO_COA_WITH_DATA: MQLONG = 768;
pub const MQRO_COA_WITH_FULL_DATA: MQLONG = 1792;
pub const MQRO_COD: MQLONG = 2048;
pub const MQRO_COD_WITH_DATA: MQLONG = 6144;
pub const MQRO_COD_WITH_FULL_DATA: MQLONG = 14336;
pub const MQRO_PAN: MQLONG = 1;
pub const MQRO_NAN: MQLONG = 2;
pub const MQRO_ACTIVITY: MQLONG = 4;
pub const MQRO_NEW_MSG_ID: MQLONG = 0;
pub const MQRO_PASS_MSG_ID: MQLONG = 128;
pub const MQRO_COPY_MSG_ID_TO_CORREL_ID: MQLONG = 0;
pub const MQRO_PASS_CORREL_ID: MQLONG = 64;
pub const MQRO_DEAD_LETTER_Q: MQLONG = 0;
pub const MQRO_DISCARD_MSG: MQLONG = 134217728;
pub const MQRO_PASS_DISCARD_AND_EXPIRY: MQLONG = 16384;
pub const MQRO_NONE: MQLONG = 0;
pub const MQRO_REJECT_UNSUP_MASK: u32 = 270270464;
pub const MQRO_ACCEPT_UNSUP_MASK: u32 = 4024434943;
pub const MQRO_ACCEPT_UNSUP_IF_XMIT_MASK: u32 = 261888;
pub const MQMT_SYSTEM_FIRST: MQLONG = 1;
pub const MQMT_REQUEST: MQLONG = 1;
pub const MQMT_REPLY: MQLONG = 2;
pub const MQMT_DATAGRAM: MQLONG = 8;
pub const MQMT_REPORT: MQLONG = 4;
pub const MQMT_MQE_FIELDS_FROM_MQE: MQLONG = 112;
pub const MQMT_MQE_FIELDS: MQLONG = 113;
pub const MQMT_SYSTEM_LAST: MQLONG = 65535;
pub const MQMT_APPL_FIRST: MQLONG = 65536;
pub const MQMT_APPL_LAST: MQLONG = 999999999;
pub const MQEI_UNLIMITED: MQLONG = -1;
pub const MQFB_NONE: MQLONG = 0;
pub const MQFB_SYSTEM_FIRST: MQLONG = 1;
pub const MQFB_QUIT: MQLONG = 256;
pub const MQFB_EXPIRATION: MQLONG = 258;
pub const MQFB_COA: MQLONG = 259;
pub const MQFB_COD: MQLONG = 260;
pub const MQFB_CHANNEL_COMPLETED: MQLONG = 262;
pub const MQFB_CHANNEL_FAIL_RETRY: MQLONG = 263;
pub const MQFB_CHANNEL_FAIL: MQLONG = 264;
pub const MQFB_APPL_CANNOT_BE_STARTED: MQLONG = 265;
pub const MQFB_TM_ERROR: MQLONG = 266;
pub const MQFB_APPL_TYPE_ERROR: MQLONG = 267;
pub const MQFB_STOPPED_BY_MSG_EXIT: MQLONG = 268;
pub const MQFB_ACTIVITY: MQLONG = 269;
pub const MQFB_XMIT_Q_MSG_ERROR: MQLONG = 271;
pub const MQFB_PAN: MQLONG = 275;
pub const MQFB_NAN: MQLONG = 276;
pub const MQFB_STOPPED_BY_CHAD_EXIT: MQLONG = 277;
pub const MQFB_STOPPED_BY_PUBSUB_EXIT: MQLONG = 279;
pub const MQFB_NOT_A_REPOSITORY_MSG: MQLONG = 280;
pub const MQFB_BIND_OPEN_CLUSRCVR_DEL: MQLONG = 281;
pub const MQFB_MAX_ACTIVITIES: MQLONG = 282;
pub const MQFB_NOT_FORWARDED: MQLONG = 283;
pub const MQFB_NOT_DELIVERED: MQLONG = 284;
pub const MQFB_UNSUPPORTED_FORWARDING: MQLONG = 285;
pub const MQFB_UNSUPPORTED_DELIVERY: MQLONG = 286;
pub const MQFB_DATA_LENGTH_ZERO: usize = 291;
pub const MQFB_DATA_LENGTH_NEGATIVE: usize = 292;
pub const MQFB_DATA_LENGTH_TOO_BIG: usize = 293;
pub const MQFB_BUFFER_OVERFLOW: MQLONG = 294;
pub const MQFB_LENGTH_OFF_BY_ONE: usize = 295;
pub const MQFB_IIH_ERROR: MQLONG = 296;
pub const MQFB_NOT_AUTHORIZED_FOR_IMS: MQLONG = 298;
pub const MQFB_DATA_LENGTH_TOO_SHORT: usize = 299;
pub const MQFB_IMS_ERROR: MQLONG = 300;
pub const MQFB_IMS_FIRST: MQLONG = 301;
pub const MQFB_IMS_LAST: MQLONG = 399;
pub const MQFB_CICS_INTERNAL_ERROR: MQLONG = 401;
pub const MQFB_CICS_NOT_AUTHORIZED: MQLONG = 402;
pub const MQFB_CICS_BRIDGE_FAILURE: MQLONG = 403;
pub const MQFB_CICS_CORREL_ID_ERROR: MQLONG = 404;
pub const MQFB_CICS_CCSID_ERROR: MQLONG = 405;
pub const MQFB_CICS_ENCODING_ERROR: MQLONG = 406;
pub const MQFB_CICS_CIH_ERROR: MQLONG = 407;
pub const MQFB_CICS_UOW_ERROR: MQLONG = 408;
pub const MQFB_CICS_COMMAREA_ERROR: MQLONG = 409;
pub const MQFB_CICS_APPL_NOT_STARTED: MQLONG = 410;
pub const MQFB_CICS_APPL_ABENDED: MQLONG = 411;
pub const MQFB_CICS_DLQ_ERROR: MQLONG = 412;
pub const MQFB_CICS_UOW_BACKED_OUT: MQLONG = 413;
pub const MQFB_PUBLICATIONS_ON_REQUEST: MQLONG = 501;
pub const MQFB_SUBSCRIBER_IS_PUBLISHER: MQLONG = 502;
pub const MQFB_MSG_SCOPE_MISMATCH: MQLONG = 503;
pub const MQFB_SELECTOR_MISMATCH: MQLONG = 504;
pub const MQFB_NOT_A_GROUPUR_MSG: MQLONG = 505;
pub const MQFB_IMS_NACK_1A_REASON_FIRST: MQLONG = 600;
pub const MQFB_IMS_NACK_1A_REASON_LAST: MQLONG = 855;
pub const MQFB_SYSTEM_LAST: MQLONG = 65535;
pub const MQFB_APPL_FIRST: MQLONG = 65536;
pub const MQFB_APPL_LAST: MQLONG = 999999999;
pub const MQENC_NATIVE: MQLONG = 546;
pub const MQENC_INTEGER_MASK: u32 = 15;
pub const MQENC_DECIMAL_MASK: u32 = 240;
pub const MQENC_FLOAT_MASK: u32 = 3840;
pub const MQENC_RESERVED_MASK: u32 = 4294963200;
pub const MQENC_INTEGER_UNDEFINED: MQLONG = 0;
pub const MQENC_INTEGER_NORMAL: MQLONG = 1;
pub const MQENC_INTEGER_REVERSED: MQLONG = 2;
pub const MQENC_DECIMAL_UNDEFINED: MQLONG = 0;
pub const MQENC_DECIMAL_NORMAL: MQLONG = 16;
pub const MQENC_DECIMAL_REVERSED: MQLONG = 32;
pub const MQENC_FLOAT_UNDEFINED: MQLONG = 0;
pub const MQENC_FLOAT_IEEE_NORMAL: MQLONG = 256;
pub const MQENC_FLOAT_IEEE_REVERSED: MQLONG = 512;
pub const MQENC_FLOAT_S390: MQLONG = 768;
pub const MQENC_FLOAT_TNS: MQLONG = 1024;
pub const MQENC_NORMAL: MQLONG = 273;
pub const MQENC_REVERSED: MQLONG = 546;
pub const MQENC_S390: MQLONG = 785;
pub const MQENC_TNS: MQLONG = 1041;
pub const MQENC_AS_PUBLISHED: MQLONG = -1;
pub const MQCCSI_UNDEFINED: MQLONG = 0;
pub const MQCCSI_DEFAULT: MQLONG = 0;
pub const MQCCSI_Q_MGR: MQLONG = 0;
pub const MQCCSI_INHERIT: MQLONG = -2;
pub const MQCCSI_EMBEDDED: MQLONG = -1;
pub const MQCCSI_APPL: MQLONG = -3;
pub const MQCCSI_AS_PUBLISHED: MQLONG = -4;
#[allow(unsafe_code)]
pub const MQFMT_NONE: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"        \0") };
#[allow(unsafe_code)]
pub const MQFMT_ADMIN: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQADMIN \0") };
#[allow(unsafe_code)]
pub const MQFMT_AMQP: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQAMQP  \0") };
#[allow(unsafe_code)]
pub const MQFMT_CHANNEL_COMPLETED: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQCHCOM \0") };
#[allow(unsafe_code)]
pub const MQFMT_CICS: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQCICS  \0") };
#[allow(unsafe_code)]
pub const MQFMT_COMMAND_1: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQCMD1  \0") };
#[allow(unsafe_code)]
pub const MQFMT_COMMAND_2: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQCMD2  \0") };
#[allow(unsafe_code)]
pub const MQFMT_DEAD_LETTER_HEADER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQDEAD  \0") };
#[allow(unsafe_code)]
pub const MQFMT_DIST_HEADER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHDIST \0") };
#[allow(unsafe_code)]
pub const MQFMT_EMBEDDED_PCF: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHEPCF \0") };
#[allow(unsafe_code)]
pub const MQFMT_EVENT: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQEVENT \0") };
#[allow(unsafe_code)]
pub const MQFMT_IMS: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQIMS   \0") };
#[allow(unsafe_code)]
pub const MQFMT_IMS_VAR_STRING: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQIMSVS \0") };
#[allow(unsafe_code)]
pub const MQFMT_MD_EXTENSION: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHMDE  \0") };
#[allow(unsafe_code)]
pub const MQFMT_PCF: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQPCF   \0") };
#[allow(unsafe_code)]
pub const MQFMT_REF_MSG_HEADER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHREF  \0") };
#[allow(unsafe_code)]
pub const MQFMT_RF_HEADER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHRF   \0") };
#[allow(unsafe_code)]
pub const MQFMT_RF_HEADER_1: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHRF   \0") };
#[allow(unsafe_code)]
pub const MQFMT_RF_HEADER_2: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHRF2  \0") };
#[allow(unsafe_code)]
pub const MQFMT_STRING: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQSTR   \0") };
#[allow(unsafe_code)]
pub const MQFMT_TRIGGER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQTRIG  \0") };
#[allow(unsafe_code)]
pub const MQFMT_WORK_INFO_HEADER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQHWIH  \0") };
#[allow(unsafe_code)]
pub const MQFMT_XMIT_Q_HEADER: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MQXMIT  \0") };
pub const MQPRI_PRIORITY_AS_Q_DEF: MQLONG = -1;
pub const MQPRI_PRIORITY_AS_PARENT: MQLONG = -2;
pub const MQPRI_PRIORITY_AS_PUBLISHED: MQLONG = -3;
pub const MQPRI_PRIORITY_AS_TOPIC_DEF: MQLONG = -1;
pub const MQPER_PERSISTENCE_AS_PARENT: MQLONG = -1;
pub const MQPER_NOT_PERSISTENT: MQLONG = 0;
pub const MQPER_PERSISTENT: MQLONG = 1;
pub const MQPER_PERSISTENCE_AS_Q_DEF: MQLONG = 2;
pub const MQPER_PERSISTENCE_AS_TOPIC_DEF: MQLONG = 2;
pub const MQPRT_RESPONSE_AS_PARENT: MQLONG = 0;
pub const MQPRT_SYNC_RESPONSE: MQLONG = 1;
pub const MQPRT_ASYNC_RESPONSE: MQLONG = 2;
pub const MQMI_NONE: &[u8; 25] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQCI_NONE: &[u8; 25] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
#[allow(unsafe_code)]
pub const MQCI_NEW_SESSION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"AMQ!NEW_SESSION_CORRELID\0") };
pub const MQACT_NONE: &[u8; 33] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQACTT_UNKNOWN: u8 = 0u8;
pub const MQACTT_CICS_LUOW_ID: u8 = 1u8;
pub const MQACTT_OS2_DEFAULT: u8 = 4u8;
pub const MQACTT_DOS_DEFAULT: u8 = 5u8;
pub const MQACTT_UNIX_NUMERIC_ID: u8 = 6u8;
pub const MQACTT_OS400_ACCOUNT_TOKEN: u8 = 8u8;
pub const MQACTT_WINDOWS_DEFAULT: u8 = 9u8;
pub const MQACTT_NT_SECURITY_ID: u8 = 11u8;
pub const MQACTT_AZUREAD_SECURITY_ID: u8 = 12u8;
pub const MQACTT_MS_ACC_AUTH_SECURITY_ID: u8 = 13u8;
pub const MQACTT_USER: u8 = 25u8;
pub const MQAT_UNKNOWN: MQLONG = -1;
pub const MQAT_NO_CONTEXT: MQLONG = 0;
pub const MQAT_CICS: MQLONG = 1;
pub const MQAT_MVS: MQLONG = 2;
pub const MQAT_OS390: MQLONG = 2;
pub const MQAT_ZOS: MQLONG = 2;
pub const MQAT_IMS: MQLONG = 3;
pub const MQAT_OS2: MQLONG = 4;
pub const MQAT_DOS: MQLONG = 5;
pub const MQAT_AIX: MQLONG = 6;
pub const MQAT_UNIX: MQLONG = 6;
pub const MQAT_QMGR: MQLONG = 7;
pub const MQAT_OS400: MQLONG = 8;
pub const MQAT_WINDOWS: MQLONG = 9;
pub const MQAT_CICS_VSE: MQLONG = 10;
pub const MQAT_WINDOWS_NT: MQLONG = 11;
pub const MQAT_VMS: MQLONG = 12;
pub const MQAT_GUARDIAN: MQLONG = 13;
pub const MQAT_NSK: MQLONG = 13;
pub const MQAT_VOS: MQLONG = 14;
pub const MQAT_OPEN_TP1: MQLONG = 15;
pub const MQAT_VM: MQLONG = 18;
pub const MQAT_IMS_BRIDGE: MQLONG = 19;
pub const MQAT_XCF: MQLONG = 20;
pub const MQAT_CICS_BRIDGE: MQLONG = 21;
pub const MQAT_NOTES_AGENT: MQLONG = 22;
pub const MQAT_TPF: MQLONG = 23;
pub const MQAT_USER: MQLONG = 25;
pub const MQAT_BROKER: MQLONG = 26;
pub const MQAT_QMGR_PUBLISH: MQLONG = 26;
pub const MQAT_JAVA: MQLONG = 28;
pub const MQAT_DQM: MQLONG = 29;
pub const MQAT_CHANNEL_INITIATOR: MQLONG = 30;
pub const MQAT_WLM: MQLONG = 31;
pub const MQAT_BATCH: MQLONG = 32;
pub const MQAT_RRS_BATCH: MQLONG = 33;
pub const MQAT_SIB: MQLONG = 34;
pub const MQAT_SYSTEM_EXTENSION: MQLONG = 35;
pub const MQAT_MCAST_PUBLISH: MQLONG = 36;
pub const MQAT_AMQP: MQLONG = 37;
pub const MQAT_DEFAULT: MQLONG = 6;
pub const MQAT_USER_FIRST: MQLONG = 65536;
pub const MQAT_USER_LAST: MQLONG = 999999999;
pub const MQGI_NONE: &[u8; 25] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQMF_SEGMENTATION_INHIBITED: MQLONG = 0;
pub const MQMF_SEGMENTATION_ALLOWED: MQLONG = 1;
pub const MQMF_MSG_IN_GROUP: MQLONG = 8;
pub const MQMF_LAST_MSG_IN_GROUP: MQLONG = 16;
pub const MQMF_SEGMENT: MQLONG = 2;
pub const MQMF_LAST_SEGMENT: MQLONG = 4;
pub const MQMF_NONE: MQLONG = 0;
pub const MQMF_REJECT_UNSUP_MASK: u32 = 4095;
pub const MQMF_ACCEPT_UNSUP_MASK: u32 = 4293918720;
pub const MQMF_ACCEPT_UNSUP_IF_XMIT_MASK: u32 = 1044480;
pub const MQOL_UNDEFINED: MQLONG = -1;
#[allow(unsafe_code)]
pub const MQMDE_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MDE \0") };
pub const MQMDE_VERSION_2: MQLONG = 2;
pub const MQMDE_CURRENT_VERSION: MQLONG = 2;
pub const MQMDE_LENGTH_2: usize = 72;
pub const MQMDE_CURRENT_LENGTH: usize = 72;
pub const MQMDEF_NONE: MQLONG = 0;
pub const MQMD1_LENGTH_1: usize = 324;
pub const MQMD1_CURRENT_LENGTH: usize = 324;
pub const MQMD2_LENGTH_1: usize = 324;
pub const MQMD2_LENGTH_2: usize = 364;
pub const MQMD2_CURRENT_LENGTH: usize = 364;
#[allow(unsafe_code)]
pub const MQMHBO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MHBO\0") };
pub const MQMHBO_VERSION_1: MQLONG = 1;
pub const MQMHBO_CURRENT_VERSION: MQLONG = 1;
pub const MQMHBO_LENGTH_1: usize = 12;
pub const MQMHBO_CURRENT_LENGTH: usize = 12;
pub const MQMHBO_PROPERTIES_IN_MQRFH2: MQLONG = 1;
pub const MQMHBO_DELETE_PROPERTIES: MQLONG = 2;
pub const MQMHBO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQOD_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"OD  \0") };
pub const MQOD_VERSION_1: MQLONG = 1;
pub const MQOD_VERSION_2: MQLONG = 2;
pub const MQOD_VERSION_3: MQLONG = 3;
pub const MQOD_VERSION_4: MQLONG = 4;
pub const MQOD_CURRENT_VERSION: MQLONG = 4;
pub const MQOD_LENGTH_1: usize = 168;
pub const MQOD_LENGTH_2: usize = 208;
pub const MQOD_LENGTH_3: usize = 344;
pub const MQOD_LENGTH_4: usize = 424;
pub const MQOD_CURRENT_LENGTH: usize = 424;
pub const MQOM_NO: MQLONG = 0;
pub const MQOM_YES: MQLONG = 1;
pub const MQOT_NONE: MQLONG = 0;
pub const MQOT_Q: MQLONG = 1;
pub const MQOT_NAMELIST: MQLONG = 2;
pub const MQOT_PROCESS: MQLONG = 3;
pub const MQOT_STORAGE_CLASS: MQLONG = 4;
pub const MQOT_Q_MGR: MQLONG = 5;
pub const MQOT_CHANNEL: MQLONG = 6;
pub const MQOT_AUTH_INFO: MQLONG = 7;
pub const MQOT_TOPIC: MQLONG = 8;
pub const MQOT_COMM_INFO: MQLONG = 9;
pub const MQOT_CF_STRUC: MQLONG = 10;
pub const MQOT_LISTENER: MQLONG = 11;
pub const MQOT_SERVICE: MQLONG = 12;
pub const MQOT_RESERVED_1: MQLONG = 999;
pub const MQOT_ALL: MQLONG = 1001;
pub const MQOT_ALIAS_Q: MQLONG = 1002;
pub const MQOT_MODEL_Q: MQLONG = 1003;
pub const MQOT_LOCAL_Q: MQLONG = 1004;
pub const MQOT_REMOTE_Q: MQLONG = 1005;
pub const MQOT_SENDER_CHANNEL: MQLONG = 1007;
pub const MQOT_SERVER_CHANNEL: MQLONG = 1008;
pub const MQOT_REQUESTER_CHANNEL: MQLONG = 1009;
pub const MQOT_RECEIVER_CHANNEL: MQLONG = 1010;
pub const MQOT_CURRENT_CHANNEL: MQLONG = 1011;
pub const MQOT_SAVED_CHANNEL: MQLONG = 1012;
pub const MQOT_SVRCONN_CHANNEL: MQLONG = 1013;
pub const MQOT_CLNTCONN_CHANNEL: MQLONG = 1014;
pub const MQOT_SHORT_CHANNEL: MQLONG = 1015;
pub const MQOT_CHLAUTH: MQLONG = 1016;
pub const MQOT_REMOTE_Q_MGR_NAME: MQLONG = 1017;
pub const MQOT_PROT_POLICY: MQLONG = 1019;
pub const MQOT_TT_CHANNEL: MQLONG = 1020;
pub const MQOT_AMQP_CHANNEL: MQLONG = 1021;
pub const MQOT_AUTH_REC: MQLONG = 1022;
#[allow(unsafe_code)]
pub const MQPD_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"PD  \0") };
pub const MQPD_VERSION_1: MQLONG = 1;
pub const MQPD_CURRENT_VERSION: MQLONG = 1;
pub const MQPD_LENGTH_1: usize = 24;
pub const MQPD_CURRENT_LENGTH: usize = 24;
pub const MQPD_NONE: MQLONG = 0;
pub const MQPD_SUPPORT_OPTIONAL: MQLONG = 1;
pub const MQPD_SUPPORT_REQUIRED: MQLONG = 1048576;
pub const MQPD_SUPPORT_REQUIRED_IF_LOCAL: MQLONG = 1024;
pub const MQPD_REJECT_UNSUP_MASK: u32 = 4293918720;
pub const MQPD_ACCEPT_UNSUP_IF_XMIT_MASK: u32 = 1047552;
pub const MQPD_ACCEPT_UNSUP_MASK: u32 = 1023;
pub const MQPD_NO_CONTEXT: MQLONG = 0;
pub const MQPD_USER_CONTEXT: MQLONG = 1;
pub const MQCOPY_NONE: MQLONG = 0;
pub const MQCOPY_ALL: MQLONG = 1;
pub const MQCOPY_FORWARD: MQLONG = 2;
pub const MQCOPY_PUBLISH: MQLONG = 4;
pub const MQCOPY_REPLY: MQLONG = 8;
pub const MQCOPY_REPORT: MQLONG = 16;
pub const MQCOPY_DEFAULT: MQLONG = 22;
#[allow(unsafe_code)]
pub const MQPMO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"PMO \0") };
pub const MQPMO_VERSION_1: MQLONG = 1;
pub const MQPMO_VERSION_2: MQLONG = 2;
pub const MQPMO_VERSION_3: MQLONG = 3;
pub const MQPMO_CURRENT_VERSION: MQLONG = 3;
pub const MQPMO_LENGTH_1: usize = 128;
pub const MQPMO_LENGTH_2: usize = 160;
pub const MQPMO_LENGTH_3: usize = 184;
pub const MQPMO_CURRENT_LENGTH: usize = 184;
pub const MQPMO_SYNCPOINT: MQLONG = 2;
pub const MQPMO_NO_SYNCPOINT: MQLONG = 4;
pub const MQPMO_DEFAULT_CONTEXT: MQLONG = 32;
pub const MQPMO_NEW_MSG_ID: MQLONG = 64;
pub const MQPMO_NEW_CORREL_ID: MQLONG = 128;
pub const MQPMO_PASS_IDENTITY_CONTEXT: MQLONG = 256;
pub const MQPMO_PASS_ALL_CONTEXT: MQLONG = 512;
pub const MQPMO_SET_IDENTITY_CONTEXT: MQLONG = 1024;
pub const MQPMO_SET_ALL_CONTEXT: MQLONG = 2048;
pub const MQPMO_ALTERNATE_USER_AUTHORITY: MQLONG = 4096;
pub const MQPMO_FAIL_IF_QUIESCING: MQLONG = 8192;
pub const MQPMO_NO_CONTEXT: MQLONG = 16384;
pub const MQPMO_LOGICAL_ORDER: MQLONG = 32768;
pub const MQPMO_ASYNC_RESPONSE: MQLONG = 65536;
pub const MQPMO_SYNC_RESPONSE: MQLONG = 131072;
pub const MQPMO_RESOLVE_LOCAL_Q: MQLONG = 262144;
pub const MQPMO_WARN_IF_NO_SUBS_MATCHED: MQLONG = 524288;
pub const MQPMO_RETAIN: MQLONG = 2097152;
pub const MQPMO_MD_FOR_OUTPUT_ONLY: MQLONG = 8388608;
pub const MQPMO_SCOPE_QMGR: MQLONG = 67108864;
pub const MQPMO_SUPPRESS_REPLYTO: MQLONG = 134217728;
pub const MQPMO_NOT_OWN_SUBS: MQLONG = 268435456;
pub const MQPMO_RESPONSE_AS_Q_DEF: MQLONG = 0;
pub const MQPMO_RESPONSE_AS_TOPIC_DEF: MQLONG = 0;
pub const MQPMO_NONE: MQLONG = 0;
pub const MQPMO_PUB_OPTIONS_MASK: u32 = 2097152;
pub const MQPMRF_MSG_ID: MQLONG = 1;
pub const MQPMRF_CORREL_ID: MQLONG = 2;
pub const MQPMRF_GROUP_ID: MQLONG = 4;
pub const MQPMRF_FEEDBACK: MQLONG = 8;
pub const MQPMRF_ACCOUNTING_TOKEN: MQLONG = 16;
pub const MQPMRF_NONE: MQLONG = 0;
pub const MQACTP_NEW: MQLONG = 0;
pub const MQACTP_FORWARD: MQLONG = 1;
pub const MQACTP_REPLY: MQLONG = 2;
pub const MQACTP_REPORT: MQLONG = 3;
#[allow(unsafe_code)]
pub const MQRFH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"RFH \0") };
pub const MQRFH_VERSION_1: MQLONG = 1;
pub const MQRFH_VERSION_2: MQLONG = 2;
pub const MQRFH_STRUC_LENGTH_FIXED: usize = 32;
pub const MQRFH_STRUC_LENGTH_FIXED_2: usize = 36;
pub const MQRFH_LENGTH_1: usize = 32;
pub const MQRFH_CURRENT_LENGTH: usize = 32;
pub const MQRFH_NONE: MQLONG = 0;
pub const MQRFH_NO_FLAGS: MQLONG = 0;
pub const MQRFH_FLAGS_RESTRICTED_MASK: u32 = 4294901760;
#[allow(unsafe_code)]
pub const MQNVS_APPL_TYPE: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"OPT_APP_GRP \0") };
#[allow(unsafe_code)]
pub const MQNVS_MSG_TYPE: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"OPT_MSG_TYPE \0") };
pub const MQRFH2_LENGTH_2: usize = 36;
pub const MQRFH2_CURRENT_LENGTH: usize = 36;
#[allow(unsafe_code)]
pub const MQRMH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"RMH \0") };
pub const MQRMH_VERSION_1: MQLONG = 1;
pub const MQRMH_CURRENT_VERSION: MQLONG = 1;
pub const MQRMH_LENGTH_1: usize = 108;
pub const MQRMH_CURRENT_LENGTH: usize = 108;
pub const MQRMHF_LAST: MQLONG = 1;
pub const MQRMHF_NOT_LAST: MQLONG = 0;
pub const MQOII_NONE: &[u8; 25] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
#[allow(unsafe_code)]
pub const MQSD_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SD  \0") };
pub const MQSD_VERSION_1: MQLONG = 1;
pub const MQSD_CURRENT_VERSION: MQLONG = 1;
pub const MQSD_LENGTH_1: usize = 344;
pub const MQSD_CURRENT_LENGTH: usize = 344;
pub const MQSID_NONE: &[u8; 41] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQSIDT_NONE: u8 = 0u8;
pub const MQSIDT_NT_SECURITY_ID: u8 = 1u8;
pub const MQSIDT_WAS_SECURITY_ID: u8 = 2u8;
#[allow(unsafe_code)]
pub const MQSMPO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SMPO\0") };
pub const MQSMPO_VERSION_1: MQLONG = 1;
pub const MQSMPO_CURRENT_VERSION: MQLONG = 1;
pub const MQSMPO_LENGTH_1: usize = 20;
pub const MQSMPO_CURRENT_LENGTH: usize = 20;
pub const MQSMPO_SET_FIRST: MQLONG = 0;
pub const MQSMPO_SET_PROP_UNDER_CURSOR: MQLONG = 1;
pub const MQSMPO_SET_PROP_AFTER_CURSOR: MQLONG = 2;
pub const MQSMPO_APPEND_PROPERTY: MQLONG = 4;
pub const MQSMPO_SET_PROP_BEFORE_CURSOR: MQLONG = 8;
pub const MQSMPO_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQSRO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SRO \0") };
pub const MQSRO_VERSION_1: MQLONG = 1;
pub const MQSRO_CURRENT_VERSION: MQLONG = 1;
pub const MQSRO_LENGTH_1: usize = 16;
pub const MQSRO_CURRENT_LENGTH: usize = 16;
pub const MQSRO_NONE: MQLONG = 0;
pub const MQSRO_FAIL_IF_QUIESCING: MQLONG = 8192;
#[allow(unsafe_code)]
pub const MQSTS_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"STAT\0") };
pub const MQSTS_VERSION_1: MQLONG = 1;
pub const MQSTS_VERSION_2: MQLONG = 2;
pub const MQSTS_CURRENT_VERSION: MQLONG = 2;
pub const MQSTS_LENGTH_1: usize = 224;
pub const MQSTS_LENGTH_2: usize = 280;
pub const MQSTS_CURRENT_LENGTH: usize = 280;
#[allow(unsafe_code)]
pub const MQTM_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"TM  \0") };
pub const MQTM_VERSION_1: MQLONG = 1;
pub const MQTM_CURRENT_VERSION: MQLONG = 1;
pub const MQTM_LENGTH_1: usize = 684;
pub const MQTM_CURRENT_LENGTH: usize = 684;
#[allow(unsafe_code)]
pub const MQTMC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"TMC \0") };
pub const MQTMC2_LENGTH_1: usize = 684;
pub const MQTMC2_LENGTH_2: usize = 732;
pub const MQTMC2_CURRENT_LENGTH: usize = 732;
#[allow(unsafe_code)]
pub const MQTMC_VERSION_1: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"   1\0") };
#[allow(unsafe_code)]
pub const MQTMC_VERSION_2: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"   2\0") };
#[allow(unsafe_code)]
pub const MQTMC_CURRENT_VERSION: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"   2\0") };
#[allow(unsafe_code)]
pub const MQWIH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"WIH \0") };
pub const MQWIH_VERSION_1: MQLONG = 1;
pub const MQWIH_CURRENT_VERSION: MQLONG = 1;
pub const MQWIH_LENGTH_1: usize = 120;
pub const MQWIH_CURRENT_LENGTH: usize = 120;
pub const MQWIH_NONE: MQLONG = 0;
#[allow(unsafe_code)]
pub const MQXQH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"XQH \0") };
pub const MQXQH_VERSION_1: MQLONG = 1;
pub const MQXQH_CURRENT_VERSION: MQLONG = 1;
pub const MQXQH_LENGTH_1: usize = 428;
pub const MQXQH_CURRENT_LENGTH: usize = 428;
pub const MQHC_DEF_HCONN: MQHCONN = 0;
pub const MQHC_UNUSABLE_HCONN: MQHCONN = -1;
pub const MQHC_UNASSOCIATED_HCONN: MQHCONN = -3;
pub const MQ_OPERATOR_MESSAGE_LENGTH: usize = 4;
pub const MQ_ABEND_CODE_LENGTH: usize = 4;
pub const MQ_ACCOUNTING_TOKEN_LENGTH: usize = 32;
pub const MQ_APPL_DESC_LENGTH: usize = 64;
pub const MQ_APPL_IDENTITY_DATA_LENGTH: usize = 32;
pub const MQ_APPL_NAME_LENGTH: usize = 28;
pub const MQ_APPL_ORIGIN_DATA_LENGTH: usize = 4;
pub const MQ_APPL_TAG_LENGTH: usize = 28;
pub const MQ_ARM_SUFFIX_LENGTH: usize = 2;
pub const MQ_ATTENTION_ID_LENGTH: usize = 4;
pub const MQ_AUTH_INFO_CONN_NAME_LENGTH: usize = 264;
pub const MQ_AUTH_INFO_DESC_LENGTH: usize = 64;
pub const MQ_AUTH_INFO_NAME_LENGTH: usize = 48;
pub const MQ_AUTH_INFO_OCSP_URL_LENGTH: usize = 256;
pub const MQ_AUTHENTICATOR_LENGTH: usize = 8;
pub const MQ_AUTO_REORG_CATALOG_LENGTH: usize = 44;
pub const MQ_AUTO_REORG_TIME_LENGTH: usize = 4;
pub const MQ_BATCH_INTERFACE_ID_LENGTH: usize = 8;
pub const MQ_BRIDGE_NAME_LENGTH: usize = 24;
pub const MQ_CANCEL_CODE_LENGTH: usize = 4;
pub const MQ_CF_STRUC_DESC_LENGTH: usize = 64;
pub const MQ_CF_STRUC_NAME_LENGTH: usize = 12;
pub const MQ_CHANNEL_DATE_LENGTH: usize = 12;
pub const MQ_CHANNEL_DESC_LENGTH: usize = 64;
pub const MQ_CHANNEL_NAME_LENGTH: usize = 20;
pub const MQ_CHANNEL_TIME_LENGTH: usize = 8;
pub const MQ_CHINIT_SERVICE_PARM_LENGTH: usize = 32;
pub const MQ_CICS_FILE_NAME_LENGTH: usize = 8;
pub const MQ_AMQP_CLIENT_ID_LENGTH: usize = 256;
pub const MQ_CLIENT_ID_LENGTH: usize = 23;
pub const MQ_CLIENT_USER_ID_LENGTH: usize = 1024;
pub const MQ_CLUSTER_NAME_LENGTH: usize = 48;
pub const MQ_COMM_INFO_DESC_LENGTH: usize = 64;
pub const MQ_COMM_INFO_NAME_LENGTH: usize = 48;
pub const MQ_CONN_NAME_LENGTH: usize = 264;
pub const MQ_CONN_TAG_LENGTH: usize = 128;
pub const MQ_CONNECTION_ID_LENGTH: usize = 24;
pub const MQ_CORREL_ID_LENGTH: usize = 24;
pub const MQ_CREATION_DATE_LENGTH: usize = 12;
pub const MQ_CREATION_TIME_LENGTH: usize = 8;
pub const MQ_CSP_PASSWORD_LENGTH: usize = 256;
pub const MQ_CSP_TOKEN_LENGTH: usize = 8192;
pub const MQ_DATE_LENGTH: usize = 12;
pub const MQ_DISTINGUISHED_NAME_LENGTH: usize = 1024;
pub const MQ_DNS_GROUP_NAME_LENGTH: usize = 18;
pub const MQ_EXIT_DATA_LENGTH: usize = 32;
pub const MQ_EXIT_INFO_NAME_LENGTH: usize = 48;
pub const MQ_EXIT_NAME_LENGTH: usize = 128;
pub const MQ_EXIT_PD_AREA_LENGTH: usize = 48;
pub const MQ_EXIT_USER_AREA_LENGTH: usize = 16;
pub const MQ_FACILITY_LENGTH: usize = 8;
pub const MQ_FACILITY_LIKE_LENGTH: usize = 4;
pub const MQ_FORMAT_LENGTH: usize = 8;
pub const MQ_FUNCTION_LENGTH: usize = 4;
pub const MQ_GROUP_ID_LENGTH: usize = 24;
pub const MQ_APPL_FUNCTION_NAME_LENGTH: usize = 10;
pub const MQ_INITIAL_KEY_LENGTH: usize = 256;
pub const MQ_INSTALLATION_DESC_LENGTH: usize = 64;
pub const MQ_INSTALLATION_NAME_LENGTH: usize = 16;
pub const MQ_INSTALLATION_PATH_LENGTH: usize = 256;
pub const MQ_JAAS_CONFIG_LENGTH: usize = 1024;
pub const MQ_LDAP_PASSWORD_LENGTH: usize = 32;
pub const MQ_LDAP_BASE_DN_LENGTH: usize = 1024;
pub const MQ_LDAP_FIELD_LENGTH: usize = 128;
pub const MQ_LDAP_CLASS_LENGTH: usize = 128;
pub const MQ_LISTENER_NAME_LENGTH: usize = 48;
pub const MQ_LISTENER_DESC_LENGTH: usize = 64;
pub const MQ_LOCAL_ADDRESS_LENGTH: usize = 48;
pub const MQ_LTERM_OVERRIDE_LENGTH: usize = 8;
pub const MQ_LU_NAME_LENGTH: usize = 8;
pub const MQ_LUWID_LENGTH: usize = 16;
pub const MQ_MAX_EXIT_NAME_LENGTH: usize = 128;
pub const MQ_MAX_MCA_USER_ID_LENGTH: usize = 64;
pub const MQ_MAX_LDAP_MCA_USER_ID_LENGTH: usize = 1024;
pub const MQ_MAX_PROPERTY_NAME_LENGTH: usize = 4095;
pub const MQ_MAX_USER_ID_LENGTH: usize = 64;
pub const MQ_MCA_JOB_NAME_LENGTH: usize = 28;
pub const MQ_MCA_NAME_LENGTH: usize = 20;
pub const MQ_MCA_USER_DATA_LENGTH: usize = 32;
pub const MQ_MCA_USER_ID_LENGTH: usize = 12;
pub const MQ_LDAP_MCA_USER_ID_LENGTH: usize = 1024;
pub const MQ_MFS_MAP_NAME_LENGTH: usize = 8;
pub const MQ_MODE_NAME_LENGTH: usize = 8;
pub const MQ_MSG_HEADER_LENGTH: usize = 4000;
pub const MQ_MSG_ID_LENGTH: usize = 24;
pub const MQ_MSG_TOKEN_LENGTH: usize = 16;
pub const MQ_NAMELIST_DESC_LENGTH: usize = 64;
pub const MQ_NAMELIST_NAME_LENGTH: usize = 48;
pub const MQ_NHA_INSTANCE_NAME_LENGTH: usize = 48;
pub const MQ_OBJECT_INSTANCE_ID_LENGTH: usize = 24;
pub const MQ_OBJECT_NAME_LENGTH: usize = 48;
pub const MQ_PASS_TICKET_APPL_LENGTH: usize = 8;
pub const MQ_PASSWORD_LENGTH: usize = 12;
pub const MQ_PROCESS_APPL_ID_LENGTH: usize = 256;
pub const MQ_PROCESS_DESC_LENGTH: usize = 64;
pub const MQ_PROCESS_ENV_DATA_LENGTH: usize = 128;
pub const MQ_PROCESS_NAME_LENGTH: usize = 48;
pub const MQ_PROCESS_USER_DATA_LENGTH: usize = 128;
pub const MQ_PROGRAM_NAME_LENGTH: usize = 20;
pub const MQ_PUT_APPL_NAME_LENGTH: usize = 28;
pub const MQ_PUT_DATE_LENGTH: usize = 8;
pub const MQ_PUT_TIME_LENGTH: usize = 8;
pub const MQ_Q_DESC_LENGTH: usize = 64;
pub const MQ_Q_MGR_DESC_LENGTH: usize = 64;
pub const MQ_Q_MGR_IDENTIFIER_LENGTH: usize = 48;
pub const MQ_Q_MGR_NAME_LENGTH: usize = 48;
pub const MQ_Q_NAME_LENGTH: usize = 48;
pub const MQ_QSG_NAME_LENGTH: usize = 4;
pub const MQ_REMOTE_SYS_ID_LENGTH: usize = 4;
pub const MQ_SECURITY_ID_LENGTH: usize = 40;
pub const MQ_SELECTOR_LENGTH: usize = 10240;
pub const MQ_SERVICE_ARGS_LENGTH: usize = 255;
pub const MQ_SERVICE_COMMAND_LENGTH: usize = 255;
pub const MQ_SERVICE_DESC_LENGTH: usize = 64;
pub const MQ_SERVICE_NAME_LENGTH: usize = 32;
pub const MQ_SERVICE_PATH_LENGTH: usize = 255;
pub const MQ_SERVICE_STEP_LENGTH: usize = 8;
pub const MQ_SHORT_CONN_NAME_LENGTH: usize = 20;
pub const MQ_SHORT_DNAME_LENGTH: usize = 256;
pub const MQ_SSL_CIPHER_SPEC_LENGTH: usize = 32;
pub const MQ_SSL_CIPHER_SUITE_LENGTH: usize = 32;
pub const MQ_SSL_CRYPTO_HARDWARE_LENGTH: usize = 256;
pub const MQ_SSL_ENCRYP_KEY_REPO_PWD_LEN: usize = 1536;
pub const MQ_SSL_HANDSHAKE_STAGE_LENGTH: usize = 32;
pub const MQ_SSL_KEY_LIBRARY_LENGTH: usize = 44;
pub const MQ_SSL_KEY_MEMBER_LENGTH: usize = 8;
pub const MQ_SSL_KEY_REPOSITORY_LENGTH: usize = 256;
pub const MQ_SSL_KEY_REPO_PWD_LEN: usize = 1024;
pub const MQ_SSL_PEER_NAME_LENGTH: usize = 1024;
pub const MQ_SSL_SHORT_PEER_NAME_LENGTH: usize = 256;
pub const MQ_START_CODE_LENGTH: usize = 4;
pub const MQ_STORAGE_CLASS_DESC_LENGTH: usize = 64;
pub const MQ_STORAGE_CLASS_LENGTH: usize = 8;
pub const MQ_SUB_IDENTITY_LENGTH: usize = 128;
pub const MQ_SUB_POINT_LENGTH: usize = 128;
pub const MQ_TCP_NAME_LENGTH: usize = 8;
pub const MQ_TEMPORARY_Q_PREFIX_LENGTH: usize = 32;
pub const MQ_TIME_LENGTH: usize = 8;
pub const MQ_TOPIC_DESC_LENGTH: usize = 64;
pub const MQ_TOPIC_NAME_LENGTH: usize = 48;
pub const MQ_TOPIC_STR_LENGTH: usize = 10240;
pub const MQ_TOTAL_EXIT_DATA_LENGTH: usize = 999;
pub const MQ_TOTAL_EXIT_NAME_LENGTH: usize = 999;
pub const MQ_TP_NAME_LENGTH: usize = 64;
pub const MQ_TPIPE_NAME_LENGTH: usize = 8;
pub const MQ_TRAN_INSTANCE_ID_LENGTH: usize = 16;
pub const MQ_TRANSACTION_ID_LENGTH: usize = 4;
pub const MQ_TRIGGER_DATA_LENGTH: usize = 64;
pub const MQ_TRIGGER_PROGRAM_NAME_LENGTH: usize = 8;
pub const MQ_TRIGGER_TERM_ID_LENGTH: usize = 4;
pub const MQ_TRIGGER_TRANS_ID_LENGTH: usize = 4;
pub const MQ_USER_ID_LENGTH: usize = 12;
pub const MQ_VERSION_LENGTH: usize = 8;
pub const MQ_XCF_GROUP_NAME_LENGTH: usize = 8;
pub const MQ_XCF_MEMBER_NAME_LENGTH: usize = 16;
pub const MQ_SMDS_NAME_LENGTH: usize = 4;
pub const MQ_CHLAUTH_DESC_LENGTH: usize = 64;
pub const MQ_CUSTOM_LENGTH: usize = 128;
pub const MQ_SUITE_B_SIZE: MQLONG = 4;
pub const MQ_CERT_LABEL_LENGTH: usize = 64;
pub const MQCC_OK: MQLONG = 0;
pub const MQCC_WARNING: MQLONG = 1;
pub const MQCC_FAILED: MQLONG = 2;
pub const MQCC_UNKNOWN: MQLONG = -1;
pub const MQRC_NONE: MQLONG = 0;
pub const MQRC_APPL_FIRST: MQLONG = 900;
pub const MQRC_APPL_LAST: MQLONG = 999;
pub const MQRC_ALIAS_BASE_Q_TYPE_ERROR: MQLONG = 2001;
pub const MQRC_ALREADY_CONNECTED: MQLONG = 2002;
pub const MQRC_BACKED_OUT: MQLONG = 2003;
pub const MQRC_BUFFER_ERROR: MQLONG = 2004;
pub const MQRC_BUFFER_LENGTH_ERROR: MQLONG = 2005;
pub const MQRC_CHAR_ATTR_LENGTH_ERROR: MQLONG = 2006;
pub const MQRC_CHAR_ATTRS_ERROR: MQLONG = 2007;
pub const MQRC_CHAR_ATTRS_TOO_SHORT: MQLONG = 2008;
pub const MQRC_CONNECTION_BROKEN: MQLONG = 2009;
pub const MQRC_DATA_LENGTH_ERROR: MQLONG = 2010;
pub const MQRC_DYNAMIC_Q_NAME_ERROR: MQLONG = 2011;
pub const MQRC_ENVIRONMENT_ERROR: MQLONG = 2012;
pub const MQRC_EXPIRY_ERROR: MQLONG = 2013;
pub const MQRC_FEEDBACK_ERROR: MQLONG = 2014;
pub const MQRC_GET_INHIBITED: MQLONG = 2016;
pub const MQRC_HANDLE_NOT_AVAILABLE: MQLONG = 2017;
pub const MQRC_HCONN_ERROR: MQLONG = 2018;
pub const MQRC_HOBJ_ERROR: MQLONG = 2019;
pub const MQRC_INHIBIT_VALUE_ERROR: MQLONG = 2020;
pub const MQRC_INT_ATTR_COUNT_ERROR: MQLONG = 2021;
pub const MQRC_INT_ATTR_COUNT_TOO_SMALL: MQLONG = 2022;
pub const MQRC_INT_ATTRS_ARRAY_ERROR: MQLONG = 2023;
pub const MQRC_SYNCPOINT_LIMIT_REACHED: MQLONG = 2024;
pub const MQRC_MAX_CONNS_LIMIT_REACHED: MQLONG = 2025;
pub const MQRC_MD_ERROR: MQLONG = 2026;
pub const MQRC_MISSING_REPLY_TO_Q: MQLONG = 2027;
pub const MQRC_MSG_TYPE_ERROR: MQLONG = 2029;
pub const MQRC_MSG_TOO_BIG_FOR_Q: MQLONG = 2030;
pub const MQRC_MSG_TOO_BIG_FOR_Q_MGR: MQLONG = 2031;
pub const MQRC_NO_MSG_AVAILABLE: MQLONG = 2033;
pub const MQRC_NO_MSG_UNDER_CURSOR: MQLONG = 2034;
pub const MQRC_NOT_AUTHORIZED: MQLONG = 2035;
pub const MQRC_NOT_OPEN_FOR_BROWSE: MQLONG = 2036;
pub const MQRC_NOT_OPEN_FOR_INPUT: MQLONG = 2037;
pub const MQRC_NOT_OPEN_FOR_INQUIRE: MQLONG = 2038;
pub const MQRC_NOT_OPEN_FOR_OUTPUT: MQLONG = 2039;
pub const MQRC_NOT_OPEN_FOR_SET: MQLONG = 2040;
pub const MQRC_OBJECT_CHANGED: MQLONG = 2041;
pub const MQRC_OBJECT_IN_USE: MQLONG = 2042;
pub const MQRC_OBJECT_TYPE_ERROR: MQLONG = 2043;
pub const MQRC_OD_ERROR: MQLONG = 2044;
pub const MQRC_OPTION_NOT_VALID_FOR_TYPE: MQLONG = 2045;
pub const MQRC_OPTIONS_ERROR: MQLONG = 2046;
pub const MQRC_PERSISTENCE_ERROR: MQLONG = 2047;
pub const MQRC_PERSISTENT_NOT_ALLOWED: MQLONG = 2048;
pub const MQRC_PRIORITY_EXCEEDS_MAXIMUM: MQLONG = 2049;
pub const MQRC_PRIORITY_ERROR: MQLONG = 2050;
pub const MQRC_PUT_INHIBITED: MQLONG = 2051;
pub const MQRC_Q_DELETED: MQLONG = 2052;
pub const MQRC_Q_FULL: MQLONG = 2053;
pub const MQRC_Q_NOT_EMPTY: MQLONG = 2055;
pub const MQRC_Q_SPACE_NOT_AVAILABLE: MQLONG = 2056;
pub const MQRC_Q_TYPE_ERROR: MQLONG = 2057;
pub const MQRC_Q_MGR_NAME_ERROR: MQLONG = 2058;
pub const MQRC_Q_MGR_NOT_AVAILABLE: MQLONG = 2059;
pub const MQRC_REPORT_OPTIONS_ERROR: MQLONG = 2061;
pub const MQRC_SECOND_MARK_NOT_ALLOWED: MQLONG = 2062;
pub const MQRC_SECURITY_ERROR: MQLONG = 2063;
pub const MQRC_TOKEN_TIMESTAMP_NOT_VALID: MQLONG = 2064;
pub const MQRC_SELECTOR_COUNT_ERROR: MQLONG = 2065;
pub const MQRC_SELECTOR_LIMIT_EXCEEDED: MQLONG = 2066;
pub const MQRC_SELECTOR_ERROR: MQLONG = 2067;
pub const MQRC_SELECTOR_NOT_FOR_TYPE: MQLONG = 2068;
pub const MQRC_SIGNAL_OUTSTANDING: MQLONG = 2069;
pub const MQRC_SIGNAL_REQUEST_ACCEPTED: MQLONG = 2070;
pub const MQRC_STORAGE_NOT_AVAILABLE: MQLONG = 2071;
pub const MQRC_SYNCPOINT_NOT_AVAILABLE: MQLONG = 2072;
pub const MQRC_TRIGGER_CONTROL_ERROR: MQLONG = 2075;
pub const MQRC_TRIGGER_DEPTH_ERROR: MQLONG = 2076;
pub const MQRC_TRIGGER_MSG_PRIORITY_ERR: MQLONG = 2077;
pub const MQRC_TRIGGER_TYPE_ERROR: MQLONG = 2078;
pub const MQRC_TRUNCATED_MSG_ACCEPTED: MQLONG = 2079;
pub const MQRC_TRUNCATED_MSG_FAILED: MQLONG = 2080;
pub const MQRC_UNKNOWN_ALIAS_BASE_Q: MQLONG = 2082;
pub const MQRC_UNKNOWN_OBJECT_NAME: MQLONG = 2085;
pub const MQRC_UNKNOWN_OBJECT_Q_MGR: MQLONG = 2086;
pub const MQRC_UNKNOWN_REMOTE_Q_MGR: MQLONG = 2087;
pub const MQRC_WAIT_INTERVAL_ERROR: MQLONG = 2090;
pub const MQRC_XMIT_Q_TYPE_ERROR: MQLONG = 2091;
pub const MQRC_XMIT_Q_USAGE_ERROR: MQLONG = 2092;
pub const MQRC_NOT_OPEN_FOR_PASS_ALL: MQLONG = 2093;
pub const MQRC_NOT_OPEN_FOR_PASS_IDENT: MQLONG = 2094;
pub const MQRC_NOT_OPEN_FOR_SET_ALL: MQLONG = 2095;
pub const MQRC_NOT_OPEN_FOR_SET_IDENT: MQLONG = 2096;
pub const MQRC_CONTEXT_HANDLE_ERROR: MQLONG = 2097;
pub const MQRC_CONTEXT_NOT_AVAILABLE: MQLONG = 2098;
pub const MQRC_SIGNAL1_ERROR: MQLONG = 2099;
pub const MQRC_OBJECT_ALREADY_EXISTS: MQLONG = 2100;
pub const MQRC_OBJECT_DAMAGED: MQLONG = 2101;
pub const MQRC_RESOURCE_PROBLEM: MQLONG = 2102;
pub const MQRC_ANOTHER_Q_MGR_CONNECTED: MQLONG = 2103;
pub const MQRC_UNKNOWN_REPORT_OPTION: MQLONG = 2104;
pub const MQRC_STORAGE_CLASS_ERROR: MQLONG = 2105;
pub const MQRC_COD_NOT_VALID_FOR_XCF_Q: MQLONG = 2106;
pub const MQRC_XWAIT_CANCELED: MQLONG = 2107;
pub const MQRC_XWAIT_ERROR: MQLONG = 2108;
pub const MQRC_SUPPRESSED_BY_EXIT: MQLONG = 2109;
pub const MQRC_FORMAT_ERROR: MQLONG = 2110;
pub const MQRC_SOURCE_CCSID_ERROR: MQLONG = 2111;
pub const MQRC_SOURCE_INTEGER_ENC_ERROR: MQLONG = 2112;
pub const MQRC_SOURCE_DECIMAL_ENC_ERROR: MQLONG = 2113;
pub const MQRC_SOURCE_FLOAT_ENC_ERROR: MQLONG = 2114;
pub const MQRC_TARGET_CCSID_ERROR: MQLONG = 2115;
pub const MQRC_TARGET_INTEGER_ENC_ERROR: MQLONG = 2116;
pub const MQRC_TARGET_DECIMAL_ENC_ERROR: MQLONG = 2117;
pub const MQRC_TARGET_FLOAT_ENC_ERROR: MQLONG = 2118;
pub const MQRC_NOT_CONVERTED: MQLONG = 2119;
pub const MQRC_CONVERTED_MSG_TOO_BIG: MQLONG = 2120;
pub const MQRC_TRUNCATED: MQLONG = 2120;
pub const MQRC_NO_EXTERNAL_PARTICIPANTS: MQLONG = 2121;
pub const MQRC_PARTICIPANT_NOT_AVAILABLE: MQLONG = 2122;
pub const MQRC_OUTCOME_MIXED: MQLONG = 2123;
pub const MQRC_OUTCOME_PENDING: MQLONG = 2124;
pub const MQRC_BRIDGE_STARTED: MQLONG = 2125;
pub const MQRC_BRIDGE_STOPPED: MQLONG = 2126;
pub const MQRC_ADAPTER_STORAGE_SHORTAGE: MQLONG = 2127;
pub const MQRC_UOW_IN_PROGRESS: MQLONG = 2128;
pub const MQRC_ADAPTER_CONN_LOAD_ERROR: MQLONG = 2129;
pub const MQRC_ADAPTER_SERV_LOAD_ERROR: MQLONG = 2130;
pub const MQRC_ADAPTER_DEFS_ERROR: MQLONG = 2131;
pub const MQRC_ADAPTER_DEFS_LOAD_ERROR: MQLONG = 2132;
pub const MQRC_ADAPTER_CONV_LOAD_ERROR: MQLONG = 2133;
pub const MQRC_BO_ERROR: MQLONG = 2134;
pub const MQRC_DH_ERROR: MQLONG = 2135;
pub const MQRC_MULTIPLE_REASONS: MQLONG = 2136;
pub const MQRC_OPEN_FAILED: MQLONG = 2137;
pub const MQRC_ADAPTER_DISC_LOAD_ERROR: MQLONG = 2138;
pub const MQRC_CNO_ERROR: MQLONG = 2139;
pub const MQRC_CICS_WAIT_FAILED: MQLONG = 2140;
pub const MQRC_DLH_ERROR: MQLONG = 2141;
pub const MQRC_HEADER_ERROR: MQLONG = 2142;
pub const MQRC_SOURCE_LENGTH_ERROR: MQLONG = 2143;
pub const MQRC_TARGET_LENGTH_ERROR: MQLONG = 2144;
pub const MQRC_SOURCE_BUFFER_ERROR: MQLONG = 2145;
pub const MQRC_TARGET_BUFFER_ERROR: MQLONG = 2146;
pub const MQRC_INCOMPLETE_TRANSACTION: MQLONG = 2147;
pub const MQRC_IIH_ERROR: MQLONG = 2148;
pub const MQRC_PCF_ERROR: MQLONG = 2149;
pub const MQRC_DBCS_ERROR: MQLONG = 2150;
pub const MQRC_OBJECT_NAME_ERROR: MQLONG = 2152;
pub const MQRC_OBJECT_Q_MGR_NAME_ERROR: MQLONG = 2153;
pub const MQRC_RECS_PRESENT_ERROR: MQLONG = 2154;
pub const MQRC_OBJECT_RECORDS_ERROR: MQLONG = 2155;
pub const MQRC_RESPONSE_RECORDS_ERROR: MQLONG = 2156;
pub const MQRC_ASID_MISMATCH: MQLONG = 2157;
pub const MQRC_PMO_RECORD_FLAGS_ERROR: MQLONG = 2158;
pub const MQRC_PUT_MSG_RECORDS_ERROR: MQLONG = 2159;
pub const MQRC_CONN_ID_IN_USE: MQLONG = 2160;
pub const MQRC_Q_MGR_QUIESCING: MQLONG = 2161;
pub const MQRC_Q_MGR_STOPPING: MQLONG = 2162;
pub const MQRC_DUPLICATE_RECOV_COORD: MQLONG = 2163;
pub const MQRC_PMO_ERROR: MQLONG = 2173;
pub const MQRC_API_EXIT_NOT_FOUND: MQLONG = 2182;
pub const MQRC_API_EXIT_LOAD_ERROR: MQLONG = 2183;
pub const MQRC_REMOTE_Q_NAME_ERROR: MQLONG = 2184;
pub const MQRC_INCONSISTENT_PERSISTENCE: MQLONG = 2185;
pub const MQRC_GMO_ERROR: MQLONG = 2186;
pub const MQRC_CICS_BRIDGE_RESTRICTION: MQLONG = 2187;
pub const MQRC_STOPPED_BY_CLUSTER_EXIT: MQLONG = 2188;
pub const MQRC_CLUSTER_RESOLUTION_ERROR: MQLONG = 2189;
pub const MQRC_CONVERTED_STRING_TOO_BIG: MQLONG = 2190;
pub const MQRC_TMC_ERROR: MQLONG = 2191;
pub const MQRC_STORAGE_MEDIUM_FULL: MQLONG = 2192;
pub const MQRC_PAGESET_FULL: MQLONG = 2192;
pub const MQRC_PAGESET_ERROR: MQLONG = 2193;
pub const MQRC_NAME_NOT_VALID_FOR_TYPE: MQLONG = 2194;
pub const MQRC_UNEXPECTED_ERROR: MQLONG = 2195;
pub const MQRC_UNKNOWN_XMIT_Q: MQLONG = 2196;
pub const MQRC_UNKNOWN_DEF_XMIT_Q: MQLONG = 2197;
pub const MQRC_DEF_XMIT_Q_TYPE_ERROR: MQLONG = 2198;
pub const MQRC_DEF_XMIT_Q_USAGE_ERROR: MQLONG = 2199;
pub const MQRC_MSG_MARKED_BROWSE_CO_OP: MQLONG = 2200;
pub const MQRC_NAME_IN_USE: MQLONG = 2201;
pub const MQRC_CONNECTION_QUIESCING: MQLONG = 2202;
pub const MQRC_CONNECTION_STOPPING: MQLONG = 2203;
pub const MQRC_ADAPTER_NOT_AVAILABLE: MQLONG = 2204;
pub const MQRC_MSG_ID_ERROR: MQLONG = 2206;
pub const MQRC_CORREL_ID_ERROR: MQLONG = 2207;
pub const MQRC_FILE_SYSTEM_ERROR: MQLONG = 2208;
pub const MQRC_NO_MSG_LOCKED: MQLONG = 2209;
pub const MQRC_SOAP_DOTNET_ERROR: MQLONG = 2210;
pub const MQRC_SOAP_AXIS_ERROR: MQLONG = 2211;
pub const MQRC_SOAP_URL_ERROR: MQLONG = 2212;
pub const MQRC_FILE_NOT_AUDITED: MQLONG = 2216;
pub const MQRC_CONNECTION_NOT_AUTHORIZED: MQLONG = 2217;
pub const MQRC_MSG_TOO_BIG_FOR_CHANNEL: MQLONG = 2218;
pub const MQRC_CALL_IN_PROGRESS: MQLONG = 2219;
pub const MQRC_RMH_ERROR: MQLONG = 2220;
pub const MQRC_Q_MGR_ACTIVE: MQLONG = 2222;
pub const MQRC_Q_MGR_NOT_ACTIVE: MQLONG = 2223;
pub const MQRC_Q_DEPTH_HIGH: MQLONG = 2224;
pub const MQRC_Q_DEPTH_LOW: MQLONG = 2225;
pub const MQRC_Q_SERVICE_INTERVAL_HIGH: MQLONG = 2226;
pub const MQRC_Q_SERVICE_INTERVAL_OK: MQLONG = 2227;
pub const MQRC_RFH_HEADER_FIELD_ERROR: MQLONG = 2228;
pub const MQRC_RAS_PROPERTY_ERROR: MQLONG = 2229;
pub const MQRC_UNIT_OF_WORK_NOT_STARTED: MQLONG = 2232;
pub const MQRC_CHANNEL_AUTO_DEF_OK: MQLONG = 2233;
pub const MQRC_CHANNEL_AUTO_DEF_ERROR: MQLONG = 2234;
pub const MQRC_CFH_ERROR: MQLONG = 2235;
pub const MQRC_CFIL_ERROR: MQLONG = 2236;
pub const MQRC_CFIN_ERROR: MQLONG = 2237;
pub const MQRC_CFSL_ERROR: MQLONG = 2238;
pub const MQRC_CFST_ERROR: MQLONG = 2239;
pub const MQRC_INCOMPLETE_GROUP: MQLONG = 2241;
pub const MQRC_INCOMPLETE_MSG: MQLONG = 2242;
pub const MQRC_INCONSISTENT_CCSIDS: MQLONG = 2243;
pub const MQRC_INCONSISTENT_ENCODINGS: MQLONG = 2244;
pub const MQRC_INCONSISTENT_UOW: MQLONG = 2245;
pub const MQRC_INVALID_MSG_UNDER_CURSOR: MQLONG = 2246;
pub const MQRC_MATCH_OPTIONS_ERROR: MQLONG = 2247;
pub const MQRC_MDE_ERROR: MQLONG = 2248;
pub const MQRC_MSG_FLAGS_ERROR: MQLONG = 2249;
pub const MQRC_MSG_SEQ_NUMBER_ERROR: MQLONG = 2250;
pub const MQRC_OFFSET_ERROR: MQLONG = 2251;
pub const MQRC_ORIGINAL_LENGTH_ERROR: MQLONG = 2252;
pub const MQRC_SEGMENT_LENGTH_ZERO: usize = 2253;
pub const MQRC_UOW_NOT_AVAILABLE: MQLONG = 2255;
pub const MQRC_WRONG_GMO_VERSION: MQLONG = 2256;
pub const MQRC_WRONG_MD_VERSION: MQLONG = 2257;
pub const MQRC_GROUP_ID_ERROR: MQLONG = 2258;
pub const MQRC_INCONSISTENT_BROWSE: MQLONG = 2259;
pub const MQRC_XQH_ERROR: MQLONG = 2260;
pub const MQRC_SRC_ENV_ERROR: MQLONG = 2261;
pub const MQRC_SRC_NAME_ERROR: MQLONG = 2262;
pub const MQRC_DEST_ENV_ERROR: MQLONG = 2263;
pub const MQRC_DEST_NAME_ERROR: MQLONG = 2264;
pub const MQRC_TM_ERROR: MQLONG = 2265;
pub const MQRC_CLUSTER_EXIT_ERROR: MQLONG = 2266;
pub const MQRC_CLUSTER_EXIT_LOAD_ERROR: MQLONG = 2267;
pub const MQRC_CLUSTER_PUT_INHIBITED: MQLONG = 2268;
pub const MQRC_CLUSTER_RESOURCE_ERROR: MQLONG = 2269;
pub const MQRC_NO_DESTINATIONS_AVAILABLE: MQLONG = 2270;
pub const MQRC_CONN_TAG_IN_USE: MQLONG = 2271;
pub const MQRC_PARTIALLY_CONVERTED: MQLONG = 2272;
pub const MQRC_CONNECTION_ERROR: MQLONG = 2273;
pub const MQRC_OPTION_ENVIRONMENT_ERROR: MQLONG = 2274;
pub const MQRC_CD_ERROR: MQLONG = 2277;
pub const MQRC_CLIENT_CONN_ERROR: MQLONG = 2278;
pub const MQRC_CHANNEL_STOPPED_BY_USER: MQLONG = 2279;
pub const MQRC_HCONFIG_ERROR: MQLONG = 2280;
pub const MQRC_FUNCTION_ERROR: MQLONG = 2281;
pub const MQRC_CHANNEL_STARTED: MQLONG = 2282;
pub const MQRC_CHANNEL_STOPPED: MQLONG = 2283;
pub const MQRC_CHANNEL_CONV_ERROR: MQLONG = 2284;
pub const MQRC_SERVICE_NOT_AVAILABLE: MQLONG = 2285;
pub const MQRC_INITIALIZATION_FAILED: MQLONG = 2286;
pub const MQRC_TERMINATION_FAILED: MQLONG = 2287;
pub const MQRC_UNKNOWN_Q_NAME: MQLONG = 2288;
pub const MQRC_SERVICE_ERROR: MQLONG = 2289;
pub const MQRC_Q_ALREADY_EXISTS: MQLONG = 2290;
pub const MQRC_USER_ID_NOT_AVAILABLE: MQLONG = 2291;
pub const MQRC_UNKNOWN_ENTITY: MQLONG = 2292;
pub const MQRC_UNKNOWN_AUTH_ENTITY: MQLONG = 2293;
pub const MQRC_UNKNOWN_REF_OBJECT: MQLONG = 2294;
pub const MQRC_CHANNEL_ACTIVATED: MQLONG = 2295;
pub const MQRC_CHANNEL_NOT_ACTIVATED: MQLONG = 2296;
pub const MQRC_UOW_CANCELED: MQLONG = 2297;
pub const MQRC_FUNCTION_NOT_SUPPORTED: MQLONG = 2298;
pub const MQRC_SELECTOR_TYPE_ERROR: MQLONG = 2299;
pub const MQRC_COMMAND_TYPE_ERROR: MQLONG = 2300;
pub const MQRC_MULTIPLE_INSTANCE_ERROR: MQLONG = 2301;
pub const MQRC_SYSTEM_ITEM_NOT_ALTERABLE: MQLONG = 2302;
pub const MQRC_BAG_CONVERSION_ERROR: MQLONG = 2303;
pub const MQRC_SELECTOR_OUT_OF_RANGE: MQLONG = 2304;
pub const MQRC_SELECTOR_NOT_UNIQUE: MQLONG = 2305;
pub const MQRC_INDEX_NOT_PRESENT: MQLONG = 2306;
pub const MQRC_STRING_ERROR: MQLONG = 2307;
pub const MQRC_ENCODING_NOT_SUPPORTED: MQLONG = 2308;
pub const MQRC_SELECTOR_NOT_PRESENT: MQLONG = 2309;
pub const MQRC_OUT_SELECTOR_ERROR: MQLONG = 2310;
pub const MQRC_STRING_TRUNCATED: MQLONG = 2311;
pub const MQRC_SELECTOR_WRONG_TYPE: MQLONG = 2312;
pub const MQRC_INCONSISTENT_ITEM_TYPE: MQLONG = 2313;
pub const MQRC_INDEX_ERROR: MQLONG = 2314;
pub const MQRC_SYSTEM_BAG_NOT_ALTERABLE: MQLONG = 2315;
pub const MQRC_ITEM_COUNT_ERROR: MQLONG = 2316;
pub const MQRC_FORMAT_NOT_SUPPORTED: MQLONG = 2317;
pub const MQRC_SELECTOR_NOT_SUPPORTED: MQLONG = 2318;
pub const MQRC_ITEM_VALUE_ERROR: MQLONG = 2319;
pub const MQRC_HBAG_ERROR: MQLONG = 2320;
pub const MQRC_PARAMETER_MISSING: MQLONG = 2321;
pub const MQRC_CMD_SERVER_NOT_AVAILABLE: MQLONG = 2322;
pub const MQRC_STRING_LENGTH_ERROR: MQLONG = 2323;
pub const MQRC_INQUIRY_COMMAND_ERROR: MQLONG = 2324;
pub const MQRC_NESTED_BAG_NOT_SUPPORTED: MQLONG = 2325;
pub const MQRC_BAG_WRONG_TYPE: MQLONG = 2326;
pub const MQRC_ITEM_TYPE_ERROR: MQLONG = 2327;
pub const MQRC_SYSTEM_BAG_NOT_DELETABLE: MQLONG = 2328;
pub const MQRC_SYSTEM_ITEM_NOT_DELETABLE: MQLONG = 2329;
pub const MQRC_CODED_CHAR_SET_ID_ERROR: MQLONG = 2330;
pub const MQRC_MSG_TOKEN_ERROR: MQLONG = 2331;
pub const MQRC_MISSING_WIH: MQLONG = 2332;
pub const MQRC_WIH_ERROR: MQLONG = 2333;
pub const MQRC_RFH_ERROR: MQLONG = 2334;
pub const MQRC_RFH_STRING_ERROR: MQLONG = 2335;
pub const MQRC_RFH_COMMAND_ERROR: MQLONG = 2336;
pub const MQRC_RFH_PARM_ERROR: MQLONG = 2337;
pub const MQRC_RFH_DUPLICATE_PARM: MQLONG = 2338;
pub const MQRC_RFH_PARM_MISSING: MQLONG = 2339;
pub const MQRC_CHAR_CONVERSION_ERROR: MQLONG = 2340;
pub const MQRC_UCS2_CONVERSION_ERROR: MQLONG = 2341;
pub const MQRC_DB2_NOT_AVAILABLE: MQLONG = 2342;
pub const MQRC_OBJECT_NOT_UNIQUE: MQLONG = 2343;
pub const MQRC_CONN_TAG_NOT_RELEASED: MQLONG = 2344;
pub const MQRC_CF_NOT_AVAILABLE: MQLONG = 2345;
pub const MQRC_CF_STRUC_IN_USE: MQLONG = 2346;
pub const MQRC_CF_STRUC_LIST_HDR_IN_USE: MQLONG = 2347;
pub const MQRC_CF_STRUC_AUTH_FAILED: MQLONG = 2348;
pub const MQRC_CF_STRUC_ERROR: MQLONG = 2349;
pub const MQRC_CONN_TAG_NOT_USABLE: MQLONG = 2350;
pub const MQRC_GLOBAL_UOW_CONFLICT: MQLONG = 2351;
pub const MQRC_LOCAL_UOW_CONFLICT: MQLONG = 2352;
pub const MQRC_HANDLE_IN_USE_FOR_UOW: MQLONG = 2353;
pub const MQRC_UOW_ENLISTMENT_ERROR: MQLONG = 2354;
pub const MQRC_UOW_MIX_NOT_SUPPORTED: MQLONG = 2355;
pub const MQRC_WXP_ERROR: MQLONG = 2356;
pub const MQRC_CURRENT_RECORD_ERROR: MQLONG = 2357;
pub const MQRC_NEXT_OFFSET_ERROR: MQLONG = 2358;
pub const MQRC_NO_RECORD_AVAILABLE: MQLONG = 2359;
pub const MQRC_OBJECT_LEVEL_INCOMPATIBLE: MQLONG = 2360;
pub const MQRC_NEXT_RECORD_ERROR: MQLONG = 2361;
pub const MQRC_BACKOUT_THRESHOLD_REACHED: MQLONG = 2362;
pub const MQRC_MSG_NOT_MATCHED: MQLONG = 2363;
pub const MQRC_JMS_FORMAT_ERROR: MQLONG = 2364;
pub const MQRC_SEGMENTS_NOT_SUPPORTED: MQLONG = 2365;
pub const MQRC_WRONG_CF_LEVEL: MQLONG = 2366;
pub const MQRC_CONFIG_CREATE_OBJECT: MQLONG = 2367;
pub const MQRC_CONFIG_CHANGE_OBJECT: MQLONG = 2368;
pub const MQRC_CONFIG_DELETE_OBJECT: MQLONG = 2369;
pub const MQRC_CONFIG_REFRESH_OBJECT: MQLONG = 2370;
pub const MQRC_CHANNEL_SSL_ERROR: MQLONG = 2371;
pub const MQRC_PARTICIPANT_NOT_DEFINED: MQLONG = 2372;
pub const MQRC_CF_STRUC_FAILED: MQLONG = 2373;
pub const MQRC_API_EXIT_ERROR: MQLONG = 2374;
pub const MQRC_API_EXIT_INIT_ERROR: MQLONG = 2375;
pub const MQRC_API_EXIT_TERM_ERROR: MQLONG = 2376;
pub const MQRC_EXIT_REASON_ERROR: MQLONG = 2377;
pub const MQRC_RESERVED_VALUE_ERROR: MQLONG = 2378;
pub const MQRC_NO_DATA_AVAILABLE: MQLONG = 2379;
pub const MQRC_SCO_ERROR: MQLONG = 2380;
pub const MQRC_KEY_REPOSITORY_ERROR: MQLONG = 2381;
pub const MQRC_CRYPTO_HARDWARE_ERROR: MQLONG = 2382;
pub const MQRC_AUTH_INFO_REC_COUNT_ERROR: MQLONG = 2383;
pub const MQRC_AUTH_INFO_REC_ERROR: MQLONG = 2384;
pub const MQRC_AIR_ERROR: MQLONG = 2385;
pub const MQRC_AUTH_INFO_TYPE_ERROR: MQLONG = 2386;
pub const MQRC_AUTH_INFO_CONN_NAME_ERROR: MQLONG = 2387;
pub const MQRC_LDAP_USER_NAME_ERROR: MQLONG = 2388;
pub const MQRC_LDAP_USER_NAME_LENGTH_ERR: usize = 2389;
pub const MQRC_LDAP_PASSWORD_ERROR: MQLONG = 2390;
pub const MQRC_SSL_ALREADY_INITIALIZED: MQLONG = 2391;
pub const MQRC_SSL_CONFIG_ERROR: MQLONG = 2392;
pub const MQRC_SSL_INITIALIZATION_ERROR: MQLONG = 2393;
pub const MQRC_Q_INDEX_TYPE_ERROR: MQLONG = 2394;
pub const MQRC_CFBS_ERROR: MQLONG = 2395;
pub const MQRC_SSL_NOT_ALLOWED: MQLONG = 2396;
pub const MQRC_JSSE_ERROR: MQLONG = 2397;
pub const MQRC_SSL_PEER_NAME_MISMATCH: MQLONG = 2398;
pub const MQRC_SSL_PEER_NAME_ERROR: MQLONG = 2399;
pub const MQRC_UNSUPPORTED_CIPHER_SUITE: MQLONG = 2400;
pub const MQRC_SSL_CERTIFICATE_REVOKED: MQLONG = 2401;
pub const MQRC_SSL_CERT_STORE_ERROR: MQLONG = 2402;
pub const MQRC_CLIENT_EXIT_LOAD_ERROR: MQLONG = 2406;
pub const MQRC_CLIENT_EXIT_ERROR: MQLONG = 2407;
pub const MQRC_UOW_COMMITTED: MQLONG = 2408;
pub const MQRC_SSL_KEY_RESET_ERROR: MQLONG = 2409;
pub const MQRC_UNKNOWN_COMPONENT_NAME: MQLONG = 2410;
pub const MQRC_LOGGER_STATUS: MQLONG = 2411;
pub const MQRC_COMMAND_MQSC: MQLONG = 2412;
pub const MQRC_COMMAND_PCF: MQLONG = 2413;
pub const MQRC_CFIF_ERROR: MQLONG = 2414;
pub const MQRC_CFSF_ERROR: MQLONG = 2415;
pub const MQRC_CFGR_ERROR: MQLONG = 2416;
pub const MQRC_MSG_NOT_ALLOWED_IN_GROUP: MQLONG = 2417;
pub const MQRC_FILTER_OPERATOR_ERROR: MQLONG = 2418;
pub const MQRC_NESTED_SELECTOR_ERROR: MQLONG = 2419;
pub const MQRC_EPH_ERROR: MQLONG = 2420;
pub const MQRC_RFH_FORMAT_ERROR: MQLONG = 2421;
pub const MQRC_CFBF_ERROR: MQLONG = 2422;
pub const MQRC_CLIENT_CHANNEL_CONFLICT: MQLONG = 2423;
pub const MQRC_SD_ERROR: MQLONG = 2424;
pub const MQRC_TOPIC_STRING_ERROR: MQLONG = 2425;
pub const MQRC_STS_ERROR: MQLONG = 2426;
pub const MQRC_NO_SUBSCRIPTION: MQLONG = 2428;
pub const MQRC_SUBSCRIPTION_IN_USE: MQLONG = 2429;
pub const MQRC_STAT_TYPE_ERROR: MQLONG = 2430;
pub const MQRC_SUB_USER_DATA_ERROR: MQLONG = 2431;
pub const MQRC_SUB_ALREADY_EXISTS: MQLONG = 2432;
pub const MQRC_IDENTITY_MISMATCH: MQLONG = 2434;
pub const MQRC_ALTER_SUB_ERROR: MQLONG = 2435;
pub const MQRC_DURABILITY_NOT_ALLOWED: MQLONG = 2436;
pub const MQRC_NO_RETAINED_MSG: MQLONG = 2437;
pub const MQRC_SRO_ERROR: MQLONG = 2438;
pub const MQRC_SUB_NAME_ERROR: MQLONG = 2440;
pub const MQRC_OBJECT_STRING_ERROR: MQLONG = 2441;
pub const MQRC_PROPERTY_NAME_ERROR: MQLONG = 2442;
pub const MQRC_SEGMENTATION_NOT_ALLOWED: MQLONG = 2443;
pub const MQRC_CBD_ERROR: MQLONG = 2444;
pub const MQRC_CTLO_ERROR: MQLONG = 2445;
pub const MQRC_NO_CALLBACKS_ACTIVE: MQLONG = 2446;
pub const MQRC_CALLBACK_NOT_REGISTERED: MQLONG = 2448;
pub const MQRC_OPTIONS_CHANGED: MQLONG = 2457;
pub const MQRC_READ_AHEAD_MSGS: MQLONG = 2458;
pub const MQRC_SELECTOR_SYNTAX_ERROR: MQLONG = 2459;
pub const MQRC_HMSG_ERROR: MQLONG = 2460;
pub const MQRC_CMHO_ERROR: MQLONG = 2461;
pub const MQRC_DMHO_ERROR: MQLONG = 2462;
pub const MQRC_SMPO_ERROR: MQLONG = 2463;
pub const MQRC_IMPO_ERROR: MQLONG = 2464;
pub const MQRC_PROPERTY_NAME_TOO_BIG: MQLONG = 2465;
pub const MQRC_PROP_VALUE_NOT_CONVERTED: MQLONG = 2466;
pub const MQRC_PROP_TYPE_NOT_SUPPORTED: MQLONG = 2467;
pub const MQRC_PROPERTY_VALUE_TOO_BIG: MQLONG = 2469;
pub const MQRC_PROP_CONV_NOT_SUPPORTED: MQLONG = 2470;
pub const MQRC_PROPERTY_NOT_AVAILABLE: MQLONG = 2471;
pub const MQRC_PROP_NUMBER_FORMAT_ERROR: MQLONG = 2472;
pub const MQRC_PROPERTY_TYPE_ERROR: MQLONG = 2473;
pub const MQRC_PROPERTIES_TOO_BIG: MQLONG = 2478;
pub const MQRC_PUT_NOT_RETAINED: MQLONG = 2479;
pub const MQRC_ALIAS_TARGTYPE_CHANGED: MQLONG = 2480;
pub const MQRC_DMPO_ERROR: MQLONG = 2481;
pub const MQRC_PD_ERROR: MQLONG = 2482;
pub const MQRC_CALLBACK_TYPE_ERROR: MQLONG = 2483;
pub const MQRC_CBD_OPTIONS_ERROR: MQLONG = 2484;
pub const MQRC_MAX_MSG_LENGTH_ERROR: MQLONG = 2485;
pub const MQRC_CALLBACK_ROUTINE_ERROR: MQLONG = 2486;
pub const MQRC_CALLBACK_LINK_ERROR: MQLONG = 2487;
pub const MQRC_OPERATION_ERROR: MQLONG = 2488;
pub const MQRC_BMHO_ERROR: MQLONG = 2489;
pub const MQRC_UNSUPPORTED_PROPERTY: MQLONG = 2490;
pub const MQRC_MSG_LENGTH_ERROR: MQLONG = 2491;
pub const MQRC_PROP_NAME_NOT_CONVERTED: MQLONG = 2492;
pub const MQRC_GET_ENABLED: MQLONG = 2494;
pub const MQRC_MODULE_NOT_FOUND: MQLONG = 2495;
pub const MQRC_MODULE_INVALID: MQLONG = 2496;
pub const MQRC_MODULE_ENTRY_NOT_FOUND: MQLONG = 2497;
pub const MQRC_MIXED_CONTENT_NOT_ALLOWED: MQLONG = 2498;
pub const MQRC_MSG_HANDLE_IN_USE: MQLONG = 2499;
pub const MQRC_HCONN_ASYNC_ACTIVE: MQLONG = 2500;
pub const MQRC_MHBO_ERROR: MQLONG = 2501;
pub const MQRC_PUBLICATION_FAILURE: MQLONG = 2502;
pub const MQRC_SUB_INHIBITED: MQLONG = 2503;
pub const MQRC_SELECTOR_ALWAYS_FALSE: MQLONG = 2504;
pub const MQRC_XEPO_ERROR: MQLONG = 2507;
pub const MQRC_DURABILITY_NOT_ALTERABLE: MQLONG = 2509;
pub const MQRC_TOPIC_NOT_ALTERABLE: MQLONG = 2510;
pub const MQRC_SUBLEVEL_NOT_ALTERABLE: MQLONG = 2512;
pub const MQRC_PROPERTY_NAME_LENGTH_ERR: usize = 2513;
pub const MQRC_DUPLICATE_GROUP_SUB: MQLONG = 2514;
pub const MQRC_GROUPING_NOT_ALTERABLE: MQLONG = 2515;
pub const MQRC_SELECTOR_INVALID_FOR_TYPE: MQLONG = 2516;
pub const MQRC_HOBJ_QUIESCED: MQLONG = 2517;
pub const MQRC_HOBJ_QUIESCED_NO_MSGS: MQLONG = 2518;
pub const MQRC_SELECTION_STRING_ERROR: MQLONG = 2519;
pub const MQRC_RES_OBJECT_STRING_ERROR: MQLONG = 2520;
pub const MQRC_CONNECTION_SUSPENDED: MQLONG = 2521;
pub const MQRC_INVALID_DESTINATION: MQLONG = 2522;
pub const MQRC_INVALID_SUBSCRIPTION: MQLONG = 2523;
pub const MQRC_SELECTOR_NOT_ALTERABLE: MQLONG = 2524;
pub const MQRC_RETAINED_MSG_Q_ERROR: MQLONG = 2525;
pub const MQRC_RETAINED_NOT_DELIVERED: MQLONG = 2526;
pub const MQRC_RFH_RESTRICTED_FORMAT_ERR: MQLONG = 2527;
pub const MQRC_CONNECTION_STOPPED: MQLONG = 2528;
pub const MQRC_ASYNC_UOW_CONFLICT: MQLONG = 2529;
pub const MQRC_ASYNC_XA_CONFLICT: MQLONG = 2530;
pub const MQRC_PUBSUB_INHIBITED: MQLONG = 2531;
pub const MQRC_MSG_HANDLE_COPY_FAILURE: MQLONG = 2532;
pub const MQRC_DEST_CLASS_NOT_ALTERABLE: MQLONG = 2533;
pub const MQRC_OPERATION_NOT_ALLOWED: MQLONG = 2534;
pub const MQRC_ACTION_ERROR: MQLONG = 2535;
pub const MQRC_CHANNEL_NOT_AVAILABLE: MQLONG = 2537;
pub const MQRC_HOST_NOT_AVAILABLE: MQLONG = 2538;
pub const MQRC_CHANNEL_CONFIG_ERROR: MQLONG = 2539;
pub const MQRC_UNKNOWN_CHANNEL_NAME: MQLONG = 2540;
pub const MQRC_LOOPING_PUBLICATION: MQLONG = 2541;
pub const MQRC_ALREADY_JOINED: MQLONG = 2542;
pub const MQRC_STANDBY_Q_MGR: MQLONG = 2543;
pub const MQRC_RECONNECTING: MQLONG = 2544;
pub const MQRC_RECONNECTED: MQLONG = 2545;
pub const MQRC_RECONNECT_QMID_MISMATCH: MQLONG = 2546;
pub const MQRC_RECONNECT_INCOMPATIBLE: MQLONG = 2547;
pub const MQRC_RECONNECT_FAILED: MQLONG = 2548;
pub const MQRC_CALL_INTERRUPTED: MQLONG = 2549;
pub const MQRC_NO_SUBS_MATCHED: MQLONG = 2550;
pub const MQRC_SELECTION_NOT_AVAILABLE: MQLONG = 2551;
pub const MQRC_CHANNEL_SSL_WARNING: MQLONG = 2552;
pub const MQRC_OCSP_URL_ERROR: MQLONG = 2553;
pub const MQRC_CONTENT_ERROR: MQLONG = 2554;
pub const MQRC_RECONNECT_Q_MGR_REQD: MQLONG = 2555;
pub const MQRC_RECONNECT_TIMED_OUT: MQLONG = 2556;
pub const MQRC_PUBLISH_EXIT_ERROR: MQLONG = 2557;
pub const MQRC_COMMINFO_ERROR: MQLONG = 2558;
pub const MQRC_DEF_SYNCPOINT_INHIBITED: MQLONG = 2559;
pub const MQRC_MULTICAST_ONLY: MQLONG = 2560;
pub const MQRC_DATA_SET_NOT_AVAILABLE: MQLONG = 2561;
pub const MQRC_GROUPING_NOT_ALLOWED: MQLONG = 2562;
pub const MQRC_GROUP_ADDRESS_ERROR: MQLONG = 2563;
pub const MQRC_MULTICAST_CONFIG_ERROR: MQLONG = 2564;
pub const MQRC_MULTICAST_INTERFACE_ERROR: MQLONG = 2565;
pub const MQRC_MULTICAST_SEND_ERROR: MQLONG = 2566;
pub const MQRC_MULTICAST_INTERNAL_ERROR: MQLONG = 2567;
pub const MQRC_CONNECTION_NOT_AVAILABLE: MQLONG = 2568;
pub const MQRC_SYNCPOINT_NOT_ALLOWED: MQLONG = 2569;
pub const MQRC_SSL_ALT_PROVIDER_REQUIRED: MQLONG = 2570;
pub const MQRC_MCAST_PUB_STATUS: MQLONG = 2571;
pub const MQRC_MCAST_SUB_STATUS: MQLONG = 2572;
pub const MQRC_PRECONN_EXIT_LOAD_ERROR: MQLONG = 2573;
pub const MQRC_PRECONN_EXIT_NOT_FOUND: MQLONG = 2574;
pub const MQRC_PRECONN_EXIT_ERROR: MQLONG = 2575;
pub const MQRC_CD_ARRAY_ERROR: MQLONG = 2576;
pub const MQRC_CHANNEL_BLOCKED: MQLONG = 2577;
pub const MQRC_CHANNEL_BLOCKED_WARNING: MQLONG = 2578;
pub const MQRC_SUBSCRIPTION_CREATE: MQLONG = 2579;
pub const MQRC_SUBSCRIPTION_DELETE: MQLONG = 2580;
pub const MQRC_SUBSCRIPTION_CHANGE: MQLONG = 2581;
pub const MQRC_SUBSCRIPTION_REFRESH: MQLONG = 2582;
pub const MQRC_INSTALLATION_MISMATCH: MQLONG = 2583;
pub const MQRC_NOT_PRIVILEGED: MQLONG = 2584;
pub const MQRC_PROPERTIES_DISABLED: MQLONG = 2586;
pub const MQRC_HMSG_NOT_AVAILABLE: MQLONG = 2587;
pub const MQRC_EXIT_PROPS_NOT_SUPPORTED: MQLONG = 2588;
pub const MQRC_INSTALLATION_MISSING: MQLONG = 2589;
pub const MQRC_FASTPATH_NOT_AVAILABLE: MQLONG = 2590;
pub const MQRC_CIPHER_SPEC_NOT_SUITE_B: MQLONG = 2591;
pub const MQRC_SUITE_B_ERROR: MQLONG = 2592;
pub const MQRC_CERT_VAL_POLICY_ERROR: MQLONG = 2593;
pub const MQRC_PASSWORD_PROTECTION_ERROR: MQLONG = 2594;
pub const MQRC_CSP_ERROR: MQLONG = 2595;
pub const MQRC_CERT_LABEL_NOT_ALLOWED: MQLONG = 2596;
pub const MQRC_ADMIN_TOPIC_STRING_ERROR: MQLONG = 2598;
pub const MQRC_AMQP_NOT_AVAILABLE: MQLONG = 2599;
pub const MQRC_CCDT_URL_ERROR: MQLONG = 2600;
pub const MQRC_Q_MGR_RECONNECT_REQUESTED: MQLONG = 2601;
pub const MQRC_BNO_ERROR: MQLONG = 2602;
pub const MQRC_OUTBOUND_SNI_NOT_VALID: MQLONG = 2603;
pub const MQRC_REOPEN_EXCL_INPUT_ERROR: MQLONG = 6100;
pub const MQRC_REOPEN_INQUIRE_ERROR: MQLONG = 6101;
pub const MQRC_REOPEN_SAVED_CONTEXT_ERR: MQLONG = 6102;
pub const MQRC_REOPEN_TEMPORARY_Q_ERROR: MQLONG = 6103;
pub const MQRC_ATTRIBUTE_LOCKED: MQLONG = 6104;
pub const MQRC_CURSOR_NOT_VALID: MQLONG = 6105;
pub const MQRC_ENCODING_ERROR: MQLONG = 6106;
pub const MQRC_STRUC_ID_ERROR: MQLONG = 6107;
pub const MQRC_NULL_POINTER: MQLONG = 6108;
pub const MQRC_NO_CONNECTION_REFERENCE: MQLONG = 6109;
pub const MQRC_NO_BUFFER: MQLONG = 6110;
pub const MQRC_BINARY_DATA_LENGTH_ERROR: MQLONG = 6111;
pub const MQRC_BUFFER_NOT_AUTOMATIC: MQLONG = 6112;
pub const MQRC_INSUFFICIENT_BUFFER: MQLONG = 6113;
pub const MQRC_INSUFFICIENT_DATA: MQLONG = 6114;
pub const MQRC_DATA_TRUNCATED: MQLONG = 6115;
pub const MQRC_ZERO_LENGTH: usize = 6116;
pub const MQRC_NEGATIVE_LENGTH: usize = 6117;
pub const MQRC_NEGATIVE_OFFSET: MQLONG = 6118;
pub const MQRC_INCONSISTENT_FORMAT: MQLONG = 6119;
pub const MQRC_INCONSISTENT_OBJECT_STATE: MQLONG = 6120;
pub const MQRC_CONTEXT_OBJECT_NOT_VALID: MQLONG = 6121;
pub const MQRC_CONTEXT_OPEN_ERROR: MQLONG = 6122;
pub const MQRC_STRUC_LENGTH_ERROR: MQLONG = 6123;
pub const MQRC_NOT_CONNECTED: MQLONG = 6124;
pub const MQRC_NOT_OPEN: MQLONG = 6125;
pub const MQRC_DISTRIBUTION_LIST_EMPTY: MQLONG = 6126;
pub const MQRC_INCONSISTENT_OPEN_OPTIONS: MQLONG = 6127;
pub const MQRC_WRONG_VERSION: MQLONG = 6128;
pub const MQRC_REFERENCE_ERROR: MQLONG = 6129;
pub const MQRC_XR_NOT_AVAILABLE: MQLONG = 6130;
pub const MQRC_SUB_JOIN_NOT_ALTERABLE: MQLONG = 29440;
pub const MQQT_LOCAL: MQLONG = 1;
pub const MQQT_MODEL: MQLONG = 2;
pub const MQQT_ALIAS: MQLONG = 3;
pub const MQQT_REMOTE: MQLONG = 6;
pub const MQQT_CLUSTER: MQLONG = 7;
pub const MQCQT_LOCAL_Q: MQLONG = 1;
pub const MQCQT_ALIAS_Q: MQLONG = 2;
pub const MQCQT_REMOTE_Q: MQLONG = 3;
pub const MQCQT_Q_MGR_ALIAS: MQLONG = 4;
pub const MQQT_ALL: MQLONG = 1001;
pub const MQQDT_PREDEFINED: MQLONG = 1;
pub const MQQDT_PERMANENT_DYNAMIC: MQLONG = 2;
pub const MQQDT_TEMPORARY_DYNAMIC: MQLONG = 3;
pub const MQQDT_SHARED_DYNAMIC: MQLONG = 4;
pub const MQQA_GET_INHIBITED: MQLONG = 1;
pub const MQQA_GET_ALLOWED: MQLONG = 0;
pub const MQQA_PUT_INHIBITED: MQLONG = 1;
pub const MQQA_PUT_ALLOWED: MQLONG = 0;
pub const MQQA_SHAREABLE: MQLONG = 1;
pub const MQQA_NOT_SHAREABLE: MQLONG = 0;
pub const MQQA_BACKOUT_HARDENED: MQLONG = 1;
pub const MQQA_BACKOUT_NOT_HARDENED: MQLONG = 0;
pub const MQMDS_PRIORITY: MQLONG = 0;
pub const MQMDS_FIFO: MQLONG = 1;
pub const MQNPM_CLASS_NORMAL: MQLONG = 0;
pub const MQNPM_CLASS_HIGH: MQLONG = 10;
pub const MQTC_OFF: MQLONG = 0;
pub const MQTC_ON: MQLONG = 1;
pub const MQTT_NONE: MQLONG = 0;
pub const MQTT_FIRST: MQLONG = 1;
pub const MQTT_EVERY: MQLONG = 2;
pub const MQTT_DEPTH: MQLONG = 3;
pub const MQTRIGGER_RESTART_NO: MQLONG = 0;
pub const MQTRIGGER_RESTART_YES: MQLONG = 1;
pub const MQUS_NORMAL: MQLONG = 0;
pub const MQUS_TRANSMISSION: MQLONG = 1;
pub const MQDL_SUPPORTED: MQLONG = 1;
pub const MQDL_NOT_SUPPORTED: MQLONG = 0;
pub const MQIT_NONE: MQLONG = 0;
pub const MQIT_MSG_ID: MQLONG = 1;
pub const MQIT_CORREL_ID: MQLONG = 2;
pub const MQIT_MSG_TOKEN: MQLONG = 4;
pub const MQIT_GROUP_ID: MQLONG = 5;
pub const MQBND_BIND_ON_OPEN: MQLONG = 0;
pub const MQBND_BIND_NOT_FIXED: MQLONG = 1;
pub const MQBND_BIND_ON_GROUP: MQLONG = 2;
pub const MQQSGD_ALL: MQLONG = -1;
pub const MQQSGD_Q_MGR: MQLONG = 0;
pub const MQQSGD_COPY: MQLONG = 1;
pub const MQQSGD_SHARED: MQLONG = 2;
pub const MQQSGD_GROUP: MQLONG = 3;
pub const MQQSGD_PRIVATE: MQLONG = 4;
pub const MQQSGD_LIVE: MQLONG = 6;
pub const MQREORG_DISABLED: MQLONG = 0;
pub const MQREORG_ENABLED: MQLONG = 1;
pub const MQQFS_DEFAULT: MQLONG = -1;
pub const MQCEX_NOLIMIT: MQLONG = -1;
pub const MQCEX_AS_PARENT: MQLONG = -2;
pub const MQREADA_NO: MQLONG = 0;
pub const MQREADA_YES: MQLONG = 1;
pub const MQREADA_DISABLED: MQLONG = 2;
pub const MQREADA_INHIBITED: MQLONG = 3;
pub const MQREADA_BACKLOG: MQLONG = 4;
pub const MQPROP_COMPATIBILITY: MQLONG = 0;
pub const MQPROP_NONE: MQLONG = 1;
pub const MQPROP_ALL: MQLONG = 2;
pub const MQPROP_FORCE_MQRFH2: MQLONG = 3;
pub const MQPROP_V6COMPAT: MQLONG = 4;
pub const MQST_BEST_EFFORT: MQLONG = 0;
pub const MQST_MUST_DUP: MQLONG = 1;
pub const MQNC_MAX_NAMELIST_NAME_COUNT: MQLONG = 256;
pub const MQNT_NONE: MQLONG = 0;
pub const MQNT_Q: MQLONG = 1;
pub const MQNT_CLUSTER: MQLONG = 2;
pub const MQNT_AUTH_INFO: MQLONG = 4;
pub const MQNT_ALL: MQLONG = 1001;
pub const MQCFR_YES: MQLONG = 1;
pub const MQCFR_NO: MQLONG = 0;
pub const MQRECAUTO_NO: MQLONG = 0;
pub const MQRECAUTO_YES: MQLONG = 1;
pub const MQCFCONLOS_TERMINATE: MQLONG = 0;
pub const MQCFCONLOS_TOLERATE: MQLONG = 1;
pub const MQCFCONLOS_ASQMGR: MQLONG = 2;
pub const MQSVC_TYPE_COMMAND: MQLONG = 0;
pub const MQSVC_TYPE_SERVER: MQLONG = 1;
pub const MQADOPT_CHECK_NONE: MQLONG = 0;
pub const MQADOPT_CHECK_ALL: MQLONG = 1;
pub const MQADOPT_CHECK_Q_MGR_NAME: MQLONG = 2;
pub const MQADOPT_CHECK_NET_ADDR: MQLONG = 4;
pub const MQADOPT_CHECK_CHANNEL_NAME: MQLONG = 8;
pub const MQADOPT_TYPE_NO: MQLONG = 0;
pub const MQADOPT_TYPE_ALL: MQLONG = 1;
pub const MQADOPT_TYPE_SVR: MQLONG = 2;
pub const MQADOPT_TYPE_SDR: MQLONG = 4;
pub const MQADOPT_TYPE_RCVR: MQLONG = 8;
pub const MQADOPT_TYPE_CLUSRCVR: MQLONG = 16;
pub const MQAUTO_START_NO: MQLONG = 0;
pub const MQAUTO_START_YES: MQLONG = 1;
pub const MQCHAD_DISABLED: MQLONG = 0;
pub const MQCHAD_ENABLED: MQLONG = 1;
pub const MQCLWL_USEQ_LOCAL: MQLONG = 0;
pub const MQCLWL_USEQ_ANY: MQLONG = 1;
pub const MQCLWL_USEQ_AS_Q_MGR: MQLONG = -3;
pub const MQCMDL_LEVEL_1: MQLONG = 100;
pub const MQCMDL_LEVEL_101: MQLONG = 101;
pub const MQCMDL_LEVEL_110: MQLONG = 110;
pub const MQCMDL_LEVEL_114: MQLONG = 114;
pub const MQCMDL_LEVEL_120: MQLONG = 120;
pub const MQCMDL_LEVEL_200: MQLONG = 200;
pub const MQCMDL_LEVEL_201: MQLONG = 201;
pub const MQCMDL_LEVEL_210: MQLONG = 210;
pub const MQCMDL_LEVEL_211: MQLONG = 211;
pub const MQCMDL_LEVEL_220: MQLONG = 220;
pub const MQCMDL_LEVEL_221: MQLONG = 221;
pub const MQCMDL_LEVEL_230: MQLONG = 230;
pub const MQCMDL_LEVEL_320: MQLONG = 320;
pub const MQCMDL_LEVEL_420: MQLONG = 420;
pub const MQCMDL_LEVEL_500: MQLONG = 500;
pub const MQCMDL_LEVEL_510: MQLONG = 510;
pub const MQCMDL_LEVEL_520: MQLONG = 520;
pub const MQCMDL_LEVEL_530: MQLONG = 530;
pub const MQCMDL_LEVEL_531: MQLONG = 531;
pub const MQCMDL_LEVEL_600: MQLONG = 600;
pub const MQCMDL_LEVEL_700: MQLONG = 700;
pub const MQCMDL_LEVEL_701: MQLONG = 701;
pub const MQCMDL_LEVEL_710: MQLONG = 710;
pub const MQCMDL_LEVEL_711: MQLONG = 711;
pub const MQCMDL_LEVEL_750: MQLONG = 750;
pub const MQCMDL_LEVEL_800: MQLONG = 800;
pub const MQCMDL_LEVEL_801: MQLONG = 801;
pub const MQCMDL_LEVEL_802: MQLONG = 802;
pub const MQCMDL_LEVEL_900: MQLONG = 900;
pub const MQCMDL_LEVEL_901: MQLONG = 901;
pub const MQCMDL_LEVEL_902: MQLONG = 902;
pub const MQCMDL_LEVEL_903: MQLONG = 903;
pub const MQCMDL_LEVEL_904: MQLONG = 904;
pub const MQCMDL_LEVEL_905: MQLONG = 905;
pub const MQCMDL_LEVEL_910: MQLONG = 910;
pub const MQCMDL_LEVEL_911: MQLONG = 911;
pub const MQCMDL_LEVEL_912: MQLONG = 912;
pub const MQCMDL_LEVEL_913: MQLONG = 913;
pub const MQCMDL_LEVEL_914: MQLONG = 914;
pub const MQCMDL_LEVEL_915: MQLONG = 915;
pub const MQCMDL_LEVEL_920: MQLONG = 920;
pub const MQCMDL_LEVEL_921: MQLONG = 921;
pub const MQCMDL_LEVEL_922: MQLONG = 922;
pub const MQCMDL_LEVEL_923: MQLONG = 923;
pub const MQCMDL_LEVEL_924: MQLONG = 924;
pub const MQCMDL_LEVEL_925: MQLONG = 925;
pub const MQCMDL_LEVEL_930: MQLONG = 930;
pub const MQCMDL_LEVEL_931: MQLONG = 931;
pub const MQCMDL_LEVEL_932: MQLONG = 932;
pub const MQCMDL_LEVEL_933: MQLONG = 933;
pub const MQCMDL_LEVEL_934: MQLONG = 934;
pub const MQCMDL_LEVEL_935: MQLONG = 935;
pub const MQCMDL_LEVEL_940: MQLONG = 940;
pub const MQCMDL_CURRENT_LEVEL: MQLONG = 940;
pub const MQCSRV_CONVERT_NO: MQLONG = 0;
pub const MQCSRV_CONVERT_YES: MQLONG = 1;
pub const MQCSRV_DLQ_NO: MQLONG = 0;
pub const MQCSRV_DLQ_YES: MQLONG = 1;
pub const MQDNSWLM_NO: MQLONG = 0;
pub const MQDNSWLM_YES: MQLONG = 1;
pub const MQEXPI_OFF: MQLONG = 0;
pub const MQIGQ_DISABLED: MQLONG = 0;
pub const MQIGQ_ENABLED: MQLONG = 1;
pub const MQIGQPA_DEFAULT: MQLONG = 1;
pub const MQIGQPA_CONTEXT: MQLONG = 2;
pub const MQIGQPA_ONLY_IGQ: MQLONG = 3;
pub const MQIGQPA_ALTERNATE_OR_IGQ: MQLONG = 4;
pub const MQIPADDR_IPV4: MQLONG = 0;
pub const MQIPADDR_IPV6: MQLONG = 1;
pub const MQMMBI_UNLIMITED: MQLONG = -1;
pub const MQMON_NOT_AVAILABLE: MQLONG = -1;
pub const MQMON_NONE: MQLONG = -1;
pub const MQMON_Q_MGR: MQLONG = -3;
pub const MQMON_OFF: MQLONG = 0;
pub const MQMON_ON: MQLONG = 1;
pub const MQMON_DISABLED: MQLONG = 0;
pub const MQMON_ENABLED: MQLONG = 1;
pub const MQMON_LOW: MQLONG = 17;
pub const MQMON_MEDIUM: MQLONG = 33;
pub const MQMON_HIGH: MQLONG = 65;
pub const MQFUN_TYPE_UNKNOWN: MQLONG = 0;
pub const MQFUN_TYPE_JVM: MQLONG = 1;
pub const MQFUN_TYPE_PROGRAM: MQLONG = 2;
pub const MQFUN_TYPE_PROCEDURE: MQLONG = 3;
pub const MQFUN_TYPE_USERDEF: MQLONG = 4;
pub const MQFUN_TYPE_COMMAND: MQLONG = 5;
pub const MQACTV_DETAIL_LOW: MQLONG = 1;
pub const MQACTV_DETAIL_MEDIUM: MQLONG = 2;
pub const MQACTV_DETAIL_HIGH: MQLONG = 3;
pub const MQPL_MVS: MQLONG = 1;
pub const MQPL_OS390: MQLONG = 1;
pub const MQPL_ZOS: MQLONG = 1;
pub const MQPL_OS2: MQLONG = 2;
pub const MQPL_AIX: MQLONG = 3;
pub const MQPL_UNIX: MQLONG = 3;
pub const MQPL_OS400: MQLONG = 4;
pub const MQPL_WINDOWS: MQLONG = 5;
pub const MQPL_WINDOWS_NT: MQLONG = 11;
pub const MQPL_VMS: MQLONG = 12;
pub const MQPL_NSK: MQLONG = 13;
pub const MQPL_NSS: MQLONG = 13;
pub const MQPL_OPEN_TP1: MQLONG = 15;
pub const MQPL_VM: MQLONG = 18;
pub const MQPL_TPF: MQLONG = 23;
pub const MQPL_VSE: MQLONG = 27;
pub const MQPL_APPLIANCE: MQLONG = 28;
pub const MQPL_NATIVE: MQLONG = 3;
pub const MQPROP_UNRESTRICTED_LENGTH: usize = 18446744073709551615;
pub const MQPSM_DISABLED: MQLONG = 0;
pub const MQPSM_COMPAT: MQLONG = 1;
pub const MQPSM_ENABLED: MQLONG = 2;
pub const MQPSCLUS_DISABLED: MQLONG = 0;
pub const MQPSCLUS_ENABLED: MQLONG = 1;
pub const MQQMOPT_DISABLED: MQLONG = 0;
pub const MQQMOPT_ENABLED: MQLONG = 1;
pub const MQQMOPT_REPLY: MQLONG = 2;
pub const MQRCVTIME_MULTIPLY: MQLONG = 0;
pub const MQRCVTIME_ADD: MQLONG = 1;
pub const MQRCVTIME_EQUAL: MQLONG = 2;
pub const MQRECORDING_DISABLED: MQLONG = 0;
pub const MQRECORDING_Q: MQLONG = 1;
pub const MQRECORDING_MSG: MQLONG = 2;
pub const MQSCYC_UPPER: MQLONG = 0;
pub const MQSCYC_MIXED: MQLONG = 1;
pub const MQSQQM_USE: MQLONG = 0;
pub const MQSQQM_IGNORE: MQLONG = 1;
pub const MQSSL_FIPS_NO: MQLONG = 0;
pub const MQSSL_FIPS_YES: MQLONG = 1;
pub const MQSP_AVAILABLE: MQLONG = 1;
pub const MQSP_NOT_AVAILABLE: MQLONG = 0;
pub const MQSVC_CONTROL_Q_MGR: MQLONG = 0;
pub const MQSVC_CONTROL_Q_MGR_START: MQLONG = 1;
pub const MQSVC_CONTROL_MANUAL: MQLONG = 2;
pub const MQSVC_STATUS_STOPPED: MQLONG = 0;
pub const MQSVC_STATUS_STARTING: MQLONG = 1;
pub const MQSVC_STATUS_RUNNING: MQLONG = 2;
pub const MQSVC_STATUS_STOPPING: MQLONG = 3;
pub const MQSVC_STATUS_RETRYING: MQLONG = 4;
pub const MQTCPKEEP_NO: MQLONG = 0;
pub const MQTCPKEEP_YES: MQLONG = 1;
pub const MQTCPSTACK_SINGLE: MQLONG = 0;
pub const MQTCPSTACK_MULTIPLE: MQLONG = 1;
pub const MQTRAXSTR_NO: MQLONG = 0;
pub const MQTRAXSTR_YES: MQLONG = 1;
pub const MQCAP_NOT_SUPPORTED: MQLONG = 0;
pub const MQCAP_SUPPORTED: MQLONG = 1;
pub const MQCAP_EXPIRED: MQLONG = 2;
pub const MQMEDIMGSCHED_MANUAL: MQLONG = 0;
pub const MQMEDIMGSCHED_AUTO: MQLONG = 1;
pub const MQMEDIMGINTVL_OFF: MQLONG = 0;
pub const MQMEDIMGLOGLN_OFF: MQLONG = 0;
pub const MQIMGRCOV_NO: MQLONG = 0;
pub const MQIMGRCOV_YES: MQLONG = 1;
pub const MQIMGRCOV_AS_Q_MGR: MQLONG = 2;
pub const MQDLV_AS_PARENT: MQLONG = 0;
pub const MQDLV_ALL: MQLONG = 1;
pub const MQDLV_ALL_DUR: MQLONG = 2;
pub const MQDLV_ALL_AVAIL: MQLONG = 3;
pub const MQMASTER_NO: MQLONG = 0;
pub const MQMASTER_YES: MQLONG = 1;
pub const MQSCOPE_ALL: MQLONG = 0;
pub const MQSCOPE_AS_PARENT: MQLONG = 1;
pub const MQSCOPE_QMGR: MQLONG = 4;
pub const MQSUB_DURABLE_AS_PARENT: MQLONG = 0;
pub const MQSUB_DURABLE_ALLOWED: MQLONG = 1;
pub const MQSUB_DURABLE_INHIBITED: MQLONG = 2;
pub const MQTA_BLOCK: MQLONG = 1;
pub const MQTA_PASSTHRU: MQLONG = 2;
pub const MQTA_SUB_AS_PARENT: MQLONG = 0;
pub const MQTA_SUB_INHIBITED: MQLONG = 1;
pub const MQTA_SUB_ALLOWED: MQLONG = 2;
pub const MQTA_PROXY_SUB_FORCE: MQLONG = 1;
pub const MQTA_PROXY_SUB_FIRSTUSE: MQLONG = 2;
pub const MQTA_PUB_AS_PARENT: MQLONG = 0;
pub const MQTA_PUB_INHIBITED: MQLONG = 1;
pub const MQTA_PUB_ALLOWED: MQLONG = 2;
pub const MQTOPT_LOCAL: MQLONG = 0;
pub const MQTOPT_CLUSTER: MQLONG = 1;
pub const MQTOPT_ALL: MQLONG = 2;
pub const MQMC_AS_PARENT: MQLONG = 0;
pub const MQMC_ENABLED: MQLONG = 1;
pub const MQMC_DISABLED: MQLONG = 2;
pub const MQMC_ONLY: MQLONG = 3;
pub const MQCIT_MULTICAST: MQLONG = 1;
pub const MQDC_MANAGED: MQLONG = 1;
pub const MQDC_PROVIDED: MQLONG = 2;
pub const MQPSPROP_NONE: MQLONG = 0;
pub const MQPSPROP_COMPAT: MQLONG = 1;
pub const MQPSPROP_RFH2: MQLONG = 2;
pub const MQPSPROP_MSGPROP: MQLONG = 3;
pub const MQRU_PUBLISH_ON_REQUEST: MQLONG = 1;
pub const MQRU_PUBLISH_ALL: MQLONG = 2;
pub const MQSUB_DURABLE_ALL: MQLONG = -1;
pub const MQSUB_DURABLE_YES: MQLONG = 1;
pub const MQSUB_DURABLE_NO: MQLONG = 2;
pub const MQTSCOPE_QMGR: MQLONG = 1;
pub const MQTSCOPE_ALL: MQLONG = 2;
pub const MQVU_FIXED_USER: MQLONG = 1;
pub const MQVU_ANY_USER: MQLONG = 2;
pub const MQWS_DEFAULT: MQLONG = 0;
pub const MQWS_CHAR: MQLONG = 1;
pub const MQWS_TOPIC: MQLONG = 2;
pub const MQUSRC_MAP: MQLONG = 0;
pub const MQUSRC_NOACCESS: MQLONG = 1;
pub const MQUSRC_CHANNEL: MQLONG = 2;
pub const MQWARN_YES: MQLONG = 1;
pub const MQWARN_NO: MQLONG = 0;
pub const MQDSB_DEFAULT: MQLONG = 0;
pub const MQDSB_8K: MQLONG = 1;
pub const MQDSB_16K: MQLONG = 2;
pub const MQDSB_32K: MQLONG = 3;
pub const MQDSB_64K: MQLONG = 4;
pub const MQDSB_128K: MQLONG = 5;
pub const MQDSB_256K: MQLONG = 6;
pub const MQDSB_512K: MQLONG = 7;
pub const MQDSB_1024K: MQLONG = 8;
pub const MQDSB_1M: MQLONG = 8;
pub const MQDSE_DEFAULT: MQLONG = 0;
pub const MQDSE_YES: MQLONG = 1;
pub const MQDSE_NO: MQLONG = 2;
pub const MQCFOFFLD_NONE: MQLONG = 0;
pub const MQCFOFFLD_SMDS: MQLONG = 1;
pub const MQCFOFFLD_DB2: MQLONG = 2;
pub const MQCFOFFLD_BOTH: MQLONG = 3;
pub const MQUSEDLQ_AS_PARENT: MQLONG = 0;
pub const MQUSEDLQ_NO: MQLONG = 1;
pub const MQUSEDLQ_YES: MQLONG = 2;
pub const MQ_MQTT_MAX_KEEP_ALIVE: MQLONG = 65536;
pub const MQ_SSL_KEY_PASSPHRASE_LENGTH: usize = 1024;
pub const MQHO_UNUSABLE_HOBJ: MQHOBJ = -1;
pub const MQHO_NONE: MQHOBJ = 0;
pub const MQCO_IMMEDIATE: MQLONG = 0;
pub const MQCO_NONE: MQLONG = 0;
pub const MQCO_DELETE: MQLONG = 1;
pub const MQCO_DELETE_PURGE: MQLONG = 2;
pub const MQCO_KEEP_SUB: MQLONG = 4;
pub const MQCO_REMOVE_SUB: MQLONG = 8;
pub const MQCO_QUIESCE: MQLONG = 32;
pub const MQOP_START: MQLONG = 1;
pub const MQOP_START_WAIT: MQLONG = 2;
pub const MQOP_STOP: MQLONG = 4;
pub const MQOP_REGISTER: MQLONG = 256;
pub const MQOP_DEREGISTER: MQLONG = 512;
pub const MQOP_SUSPEND: MQLONG = 65536;
pub const MQOP_RESUME: MQLONG = 131072;
pub const MQHM_UNUSABLE_HMSG: MQHMSG = -1;
pub const MQHM_NONE: MQHMSG = 0;
pub const MQBA_FIRST: MQLONG = 6001;
pub const MQBA_LAST: MQLONG = 8000;
pub const MQCA_ADMIN_TOPIC_NAME: MQLONG = 2105;
pub const MQCA_ALTERATION_DATE: MQLONG = 2027;
pub const MQCA_ALTERATION_TIME: MQLONG = 2028;
pub const MQCA_AMQP_SSL_CIPHER_SUITES: MQLONG = 2137;
pub const MQCA_AMQP_VERSION: MQLONG = 2136;
pub const MQCA_APPL_ID: MQLONG = 2001;
pub const MQCA_AUTH_INFO_CONN_NAME: MQLONG = 2053;
pub const MQCA_AUTH_INFO_DESC: MQLONG = 2046;
pub const MQCA_AUTH_INFO_NAME: MQLONG = 2045;
pub const MQCA_AUTH_INFO_OCSP_URL: MQLONG = 2109;
pub const MQCA_AUTO_REORG_CATALOG: MQLONG = 2091;
pub const MQCA_AUTO_REORG_START_TIME: MQLONG = 2090;
pub const MQCA_BACKOUT_REQ_Q_NAME: MQLONG = 2019;
pub const MQCA_BASE_OBJECT_NAME: MQLONG = 2002;
pub const MQCA_BASE_Q_NAME: MQLONG = 2002;
pub const MQCA_BATCH_INTERFACE_ID: MQLONG = 2068;
pub const MQCA_CERT_LABEL: MQLONG = 2121;
pub const MQCA_CF_STRUC_DESC: MQLONG = 2052;
pub const MQCA_CF_STRUC_NAME: MQLONG = 2039;
pub const MQCA_CHANNEL_AUTO_DEF_EXIT: MQLONG = 2026;
pub const MQCA_CHILD: MQLONG = 2101;
pub const MQCA_CHINIT_SERVICE_PARM: MQLONG = 2076;
pub const MQCA_CHLAUTH_DESC: MQLONG = 2118;
pub const MQCA_CICS_FILE_NAME: MQLONG = 2060;
pub const MQCA_CLUSTER_DATE: MQLONG = 2037;
pub const MQCA_CLUSTER_NAME: MQLONG = 2029;
pub const MQCA_CLUSTER_NAMELIST: MQLONG = 2030;
pub const MQCA_CLUSTER_Q_MGR_NAME: MQLONG = 2031;
pub const MQCA_CLUSTER_TIME: MQLONG = 2038;
pub const MQCA_CLUSTER_WORKLOAD_DATA: MQLONG = 2034;
pub const MQCA_CLUSTER_WORKLOAD_EXIT: MQLONG = 2033;
pub const MQCA_CLUS_CHL_NAME: MQLONG = 2124;
pub const MQCA_COMMAND_INPUT_Q_NAME: MQLONG = 2003;
pub const MQCA_COMMAND_REPLY_Q_NAME: MQLONG = 2067;
pub const MQCA_COMM_INFO_DESC: MQLONG = 2111;
pub const MQCA_COMM_INFO_NAME: MQLONG = 2110;
pub const MQCA_CONN_AUTH: MQLONG = 2125;
pub const MQCA_CREATION_DATE: MQLONG = 2004;
pub const MQCA_CREATION_TIME: MQLONG = 2005;
pub const MQCA_CUSTOM: MQLONG = 2119;
pub const MQCA_DEAD_LETTER_Q_NAME: MQLONG = 2006;
pub const MQCA_DEF_XMIT_Q_NAME: MQLONG = 2025;
pub const MQCA_DNS_GROUP: MQLONG = 2071;
pub const MQCA_ENV_DATA: MQLONG = 2007;
pub const MQCA_FIRST: MQLONG = 2001;
pub const MQCA_IGQ_USER_ID: MQLONG = 2041;
pub const MQCA_INITIAL_KEY: MQLONG = 2054;
pub const MQCA_INITIATION_Q_NAME: MQLONG = 2008;
pub const MQCA_INSTALLATION_DESC: MQLONG = 2115;
pub const MQCA_INSTALLATION_NAME: MQLONG = 2116;
pub const MQCA_INSTALLATION_PATH: MQLONG = 2117;
pub const MQCA_LAST: MQLONG = 4000;
pub const MQCA_LAST_USED: MQLONG = 2138;
pub const MQCA_LDAP_BASE_DN_GROUPS: MQLONG = 2132;
pub const MQCA_LDAP_BASE_DN_USERS: MQLONG = 2126;
pub const MQCA_LDAP_FIND_GROUP_FIELD: MQLONG = 2135;
pub const MQCA_LDAP_GROUP_ATTR_FIELD: MQLONG = 2134;
pub const MQCA_LDAP_GROUP_OBJECT_CLASS: MQLONG = 2133;
pub const MQCA_LDAP_PASSWORD: MQLONG = 2048;
pub const MQCA_LDAP_SHORT_USER_FIELD: MQLONG = 2127;
pub const MQCA_LDAP_USER_ATTR_FIELD: MQLONG = 2129;
pub const MQCA_LDAP_USER_NAME: MQLONG = 2047;
pub const MQCA_LDAP_USER_OBJECT_CLASS: MQLONG = 2128;
pub const MQCA_LU62_ARM_SUFFIX: MQLONG = 2074;
pub const MQCA_LU_GROUP_NAME: MQLONG = 2072;
pub const MQCA_LU_NAME: MQLONG = 2073;
pub const MQCA_MODEL_DURABLE_Q: MQLONG = 2096;
pub const MQCA_MODEL_NON_DURABLE_Q: MQLONG = 2097;
pub const MQCA_MONITOR_Q_NAME: MQLONG = 2066;
pub const MQCA_NAMELIST_DESC: MQLONG = 2009;
pub const MQCA_NAMELIST_NAME: MQLONG = 2010;
pub const MQCA_NAMES: MQLONG = 2020;
pub const MQCA_PARENT: MQLONG = 2102;
pub const MQCA_PASS_TICKET_APPL: MQLONG = 2086;
pub const MQCA_POLICY_NAME: MQLONG = 2112;
pub const MQCA_PROCESS_DESC: MQLONG = 2011;
pub const MQCA_PROCESS_NAME: MQLONG = 2012;
pub const MQCA_QSG_CERT_LABEL: MQLONG = 2131;
pub const MQCA_QSG_NAME: MQLONG = 2040;
pub const MQCA_Q_DESC: MQLONG = 2013;
pub const MQCA_Q_MGR_DESC: MQLONG = 2014;
pub const MQCA_Q_MGR_IDENTIFIER: MQLONG = 2032;
pub const MQCA_Q_MGR_NAME: MQLONG = 2015;
pub const MQCA_Q_NAME: MQLONG = 2016;
pub const MQCA_RECIPIENT_DN: MQLONG = 2114;
pub const MQCA_REMOTE_Q_MGR_NAME: MQLONG = 2017;
pub const MQCA_REMOTE_Q_NAME: MQLONG = 2018;
pub const MQCA_REPOSITORY_NAME: MQLONG = 2035;
pub const MQCA_REPOSITORY_NAMELIST: MQLONG = 2036;
pub const MQCA_RESUME_DATE: MQLONG = 2098;
pub const MQCA_RESUME_TIME: MQLONG = 2099;
pub const MQCA_SERVICE_DESC: MQLONG = 2078;
pub const MQCA_SERVICE_NAME: MQLONG = 2077;
pub const MQCA_SERVICE_START_ARGS: MQLONG = 2080;
pub const MQCA_SERVICE_START_COMMAND: MQLONG = 2079;
pub const MQCA_SERVICE_STOP_ARGS: MQLONG = 2082;
pub const MQCA_SERVICE_STOP_COMMAND: MQLONG = 2081;
pub const MQCA_SIGNER_DN: MQLONG = 2113;
pub const MQCA_SSL_CERT_ISSUER_NAME: MQLONG = 2130;
pub const MQCA_SSL_CRL_NAMELIST: MQLONG = 2050;
pub const MQCA_SSL_CRYPTO_HARDWARE: MQLONG = 2051;
pub const MQCA_SSL_KEY_LIBRARY: MQLONG = 2069;
pub const MQCA_SSL_KEY_MEMBER: MQLONG = 2070;
pub const MQCA_SSL_KEY_REPOSITORY: MQLONG = 2049;
pub const MQCA_SSL_KEY_REPO_PASSWORD: MQLONG = 2055;
pub const MQCA_STDERR_DESTINATION: MQLONG = 2084;
pub const MQCA_STDOUT_DESTINATION: MQLONG = 2083;
pub const MQCA_STORAGE_CLASS: MQLONG = 2022;
pub const MQCA_STORAGE_CLASS_DESC: MQLONG = 2042;
pub const MQCA_STREAM_QUEUE_NAME: MQLONG = 2138;
pub const MQCA_SYSTEM_LOG_Q_NAME: MQLONG = 2065;
pub const MQCA_TCP_NAME: MQLONG = 2075;
pub const MQCA_TOPIC_DESC: MQLONG = 2093;
pub const MQCA_TOPIC_NAME: MQLONG = 2092;
pub const MQCA_TOPIC_STRING: MQLONG = 2094;
pub const MQCA_TOPIC_STRING_FILTER: MQLONG = 2108;
pub const MQCA_TPIPE_NAME: MQLONG = 2085;
pub const MQCA_TRIGGER_CHANNEL_NAME: MQLONG = 2064;
pub const MQCA_TRIGGER_DATA: MQLONG = 2023;
pub const MQCA_TRIGGER_PROGRAM_NAME: MQLONG = 2062;
pub const MQCA_TRIGGER_TERM_ID: MQLONG = 2063;
pub const MQCA_TRIGGER_TRANS_ID: MQLONG = 2061;
pub const MQCA_USER_DATA: MQLONG = 2021;
pub const MQCA_USER_LIST: MQLONG = 4000;
pub const MQCA_VERSION: MQLONG = 2120;
pub const MQCA_XCF_GROUP_NAME: MQLONG = 2043;
pub const MQCA_XCF_MEMBER_NAME: MQLONG = 2044;
pub const MQCA_XMIT_Q_NAME: MQLONG = 2024;
pub const MQCA_XR_SSL_CIPHER_SUITES: MQLONG = 2123;
pub const MQCA_XR_VERSION: MQLONG = 2122;
pub const MQIA_ACCOUNTING_CONN_OVERRIDE: MQLONG = 136;
pub const MQIA_ACCOUNTING_INTERVAL: MQLONG = 135;
pub const MQIA_ACCOUNTING_MQI: MQLONG = 133;
pub const MQIA_ACCOUNTING_Q: MQLONG = 134;
pub const MQIA_ACTIVE_CHANNELS: MQLONG = 100;
pub const MQIA_ACTIVITY_CONN_OVERRIDE: MQLONG = 239;
pub const MQIA_ACTIVITY_RECORDING: MQLONG = 138;
pub const MQIA_ACTIVITY_TRACE: MQLONG = 240;
pub const MQIA_ADOPTNEWMCA_CHECK: MQLONG = 102;
pub const MQIA_ADOPTNEWMCA_INTERVAL: MQLONG = 104;
pub const MQIA_ADOPTNEWMCA_TYPE: MQLONG = 103;
pub const MQIA_ADOPT_CONTEXT: MQLONG = 260;
pub const MQIA_ADVANCED_CAPABILITY: MQLONG = 273;
pub const MQIA_AMQP_CAPABILITY: MQLONG = 265;
pub const MQIA_APPL_TYPE: MQLONG = 1;
pub const MQIA_ARCHIVE: MQLONG = 60;
pub const MQIA_AUTHENTICATION_FAIL_DELAY: MQLONG = 259;
pub const MQIA_AUTHENTICATION_METHOD: MQLONG = 266;
pub const MQIA_AUTHORITY_EVENT: MQLONG = 47;
pub const MQIA_AUTH_INFO_TYPE: MQLONG = 66;
pub const MQIA_AUTO_REORGANIZATION: MQLONG = 173;
pub const MQIA_AUTO_REORG_INTERVAL: MQLONG = 174;
pub const MQIA_BACKOUT_THRESHOLD: MQLONG = 22;
pub const MQIA_BASE_TYPE: MQLONG = 193;
pub const MQIA_BATCH_INTERFACE_AUTO: MQLONG = 86;
pub const MQIA_BRIDGE_EVENT: MQLONG = 74;
pub const MQIA_CAP_EXPIRY: MQLONG = 276;
pub const MQIA_CERT_VAL_POLICY: MQLONG = 252;
pub const MQIA_CF_CFCONLOS: MQLONG = 246;
pub const MQIA_CF_LEVEL: MQLONG = 70;
pub const MQIA_CF_OFFLDUSE: MQLONG = 229;
pub const MQIA_CF_OFFLOAD: MQLONG = 224;
pub const MQIA_CF_OFFLOAD_THRESHOLD1: MQLONG = 225;
pub const MQIA_CF_OFFLOAD_THRESHOLD2: MQLONG = 226;
pub const MQIA_CF_OFFLOAD_THRESHOLD3: MQLONG = 227;
pub const MQIA_CF_RECAUTO: MQLONG = 244;
pub const MQIA_CF_RECOVER: MQLONG = 71;
pub const MQIA_CF_SMDS_BUFFERS: MQLONG = 228;
pub const MQIA_CHANNEL_AUTO_DEF: MQLONG = 55;
pub const MQIA_CHANNEL_AUTO_DEF_EVENT: MQLONG = 56;
pub const MQIA_CHANNEL_EVENT: MQLONG = 73;
pub const MQIA_CHECK_CLIENT_BINDING: MQLONG = 258;
pub const MQIA_CHECK_LOCAL_BINDING: MQLONG = 257;
pub const MQIA_CHINIT_ADAPTERS: MQLONG = 101;
pub const MQIA_CHINIT_CONTROL: MQLONG = 119;
pub const MQIA_CHINIT_DISPATCHERS: MQLONG = 105;
pub const MQIA_CHINIT_TRACE_AUTO_START: MQLONG = 117;
pub const MQIA_CHINIT_TRACE_TABLE_SIZE: MQLONG = 118;
pub const MQIA_CHLAUTH_RECORDS: MQLONG = 248;
pub const MQIA_CLUSTER_OBJECT_STATE: MQLONG = 256;
pub const MQIA_CLUSTER_PUB_ROUTE: MQLONG = 255;
pub const MQIA_CLUSTER_Q_TYPE: MQLONG = 59;
pub const MQIA_CLUSTER_WORKLOAD_LENGTH: MQLONG = 58;
pub const MQIA_CLWL_MRU_CHANNELS: MQLONG = 97;
pub const MQIA_CLWL_Q_PRIORITY: MQLONG = 96;
pub const MQIA_CLWL_Q_RANK: MQLONG = 95;
pub const MQIA_CLWL_USEQ: MQLONG = 98;
pub const MQIA_CMD_SERVER_AUTO: MQLONG = 87;
pub const MQIA_CMD_SERVER_CONTROL: MQLONG = 120;
pub const MQIA_CMD_SERVER_CONVERT_MSG: MQLONG = 88;
pub const MQIA_CMD_SERVER_DLQ_MSG: MQLONG = 89;
pub const MQIA_CODED_CHAR_SET_ID: MQLONG = 2;
pub const MQIA_COMMAND_EVENT: MQLONG = 99;
pub const MQIA_COMMAND_LEVEL: MQLONG = 31;
pub const MQIA_COMM_EVENT: MQLONG = 232;
pub const MQIA_COMM_INFO_TYPE: MQLONG = 223;
pub const MQIA_CONFIGURATION_EVENT: MQLONG = 51;
pub const MQIA_CPI_LEVEL: MQLONG = 27;
pub const MQIA_CURRENT_Q_DEPTH: MQLONG = 3;
pub const MQIA_DEFINITION_TYPE: MQLONG = 7;
pub const MQIA_DEF_BIND: MQLONG = 61;
pub const MQIA_DEF_CLUSTER_XMIT_Q_TYPE: MQLONG = 250;
pub const MQIA_DEF_INPUT_OPEN_OPTION: MQLONG = 4;
pub const MQIA_DEF_PERSISTENCE: MQLONG = 5;
pub const MQIA_DEF_PRIORITY: MQLONG = 6;
pub const MQIA_DEF_PUT_RESPONSE_TYPE: MQLONG = 184;
pub const MQIA_DEF_READ_AHEAD: MQLONG = 188;
pub const MQIA_DISPLAY_TYPE: MQLONG = 262;
pub const MQIA_DIST_LISTS: MQLONG = 34;
pub const MQIA_DNS_WLM: MQLONG = 106;
pub const MQIA_DURABLE_SUB: MQLONG = 175;
pub const MQIA_ENCRYPTION_ALGORITHM: MQLONG = 237;
pub const MQIA_EXPIRY_INTERVAL: MQLONG = 39;
pub const MQIA_FIRST: MQLONG = 1;
pub const MQIA_GROUP_UR: MQLONG = 221;
pub const MQIA_HARDEN_GET_BACKOUT: MQLONG = 8;
pub const MQIA_HIGH_Q_DEPTH: MQLONG = 36;
pub const MQIA_IGQ_PUT_AUTHORITY: MQLONG = 65;
pub const MQIA_INDEX_TYPE: MQLONG = 57;
pub const MQIA_INHIBIT_EVENT: MQLONG = 48;
pub const MQIA_INHIBIT_GET: MQLONG = 9;
pub const MQIA_INHIBIT_PUB: MQLONG = 181;
pub const MQIA_INHIBIT_PUT: MQLONG = 10;
pub const MQIA_INHIBIT_SUB: MQLONG = 182;
pub const MQIA_INTRA_GROUP_QUEUING: MQLONG = 64;
pub const MQIA_IP_ADDRESS_VERSION: MQLONG = 93;
pub const MQIA_KEY_REUSE_COUNT: MQLONG = 267;
pub const MQIA_LAST: MQLONG = 2000;
pub const MQIA_LAST_USED: MQLONG = 276;
pub const MQIA_LDAP_AUTHORMD: MQLONG = 263;
pub const MQIA_LDAP_NESTGRP: MQLONG = 264;
pub const MQIA_LDAP_SECURE_COMM: MQLONG = 261;
pub const MQIA_LISTENER_PORT_NUMBER: MQLONG = 85;
pub const MQIA_LISTENER_TIMER: MQLONG = 107;
pub const MQIA_LOCAL_EVENT: MQLONG = 49;
pub const MQIA_LOGGER_EVENT: MQLONG = 94;
pub const MQIA_LU62_CHANNELS: MQLONG = 108;
pub const MQIA_MASTER_ADMIN: MQLONG = 186;
pub const MQIA_MAX_CHANNELS: MQLONG = 109;
pub const MQIA_MAX_CLIENTS: MQLONG = 172;
pub const MQIA_MAX_GLOBAL_LOCKS: MQLONG = 83;
pub const MQIA_MAX_HANDLES: MQLONG = 11;
pub const MQIA_MAX_LOCAL_LOCKS: MQLONG = 84;
pub const MQIA_MAX_MSG_LENGTH: MQLONG = 13;
pub const MQIA_MAX_OPEN_Q: MQLONG = 80;
pub const MQIA_MAX_PRIORITY: MQLONG = 14;
pub const MQIA_MAX_PROPERTIES_LENGTH: MQLONG = 192;
pub const MQIA_MAX_Q_DEPTH: MQLONG = 15;
pub const MQIA_MAX_Q_FILE_SIZE: MQLONG = 274;
pub const MQIA_MAX_Q_TRIGGERS: MQLONG = 90;
pub const MQIA_MAX_RECOVERY_TASKS: MQLONG = 171;
pub const MQIA_MAX_RESPONSES: MQLONG = 230;
pub const MQIA_MAX_UNCOMMITTED_MSGS: MQLONG = 33;
pub const MQIA_MCAST_BRIDGE: MQLONG = 233;
pub const MQIA_MEDIA_IMAGE_INTERVAL: MQLONG = 269;
pub const MQIA_MEDIA_IMAGE_LOG_LENGTH: MQLONG = 270;
pub const MQIA_MEDIA_IMAGE_RECOVER_OBJ: MQLONG = 271;
pub const MQIA_MEDIA_IMAGE_RECOVER_Q: MQLONG = 272;
pub const MQIA_MEDIA_IMAGE_SCHEDULING: MQLONG = 268;
pub const MQIA_MONITORING_AUTO_CLUSSDR: MQLONG = 124;
pub const MQIA_MONITORING_CHANNEL: MQLONG = 122;
pub const MQIA_MONITORING_Q: MQLONG = 123;
pub const MQIA_MONITOR_INTERVAL: MQLONG = 81;
pub const MQIA_MSG_DELIVERY_SEQUENCE: MQLONG = 16;
pub const MQIA_MSG_DEQ_COUNT: MQLONG = 38;
pub const MQIA_MSG_ENQ_COUNT: MQLONG = 37;
pub const MQIA_MSG_MARK_BROWSE_INTERVAL: MQLONG = 68;
pub const MQIA_MULTICAST: MQLONG = 176;
pub const MQIA_NAMELIST_TYPE: MQLONG = 72;
pub const MQIA_NAME_COUNT: MQLONG = 19;
pub const MQIA_NPM_CLASS: MQLONG = 78;
pub const MQIA_NPM_DELIVERY: MQLONG = 196;
pub const MQIA_OPEN_INPUT_COUNT: MQLONG = 17;
pub const MQIA_OPEN_OUTPUT_COUNT: MQLONG = 18;
pub const MQIA_OUTBOUND_PORT_MAX: MQLONG = 140;
pub const MQIA_OUTBOUND_PORT_MIN: MQLONG = 110;
pub const MQIA_PAGESET_ID: MQLONG = 62;
pub const MQIA_PERFORMANCE_EVENT: MQLONG = 53;
pub const MQIA_PLATFORM: MQLONG = 32;
pub const MQIA_PM_DELIVERY: MQLONG = 195;
pub const MQIA_POLICY_VERSION: MQLONG = 238;
pub const MQIA_PROPERTY_CONTROL: MQLONG = 190;
pub const MQIA_PROT_POLICY_CAPABILITY: MQLONG = 251;
pub const MQIA_PROXY_SUB: MQLONG = 199;
pub const MQIA_PUBSUB_CLUSTER: MQLONG = 249;
pub const MQIA_PUBSUB_MAXMSG_RETRY_COUNT: MQLONG = 206;
pub const MQIA_PUBSUB_MODE: MQLONG = 187;
pub const MQIA_PUBSUB_NP_MSG: MQLONG = 203;
pub const MQIA_PUBSUB_NP_RESP: MQLONG = 205;
pub const MQIA_PUBSUB_SYNC_PT: MQLONG = 207;
pub const MQIA_PUB_COUNT: MQLONG = 215;
pub const MQIA_PUB_SCOPE: MQLONG = 219;
pub const MQIA_QMGR_CFCONLOS: MQLONG = 245;
pub const MQIA_QMOPT_CONS_COMMS_MSGS: MQLONG = 155;
pub const MQIA_QMOPT_CONS_CRITICAL_MSGS: MQLONG = 154;
pub const MQIA_QMOPT_CONS_ERROR_MSGS: MQLONG = 153;
pub const MQIA_QMOPT_CONS_INFO_MSGS: MQLONG = 151;
pub const MQIA_QMOPT_CONS_REORG_MSGS: MQLONG = 156;
pub const MQIA_QMOPT_CONS_SYSTEM_MSGS: MQLONG = 157;
pub const MQIA_QMOPT_CONS_WARNING_MSGS: MQLONG = 152;
pub const MQIA_QMOPT_CSMT_ON_ERROR: MQLONG = 150;
pub const MQIA_QMOPT_INTERNAL_DUMP: MQLONG = 170;
pub const MQIA_QMOPT_LOG_COMMS_MSGS: MQLONG = 162;
pub const MQIA_QMOPT_LOG_CRITICAL_MSGS: MQLONG = 161;
pub const MQIA_QMOPT_LOG_ERROR_MSGS: MQLONG = 160;
pub const MQIA_QMOPT_LOG_INFO_MSGS: MQLONG = 158;
pub const MQIA_QMOPT_LOG_REORG_MSGS: MQLONG = 163;
pub const MQIA_QMOPT_LOG_SYSTEM_MSGS: MQLONG = 164;
pub const MQIA_QMOPT_LOG_WARNING_MSGS: MQLONG = 159;
pub const MQIA_QMOPT_TRACE_COMMS: MQLONG = 166;
pub const MQIA_QMOPT_TRACE_CONVERSION: MQLONG = 168;
pub const MQIA_QMOPT_TRACE_MQI_CALLS: MQLONG = 165;
pub const MQIA_QMOPT_TRACE_REORG: MQLONG = 167;
pub const MQIA_QMOPT_TRACE_SYSTEM: MQLONG = 169;
pub const MQIA_QSG_DISP: MQLONG = 63;
pub const MQIA_Q_DEPTH_HIGH_EVENT: MQLONG = 43;
pub const MQIA_Q_DEPTH_HIGH_LIMIT: MQLONG = 40;
pub const MQIA_Q_DEPTH_LOW_EVENT: MQLONG = 44;
pub const MQIA_Q_DEPTH_LOW_LIMIT: MQLONG = 41;
pub const MQIA_Q_DEPTH_MAX_EVENT: MQLONG = 42;
pub const MQIA_Q_SERVICE_INTERVAL: MQLONG = 54;
pub const MQIA_Q_SERVICE_INTERVAL_EVENT: MQLONG = 46;
pub const MQIA_Q_TYPE: MQLONG = 20;
pub const MQIA_Q_USERS: MQLONG = 82;
pub const MQIA_READ_AHEAD: MQLONG = 189;
pub const MQIA_RECEIVE_TIMEOUT: MQLONG = 111;
pub const MQIA_RECEIVE_TIMEOUT_MIN: MQLONG = 113;
pub const MQIA_RECEIVE_TIMEOUT_TYPE: MQLONG = 112;
pub const MQIA_REMOTE_EVENT: MQLONG = 50;
pub const MQIA_RESPONSE_RESTART_POINT: MQLONG = 231;
pub const MQIA_RETENTION_INTERVAL: MQLONG = 21;
pub const MQIA_REVERSE_DNS_LOOKUP: MQLONG = 254;
pub const MQIA_SCOPE: MQLONG = 45;
pub const MQIA_SECURITY_CASE: MQLONG = 141;
pub const MQIA_SERVICE_CONTROL: MQLONG = 139;
pub const MQIA_SERVICE_TYPE: MQLONG = 121;
pub const MQIA_SHAREABILITY: MQLONG = 23;
pub const MQIA_SHARED_Q_Q_MGR_NAME: MQLONG = 77;
pub const MQIA_SIGNATURE_ALGORITHM: MQLONG = 236;
pub const MQIA_SSL_EVENT: MQLONG = 75;
pub const MQIA_SSL_FIPS_REQUIRED: MQLONG = 92;
pub const MQIA_SSL_RESET_COUNT: MQLONG = 76;
pub const MQIA_SSL_TASKS: MQLONG = 69;
pub const MQIA_START_STOP_EVENT: MQLONG = 52;
pub const MQIA_STATISTICS_AUTO_CLUSSDR: MQLONG = 130;
pub const MQIA_STATISTICS_CHANNEL: MQLONG = 129;
pub const MQIA_STATISTICS_INTERVAL: MQLONG = 131;
pub const MQIA_STATISTICS_MQI: MQLONG = 127;
pub const MQIA_STATISTICS_Q: MQLONG = 128;
pub const MQIA_STREAM_QUEUE_QOS: MQLONG = 275;
pub const MQIA_SUB_CONFIGURATION_EVENT: MQLONG = 242;
pub const MQIA_SUB_COUNT: MQLONG = 204;
pub const MQIA_SUB_SCOPE: MQLONG = 218;
pub const MQIA_SUITE_B_STRENGTH: MQLONG = 247;
pub const MQIA_SYNCPOINT: MQLONG = 30;
pub const MQIA_TCP_CHANNELS: MQLONG = 114;
pub const MQIA_TCP_KEEP_ALIVE: MQLONG = 115;
pub const MQIA_TCP_STACK_TYPE: MQLONG = 116;
pub const MQIA_TIME_SINCE_RESET: MQLONG = 35;
pub const MQIA_TOLERATE_UNPROTECTED: MQLONG = 235;
pub const MQIA_TOPIC_DEF_PERSISTENCE: MQLONG = 185;
pub const MQIA_TOPIC_NODE_COUNT: MQLONG = 253;
pub const MQIA_TOPIC_TYPE: MQLONG = 208;
pub const MQIA_TRACE_ROUTE_RECORDING: MQLONG = 137;
pub const MQIA_TREE_LIFE_TIME: MQLONG = 183;
pub const MQIA_TRIGGER_CONTROL: MQLONG = 24;
pub const MQIA_TRIGGER_DEPTH: MQLONG = 29;
pub const MQIA_TRIGGER_INTERVAL: MQLONG = 25;
pub const MQIA_TRIGGER_MSG_PRIORITY: MQLONG = 26;
pub const MQIA_TRIGGER_RESTART: MQLONG = 91;
pub const MQIA_TRIGGER_TYPE: MQLONG = 28;
pub const MQIA_UR_DISP: MQLONG = 222;
pub const MQIA_USAGE: MQLONG = 12;
pub const MQIA_USER_LIST: MQLONG = 2000;
pub const MQIA_USE_DEAD_LETTER_Q: MQLONG = 234;
pub const MQIA_WILDCARD_OPERATION: MQLONG = 216;
pub const MQIA_XR_CAPABILITY: MQLONG = 243;
pub const MQIAV_NOT_APPLICABLE: MQLONG = -1;
pub const MQIAV_UNDEFINED: MQLONG = -2;
pub const MQMCB_DISABLED: MQLONG = 0;
pub const MQMCB_ENABLED: MQLONG = 1;
pub const MQKEY_REUSE_DISABLED: MQLONG = 0;
pub const MQKEY_REUSE_UNLIMITED: MQLONG = -1;
pub const MQGA_FIRST: MQLONG = 8001;
pub const MQGA_LAST: MQLONG = 9000;
pub const MQOO_BIND_AS_Q_DEF: MQLONG = 0;
pub const MQOO_READ_AHEAD_AS_Q_DEF: MQLONG = 0;
pub const MQOO_INPUT_AS_Q_DEF: MQLONG = 1;
pub const MQOO_INPUT_SHARED: MQLONG = 2;
pub const MQOO_INPUT_EXCLUSIVE: MQLONG = 4;
pub const MQOO_BROWSE: MQLONG = 8;
pub const MQOO_OUTPUT: MQLONG = 16;
pub const MQOO_INQUIRE: MQLONG = 32;
pub const MQOO_SET: MQLONG = 64;
pub const MQOO_SAVE_ALL_CONTEXT: MQLONG = 128;
pub const MQOO_PASS_IDENTITY_CONTEXT: MQLONG = 256;
pub const MQOO_PASS_ALL_CONTEXT: MQLONG = 512;
pub const MQOO_SET_IDENTITY_CONTEXT: MQLONG = 1024;
pub const MQOO_SET_ALL_CONTEXT: MQLONG = 2048;
pub const MQOO_ALTERNATE_USER_AUTHORITY: MQLONG = 4096;
pub const MQOO_FAIL_IF_QUIESCING: MQLONG = 8192;
pub const MQOO_BIND_ON_OPEN: MQLONG = 16384;
pub const MQOO_BIND_ON_GROUP: MQLONG = 4194304;
pub const MQOO_BIND_NOT_FIXED: MQLONG = 32768;
pub const MQOO_CO_OP: MQLONG = 131072;
pub const MQOO_NO_READ_AHEAD: MQLONG = 524288;
pub const MQOO_READ_AHEAD: MQLONG = 1048576;
pub const MQOO_NO_MULTICAST: MQLONG = 2097152;
pub const MQOO_RESOLVE_LOCAL_Q: MQLONG = 262144;
pub const MQOO_RESOLVE_LOCAL_TOPIC: MQLONG = 262144;
pub const MQOO_RESOLVE_NAMES: MQLONG = 65536;
pub const MQTYPE_AS_SET: MQLONG = 0;
pub const MQTYPE_NULL: MQLONG = 2;
pub const MQTYPE_BOOLEAN: MQLONG = 4;
pub const MQTYPE_BYTE_STRING: MQLONG = 8;
pub const MQTYPE_INT8: MQLONG = 16;
pub const MQTYPE_INT16: MQLONG = 32;
pub const MQTYPE_INT32: MQLONG = 64;
pub const MQTYPE_LONG: MQLONG = 64;
pub const MQTYPE_INT64: MQLONG = 128;
pub const MQTYPE_FLOAT32: MQLONG = 256;
pub const MQTYPE_FLOAT64: MQLONG = 512;
pub const MQTYPE_STRING: MQLONG = 1024;
pub const MQVL_NULL_TERMINATED: MQLONG = -1;
pub const MQVL_EMPTY_STRING: MQLONG = 0;
pub const MQSTAT_TYPE_ASYNC_ERROR: MQLONG = 0;
pub const MQSTAT_TYPE_RECONNECTION: MQLONG = 1;
pub const MQSTAT_TYPE_RECONNECTION_ERROR: MQLONG = 2;
pub const MQSO_NONE: MQLONG = 0;
pub const MQSO_NON_DURABLE: MQLONG = 0;
pub const MQSO_READ_AHEAD_AS_Q_DEF: MQLONG = 0;
pub const MQSO_ALTER: MQLONG = 1;
pub const MQSO_CREATE: MQLONG = 2;
pub const MQSO_RESUME: MQLONG = 4;
pub const MQSO_DURABLE: MQLONG = 8;
pub const MQSO_GROUP_SUB: MQLONG = 16;
pub const MQSO_MANAGED: MQLONG = 32;
pub const MQSO_SET_IDENTITY_CONTEXT: MQLONG = 64;
pub const MQSO_NO_MULTICAST: MQLONG = 128;
pub const MQSO_FIXED_USERID: MQLONG = 256;
pub const MQSO_ANY_USERID: MQLONG = 512;
pub const MQSO_PUBLICATIONS_ON_REQUEST: MQLONG = 2048;
pub const MQSO_NEW_PUBLICATIONS_ONLY: MQLONG = 4096;
pub const MQSO_FAIL_IF_QUIESCING: MQLONG = 8192;
pub const MQSO_ALTERNATE_USER_AUTHORITY: MQLONG = 262144;
pub const MQSO_WILDCARD_CHAR: MQLONG = 1048576;
pub const MQSO_WILDCARD_TOPIC: MQLONG = 2097152;
pub const MQSO_SET_CORREL_ID: MQLONG = 4194304;
pub const MQSO_SCOPE_QMGR: MQLONG = 67108864;
pub const MQSO_NO_READ_AHEAD: MQLONG = 134217728;
pub const MQSO_READ_AHEAD: MQLONG = 268435456;
pub const MQSR_ACTION_PUBLICATION: MQLONG = 1;
pub const MQCD_VERSION_1: MQLONG = 1;
pub const MQCD_VERSION_2: MQLONG = 2;
pub const MQCD_VERSION_3: MQLONG = 3;
pub const MQCD_VERSION_4: MQLONG = 4;
pub const MQCD_VERSION_5: MQLONG = 5;
pub const MQCD_VERSION_6: MQLONG = 6;
pub const MQCD_VERSION_7: MQLONG = 7;
pub const MQCD_VERSION_8: MQLONG = 8;
pub const MQCD_VERSION_9: MQLONG = 9;
pub const MQCD_VERSION_10: MQLONG = 10;
pub const MQCD_VERSION_11: MQLONG = 11;
pub const MQCD_VERSION_12: MQLONG = 12;
pub const MQCD_CURRENT_VERSION: MQLONG = 12;
pub const MQCD_LENGTH_1: usize = 984;
pub const MQCD_LENGTH_2: usize = 1312;
pub const MQCD_LENGTH_3: usize = 1480;
pub const MQCD_LENGTH_4: usize = 1568;
pub const MQCD_LENGTH_5: usize = 1584;
pub const MQCD_LENGTH_6: usize = 1688;
pub const MQCD_LENGTH_7: usize = 1792;
pub const MQCD_LENGTH_8: usize = 1888;
pub const MQCD_LENGTH_9: usize = 1912;
pub const MQCD_LENGTH_10: usize = 1920;
pub const MQCD_LENGTH_11: usize = 1984;
pub const MQCD_LENGTH_12: usize = 1992;
pub const MQCD_CURRENT_LENGTH: usize = 1992;
pub const MQCHT_SENDER: MQLONG = 1;
pub const MQCHT_SERVER: MQLONG = 2;
pub const MQCHT_RECEIVER: MQLONG = 3;
pub const MQCHT_REQUESTER: MQLONG = 4;
pub const MQCHT_ALL: MQLONG = 5;
pub const MQCHT_CLNTCONN: MQLONG = 6;
pub const MQCHT_SVRCONN: MQLONG = 7;
pub const MQCHT_CLUSRCVR: MQLONG = 8;
pub const MQCHT_CLUSSDR: MQLONG = 9;
pub const MQCHT_MQTT: MQLONG = 10;
pub const MQCHT_AMQP: MQLONG = 11;
pub const MQCOMPRESS_NOT_AVAILABLE: MQLONG = -1;
pub const MQCOMPRESS_NONE: MQLONG = 0;
pub const MQCOMPRESS_RLE: MQLONG = 1;
pub const MQCOMPRESS_ZLIBFAST: MQLONG = 2;
pub const MQCOMPRESS_ZLIBHIGH: MQLONG = 4;
pub const MQCOMPRESS_SYSTEM: MQLONG = 8;
pub const MQCOMPRESS_LZ4FAST: MQLONG = 16;
pub const MQCOMPRESS_LZ4HIGH: MQLONG = 32;
pub const MQCOMPRESS_ANY: MQLONG = 268435455;
pub const MQXPT_ALL: MQLONG = -1;
pub const MQXPT_LOCAL: MQLONG = 0;
pub const MQXPT_LU62: MQLONG = 1;
pub const MQXPT_TCP: MQLONG = 2;
pub const MQXPT_NETBIOS: MQLONG = 3;
pub const MQXPT_SPX: MQLONG = 4;
pub const MQXPT_DECNET: MQLONG = 5;
pub const MQXPT_UDP: MQLONG = 6;
pub const MQPA_DEFAULT: MQLONG = 1;
pub const MQPA_CONTEXT: MQLONG = 2;
pub const MQPA_ONLY_MCA: MQLONG = 3;
pub const MQPA_ALTERNATE_OR_MCA: MQLONG = 4;
pub const MQCDC_SENDER_CONVERSION: MQLONG = 1;
pub const MQCDC_NO_SENDER_CONVERSION: MQLONG = 0;
pub const MQMCAT_PROCESS: MQLONG = 1;
pub const MQMCAT_THREAD: MQLONG = 2;
pub const MQNPMS_NORMAL: MQLONG = 1;
pub const MQNPMS_FAST: MQLONG = 2;
pub const MQSCA_REQUIRED: MQLONG = 0;
pub const MQSCA_OPTIONAL: MQLONG = 1;
pub const MQSCA_NEVER_REQUIRED: MQLONG = 2;
pub const MQKAI_AUTO: MQLONG = -1;
pub const MQCAFTY_NONE: MQLONG = 0;
pub const MQCAFTY_PREFERRED: MQLONG = 1;
pub const MQRCN_NO: MQLONG = 0;
pub const MQRCN_YES: MQLONG = 1;
pub const MQRCN_Q_MGR: MQLONG = 2;
pub const MQRCN_DISABLED: MQLONG = 3;
pub const MQPROTO_MQTTV3: MQLONG = 1;
pub const MQPROTO_HTTP: MQLONG = 2;
pub const MQPROTO_AMQP: MQLONG = 3;
pub const MQPROTO_MQTTV311: MQLONG = 4;
pub const MQSECPROT_NONE: MQLONG = 0;
pub const MQSECPROT_SSLV30: MQLONG = 1;
pub const MQSECPROT_TLSV10: MQLONG = 2;
pub const MQSECPROT_TLSV12: MQLONG = 4;
pub const MQSECPROT_TLSV13: MQLONG = 8;
pub const MQSPL_PASSTHRU: MQLONG = 0;
pub const MQSPL_REMOVE: MQLONG = 1;
pub const MQSPL_AS_POLICY: MQLONG = 2;
#[allow(unsafe_code)]
pub const MQACH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"ACH \0") };
pub const MQACH_VERSION_1: MQLONG = 1;
pub const MQACH_CURRENT_VERSION: MQLONG = 1;
pub const MQACH_LENGTH_1: usize = 72;
pub const MQACH_CURRENT_LENGTH: usize = 72;
#[allow(unsafe_code)]
pub const MQAXC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"AXC \0") };
pub const MQAXC_VERSION_1: MQLONG = 1;
pub const MQAXC_VERSION_2: MQLONG = 2;
pub const MQAXC_CURRENT_VERSION: MQLONG = 2;
pub const MQAXC_LENGTH_1: usize = 392;
pub const MQAXC_LENGTH_2: usize = 424;
pub const MQAXC_CURRENT_LENGTH: usize = 424;
pub const MQXE_OTHER: MQLONG = 0;
pub const MQXE_MCA: MQLONG = 1;
pub const MQXE_MCA_SVRCONN: MQLONG = 2;
pub const MQXE_COMMAND_SERVER: MQLONG = 3;
pub const MQXE_MQSC: MQLONG = 4;
pub const MQXE_MCA_CLNTCONN: MQLONG = 5;
#[allow(unsafe_code)]
pub const MQAXP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"AXP \0") };
pub const MQAXP_VERSION_1: MQLONG = 1;
pub const MQAXP_VERSION_2: MQLONG = 2;
pub const MQAXP_CURRENT_VERSION: MQLONG = 2;
pub const MQAXP_LENGTH_1: usize = 256;
pub const MQAXP_CURRENT_LENGTH: usize = 256;
pub const MQXACT_EXTERNAL: MQLONG = 1;
pub const MQXACT_INTERNAL: MQLONG = 2;
pub const MQXPDA_NONE: &[u8; 49] =
    b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQXF_INIT: MQLONG = 1;
pub const MQXF_TERM: MQLONG = 2;
pub const MQXF_CONN: MQLONG = 3;
pub const MQXF_CONNX: MQLONG = 4;
pub const MQXF_DISC: MQLONG = 5;
pub const MQXF_OPEN: MQLONG = 6;
pub const MQXF_CLOSE: MQLONG = 7;
pub const MQXF_PUT1: MQLONG = 8;
pub const MQXF_PUT: MQLONG = 9;
pub const MQXF_GET: MQLONG = 10;
pub const MQXF_DATA_CONV_ON_GET: MQLONG = 11;
pub const MQXF_INQ: MQLONG = 12;
pub const MQXF_SET: MQLONG = 13;
pub const MQXF_BEGIN: MQLONG = 14;
pub const MQXF_CMIT: MQLONG = 15;
pub const MQXF_BACK: MQLONG = 16;
pub const MQXF_STAT: MQLONG = 18;
pub const MQXF_CB: MQLONG = 19;
pub const MQXF_CTL: MQLONG = 20;
pub const MQXF_CALLBACK: MQLONG = 21;
pub const MQXF_SUB: MQLONG = 22;
pub const MQXF_SUBRQ: MQLONG = 23;
pub const MQXF_XACLOSE: MQLONG = 24;
pub const MQXF_XACOMMIT: MQLONG = 25;
pub const MQXF_XACOMPLETE: MQLONG = 26;
pub const MQXF_XAEND: MQLONG = 27;
pub const MQXF_XAFORGET: MQLONG = 28;
pub const MQXF_XAOPEN: MQLONG = 29;
pub const MQXF_XAPREPARE: MQLONG = 30;
pub const MQXF_XARECOVER: MQLONG = 31;
pub const MQXF_XAROLLBACK: MQLONG = 32;
pub const MQXF_XASTART: MQLONG = 33;
pub const MQXF_AXREG: MQLONG = 34;
pub const MQXF_AXUNREG: MQLONG = 35;
#[allow(unsafe_code)]
pub const MQCXP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CXP \0") };
pub const MQCXP_VERSION_1: MQLONG = 1;
pub const MQCXP_VERSION_2: MQLONG = 2;
pub const MQCXP_VERSION_3: MQLONG = 3;
pub const MQCXP_VERSION_4: MQLONG = 4;
pub const MQCXP_VERSION_5: MQLONG = 5;
pub const MQCXP_VERSION_6: MQLONG = 6;
pub const MQCXP_VERSION_7: MQLONG = 7;
pub const MQCXP_VERSION_8: MQLONG = 8;
pub const MQCXP_VERSION_9: MQLONG = 9;
pub const MQCXP_CURRENT_VERSION: MQLONG = 9;
pub const MQCXP_LENGTH_3: usize = 156;
pub const MQCXP_LENGTH_4: usize = 156;
pub const MQCXP_LENGTH_5: usize = 160;
pub const MQCXP_LENGTH_6: usize = 200;
pub const MQCXP_LENGTH_7: usize = 208;
pub const MQCXP_LENGTH_8: usize = 224;
pub const MQCXP_LENGTH_9: usize = 240;
pub const MQCXP_CURRENT_LENGTH: usize = 240;
pub const MQXR2_PUT_WITH_DEF_ACTION: u32 = 0;
pub const MQXR2_PUT_WITH_DEF_USERID: u32 = 1;
pub const MQXR2_PUT_WITH_MSG_USERID: u32 = 2;
pub const MQXR2_USE_AGENT_BUFFER: u32 = 0;
pub const MQXR2_USE_EXIT_BUFFER: u32 = 4;
pub const MQXR2_DEFAULT_CONTINUATION: u32 = 0;
pub const MQXR2_CONTINUE_CHAIN: u32 = 8;
pub const MQXR2_SUPPRESS_CHAIN: u32 = 16;
pub const MQXR2_STATIC_CACHE: u32 = 0;
pub const MQXR2_DYNAMIC_CACHE: u32 = 32;
pub const MQCF_NONE: MQLONG = 0;
pub const MQCF_DIST_LISTS: MQLONG = 1;
#[allow(unsafe_code)]
pub const MQDXP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"DXP \0") };
pub const MQDXP_VERSION_1: MQLONG = 1;
pub const MQDXP_VERSION_2: MQLONG = 2;
pub const MQDXP_CURRENT_VERSION: MQLONG = 2;
pub const MQDXP_LENGTH_1: usize = 44;
pub const MQDXP_LENGTH_2: usize = 56;
pub const MQDXP_CURRENT_LENGTH: usize = 56;
pub const MQXDR_OK: MQLONG = 0;
pub const MQXDR_CONVERSION_FAILED: MQLONG = 1;
#[allow(unsafe_code)]
pub const MQNXP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"NXP \0") };
pub const MQNXP_VERSION_1: MQLONG = 1;
pub const MQNXP_VERSION_2: MQLONG = 2;
pub const MQNXP_CURRENT_VERSION: MQLONG = 2;
pub const MQNXP_LENGTH_1: usize = 64;
pub const MQNXP_LENGTH_2: usize = 72;
pub const MQNXP_CURRENT_LENGTH: usize = 72;
#[allow(unsafe_code)]
pub const MQPBC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"PBC \0") };
pub const MQPBC_VERSION_1: MQLONG = 1;
pub const MQPBC_VERSION_2: MQLONG = 2;
pub const MQPBC_CURRENT_VERSION: MQLONG = 2;
pub const MQPBC_LENGTH_1: usize = 32;
pub const MQPBC_LENGTH_2: usize = 40;
pub const MQPBC_CURRENT_LENGTH: usize = 40;
#[allow(unsafe_code)]
pub const MQPSXP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"PSXP\0") };
pub const MQPSXP_VERSION_1: MQLONG = 1;
pub const MQPSXP_VERSION_2: MQLONG = 2;
pub const MQPSXP_CURRENT_VERSION: MQLONG = 2;
pub const MQPSXP_LENGTH_1: usize = 176;
pub const MQPSXP_LENGTH_2: usize = 184;
pub const MQPSXP_CURRENT_LENGTH: usize = 184;
#[allow(unsafe_code)]
pub const MQSBC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SBC \0") };
pub const MQSBC_VERSION_1: MQLONG = 1;
pub const MQSBC_CURRENT_VERSION: MQLONG = 1;
pub const MQSBC_LENGTH_1: usize = 288;
pub const MQSBC_CURRENT_LENGTH: usize = 288;
#[allow(unsafe_code)]
pub const MQWDR_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"WDR \0") };
pub const MQWDR_VERSION_1: MQLONG = 1;
pub const MQWDR_VERSION_2: MQLONG = 2;
pub const MQWDR_CURRENT_VERSION: MQLONG = 2;
pub const MQWDR_LENGTH_1: usize = 124;
pub const MQWDR_LENGTH_2: usize = 136;
pub const MQWDR_CURRENT_LENGTH: usize = 136;
pub const MQQMF_REPOSITORY_Q_MGR: MQLONG = 2;
pub const MQQMF_CLUSSDR_USER_DEFINED: MQLONG = 8;
pub const MQQMF_CLUSSDR_AUTO_DEFINED: MQLONG = 16;
pub const MQQMF_AVAILABLE: MQLONG = 32;
pub const MQWDR1_LENGTH_1: usize = 124;
pub const MQWDR1_CURRENT_LENGTH: usize = 124;
pub const MQWDR2_LENGTH_1: usize = 124;
pub const MQWDR2_LENGTH_2: usize = 136;
pub const MQWDR2_CURRENT_LENGTH: usize = 136;
#[allow(unsafe_code)]
pub const MQWQR_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"WQR \0") };
pub const MQWQR_VERSION_1: MQLONG = 1;
pub const MQWQR_VERSION_2: MQLONG = 2;
pub const MQWQR_VERSION_3: MQLONG = 3;
pub const MQWQR_VERSION_4: MQLONG = 4;
pub const MQWQR_CURRENT_VERSION: MQLONG = 4;
pub const MQWQR_LENGTH_1: usize = 200;
pub const MQWQR_LENGTH_2: usize = 208;
pub const MQWQR_LENGTH_3: usize = 212;
pub const MQWQR_LENGTH_4: usize = 216;
pub const MQWQR_CURRENT_LENGTH: usize = 216;
pub const MQQF_LOCAL_Q: MQLONG = 1;
pub const MQQF_CLWL_USEQ_ANY: MQLONG = 64;
pub const MQQF_CLWL_USEQ_LOCAL: MQLONG = 128;
pub const MQWQR1_LENGTH_1: usize = 200;
pub const MQWQR1_CURRENT_LENGTH: usize = 200;
pub const MQWQR2_LENGTH_1: usize = 200;
pub const MQWQR2_LENGTH_2: usize = 208;
pub const MQWQR2_CURRENT_LENGTH: usize = 208;
pub const MQWQR3_LENGTH_1: usize = 200;
pub const MQWQR3_LENGTH_2: usize = 208;
pub const MQWQR3_LENGTH_3: usize = 212;
pub const MQWQR3_CURRENT_LENGTH: usize = 212;
pub const MQWQR4_LENGTH_1: usize = 200;
pub const MQWQR4_LENGTH_2: usize = 208;
pub const MQWQR4_LENGTH_3: usize = 212;
pub const MQWQR4_LENGTH_4: usize = 216;
pub const MQWQR4_CURRENT_LENGTH: usize = 216;
#[allow(unsafe_code)]
pub const MQWXP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"WXP \0") };
pub const MQWXP_VERSION_1: MQLONG = 1;
pub const MQWXP_VERSION_2: MQLONG = 2;
pub const MQWXP_VERSION_3: MQLONG = 3;
pub const MQWXP_VERSION_4: MQLONG = 4;
pub const MQWXP_CURRENT_VERSION: MQLONG = 4;
pub const MQWXP_LENGTH_1: usize = 224;
pub const MQWXP_LENGTH_2: usize = 240;
pub const MQWXP_LENGTH_3: usize = 240;
pub const MQWXP_LENGTH_4: usize = 248;
pub const MQWXP_CURRENT_LENGTH: usize = 248;
pub const MQWXP_PUT_BY_CLUSTER_CHL: MQLONG = 2;
pub const MQWXP1_LENGTH_1: usize = 224;
pub const MQWXP1_CURRENT_LENGTH: usize = 224;
pub const MQWXP2_LENGTH_1: usize = 224;
pub const MQWXP2_LENGTH_2: usize = 240;
pub const MQWXP2_CURRENT_LENGTH: usize = 240;
pub const MQWXP3_LENGTH_1: usize = 224;
pub const MQWXP3_LENGTH_2: usize = 240;
pub const MQWXP3_LENGTH_3: usize = 240;
pub const MQWXP3_CURRENT_LENGTH: usize = 240;
pub const MQWXP4_LENGTH_1: usize = 224;
pub const MQWXP4_LENGTH_2: usize = 240;
pub const MQWXP4_LENGTH_3: usize = 240;
pub const MQWXP4_LENGTH_4: usize = 248;
pub const MQWXP4_CURRENT_LENGTH: usize = 248;
#[allow(unsafe_code)]
pub const MQXEPO_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"XEPO\0") };
pub const MQXEPO_VERSION_1: MQLONG = 1;
pub const MQXEPO_CURRENT_VERSION: MQLONG = 1;
pub const MQXEPO_LENGTH_1: usize = 40;
pub const MQXEPO_CURRENT_LENGTH: usize = 40;
pub const MQXEPO_NONE: MQLONG = 0;
pub const MQXT_API_CROSSING_EXIT: MQLONG = 1;
pub const MQXT_API_EXIT: MQLONG = 2;
pub const MQXT_CHANNEL_SEC_EXIT: MQLONG = 11;
pub const MQXT_CHANNEL_MSG_EXIT: MQLONG = 12;
pub const MQXT_CHANNEL_SEND_EXIT: MQLONG = 13;
pub const MQXT_CHANNEL_RCV_EXIT: MQLONG = 14;
pub const MQXT_CHANNEL_MSG_RETRY_EXIT: MQLONG = 15;
pub const MQXT_CHANNEL_AUTO_DEF_EXIT: MQLONG = 16;
pub const MQXT_CLUSTER_WORKLOAD_EXIT: MQLONG = 20;
pub const MQXT_PUBSUB_ROUTING_EXIT: MQLONG = 21;
pub const MQXT_PUBLISH_EXIT: MQLONG = 22;
pub const MQXT_PRECONNECT_EXIT: MQLONG = 23;
pub const MQXR_BEFORE: MQLONG = 1;
pub const MQXR_AFTER: MQLONG = 2;
pub const MQXR_CONNECTION: MQLONG = 3;
pub const MQXR_BEFORE_CONVERT: MQLONG = 4;
pub const MQXR_INIT: MQLONG = 11;
pub const MQXR_TERM: MQLONG = 12;
pub const MQXR_MSG: MQLONG = 13;
pub const MQXR_XMIT: MQLONG = 14;
pub const MQXR_SEC_MSG: MQLONG = 15;
pub const MQXR_INIT_SEC: MQLONG = 16;
pub const MQXR_RETRY: MQLONG = 17;
pub const MQXR_AUTO_CLUSSDR: MQLONG = 18;
pub const MQXR_AUTO_RECEIVER: MQLONG = 19;
pub const MQXR_CLWL_OPEN: MQLONG = 20;
pub const MQXR_CLWL_PUT: MQLONG = 21;
pub const MQXR_CLWL_MOVE: MQLONG = 22;
pub const MQXR_CLWL_REPOS: MQLONG = 23;
pub const MQXR_CLWL_REPOS_MOVE: MQLONG = 24;
pub const MQXR_END_BATCH: MQLONG = 25;
pub const MQXR_ACK_RECEIVED: MQLONG = 26;
pub const MQXR_AUTO_SVRCONN: MQLONG = 27;
pub const MQXR_AUTO_CLUSRCVR: MQLONG = 28;
pub const MQXR_SEC_PARMS: MQLONG = 29;
pub const MQXR_PUBLICATION: MQLONG = 30;
pub const MQXR_PRECONNECT: MQLONG = 31;
pub const MQXCC_OK: MQLONG = 0;
pub const MQXCC_SUPPRESS_FUNCTION: MQLONG = -1;
pub const MQXCC_SKIP_FUNCTION: MQLONG = -2;
pub const MQXCC_SEND_AND_REQUEST_SEC_MSG: MQLONG = -3;
pub const MQXCC_SEND_SEC_MSG: MQLONG = -4;
pub const MQXCC_SUPPRESS_EXIT: MQLONG = -5;
pub const MQXCC_CLOSE_CHANNEL: MQLONG = -6;
pub const MQXCC_REQUEST_ACK: MQLONG = -7;
pub const MQXCC_FAILED: MQLONG = -8;
pub const MQXUA_NONE: &[u8; 17] = b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
pub const MQCLCT_STATIC: MQLONG = 0;
pub const MQCLCT_DYNAMIC: MQLONG = 1;
pub const MQMCEV_PACKET_LOSS: MQLONG = 1;
pub const MQMCEV_HEARTBEAT_TIMEOUT: MQLONG = 2;
pub const MQMCEV_VERSION_CONFLICT: MQLONG = 3;
pub const MQMCEV_RELIABILITY: MQLONG = 4;
pub const MQMCEV_CLOSED_TRANS: MQLONG = 5;
pub const MQMCEV_STREAM_ERROR: MQLONG = 6;
pub const MQMCEV_NEW_SOURCE: MQLONG = 10;
pub const MQMCEV_RECEIVE_QUEUE_TRIMMED: MQLONG = 11;
pub const MQMCEV_PACKET_LOSS_NACK_EXPIRE: MQLONG = 12;
pub const MQMCEV_ACK_RETRIES_EXCEEDED: MQLONG = 13;
pub const MQMCEV_STREAM_SUSPEND_NACK: MQLONG = 14;
pub const MQMCEV_STREAM_RESUME_NACK: MQLONG = 15;
pub const MQMCEV_STREAM_EXPELLED: MQLONG = 16;
pub const MQMCEV_FIRST_MESSAGE: MQLONG = 20;
pub const MQMCEV_LATE_JOIN_FAILURE: MQLONG = 21;
pub const MQMCEV_MESSAGE_LOSS: MQLONG = 22;
pub const MQMCEV_SEND_PACKET_FAILURE: MQLONG = 23;
pub const MQMCEV_REPAIR_DELAY: MQLONG = 24;
pub const MQMCEV_MEMORY_ALERT_ON: MQLONG = 25;
pub const MQMCEV_MEMORY_ALERT_OFF: MQLONG = 26;
pub const MQMCEV_NACK_ALERT_ON: MQLONG = 27;
pub const MQMCEV_NACK_ALERT_OFF: MQLONG = 28;
pub const MQMCEV_REPAIR_ALERT_ON: MQLONG = 29;
pub const MQMCEV_REPAIR_ALERT_OFF: MQLONG = 30;
pub const MQMCEV_RELIABILITY_CHANGED: MQLONG = 31;
pub const MQMCEV_SHM_DEST_UNUSABLE: MQLONG = 80;
pub const MQMCEV_SHM_PORT_UNUSABLE: MQLONG = 81;
pub const MQMCEV_CCT_GETTIME_FAILED: MQLONG = 110;
pub const MQMCEV_DEST_INTERFACE_FAILURE: MQLONG = 120;
pub const MQMCEV_DEST_INTERFACE_FAILOVER: MQLONG = 121;
pub const MQMCEV_PORT_INTERFACE_FAILURE: MQLONG = 122;
pub const MQMCEV_PORT_INTERFACE_FAILOVER: MQLONG = 123;
pub const MQDCC_DEFAULT_CONVERSION: MQLONG = 1;
pub const MQDCC_FILL_TARGET_BUFFER: MQLONG = 2;
pub const MQDCC_INT_DEFAULT_CONVERSION: MQLONG = 4;
pub const MQDCC_SOURCE_ENC_NATIVE: MQLONG = 32;
pub const MQDCC_SOURCE_ENC_NORMAL: MQLONG = 16;
pub const MQDCC_SOURCE_ENC_REVERSED: MQLONG = 32;
pub const MQDCC_SOURCE_ENC_UNDEFINED: MQLONG = 0;
pub const MQDCC_TARGET_ENC_NATIVE: MQLONG = 512;
pub const MQDCC_TARGET_ENC_NORMAL: MQLONG = 256;
pub const MQDCC_TARGET_ENC_REVERSED: MQLONG = 512;
pub const MQDCC_TARGET_ENC_UNDEFINED: MQLONG = 0;
pub const MQDCC_NONE: MQLONG = 0;
pub const MQDCC_SOURCE_ENC_MASK: u32 = 240;
pub const MQDCC_TARGET_ENC_MASK: u32 = 3840;
pub const MQDCC_SOURCE_ENC_FACTOR: MQLONG = 16;
pub const MQDCC_TARGET_ENC_FACTOR: MQLONG = 256;
pub const MQCBO_NONE: MQLONG = 0;
pub const MQCBO_USER_BAG: MQLONG = 0;
pub const MQCBO_ADMIN_BAG: MQLONG = 1;
pub const MQCBO_COMMAND_BAG: MQLONG = 16;
pub const MQCBO_SYSTEM_BAG: MQLONG = 32;
pub const MQCBO_GROUP_BAG: MQLONG = 64;
pub const MQCBO_LIST_FORM_ALLOWED: MQLONG = 2;
pub const MQCBO_LIST_FORM_INHIBITED: MQLONG = 0;
pub const MQCBO_REORDER_AS_REQUIRED: MQLONG = 4;
pub const MQCBO_DO_NOT_REORDER: MQLONG = 0;
pub const MQCBO_CHECK_SELECTORS: MQLONG = 8;
pub const MQCBO_DO_NOT_CHECK_SELECTORS: MQLONG = 0;
pub const MQBL_NULL_TERMINATED: MQLONG = -1;
pub const MQITEM_INTEGER: MQLONG = 1;
pub const MQITEM_STRING: MQLONG = 2;
pub const MQITEM_BAG: MQLONG = 3;
pub const MQITEM_BYTE_STRING: MQLONG = 4;
pub const MQITEM_INTEGER_FILTER: MQLONG = 5;
pub const MQITEM_STRING_FILTER: MQLONG = 6;
pub const MQITEM_INTEGER64: MQLONG = 7;
pub const MQITEM_BYTE_STRING_FILTER: MQLONG = 8;
pub const MQIT_INTEGER: MQLONG = 1;
pub const MQIT_STRING: MQLONG = 2;
pub const MQIT_BAG: MQLONG = 3;
pub const MQHA_FIRST: MQLONG = 4001;
pub const MQHA_BAG_HANDLE: MQLONG = 4001;
pub const MQHA_LAST_USED: MQLONG = 4001;
pub const MQHA_LAST: MQLONG = 6000;
pub const MQOA_FIRST: MQLONG = 1;
pub const MQOA_LAST: MQLONG = 9000;
pub const MQIASY_FIRST: MQLONG = -1;
pub const MQIASY_CODED_CHAR_SET_ID: MQLONG = -1;
pub const MQIASY_TYPE: MQLONG = -2;
pub const MQIASY_COMMAND: MQLONG = -3;
pub const MQIASY_MSG_SEQ_NUMBER: MQLONG = -4;
pub const MQIASY_CONTROL: MQLONG = -5;
pub const MQIASY_COMP_CODE: MQLONG = -6;
pub const MQIASY_REASON: MQLONG = -7;
pub const MQIASY_BAG_OPTIONS: MQLONG = -8;
pub const MQIASY_VERSION: MQLONG = -9;
pub const MQIASY_LAST_USED: MQLONG = -9;
pub const MQIASY_LAST: MQLONG = -2000;
pub const MQSEL_ANY_SELECTOR: MQLONG = -30001;
pub const MQSEL_ANY_USER_SELECTOR: MQLONG = -30002;
pub const MQSEL_ANY_SYSTEM_SELECTOR: MQLONG = -30003;
pub const MQSEL_ALL_SELECTORS: MQLONG = -30001;
pub const MQSEL_ALL_USER_SELECTORS: MQLONG = -30002;
pub const MQSEL_ALL_SYSTEM_SELECTORS: MQLONG = -30003;
pub const MQIND_NONE: MQLONG = -1;
pub const MQIND_ALL: MQLONG = -2;
pub const MQHB_UNUSABLE_HBAG: MQLONG = -1;
pub const MQHB_NONE: MQLONG = -2;
pub const MQCFH_STRUC_LENGTH: usize = 36;
pub const MQCFH_VERSION_1: MQLONG = 1;
pub const MQCFH_VERSION_2: MQLONG = 2;
pub const MQCFH_VERSION_3: MQLONG = 3;
pub const MQCFH_CURRENT_VERSION: MQLONG = 3;
pub const MQCMD_NONE: MQLONG = 0;
pub const MQCMD_CHANGE_Q_MGR: MQLONG = 1;
pub const MQCMD_INQUIRE_Q_MGR: MQLONG = 2;
pub const MQCMD_CHANGE_PROCESS: MQLONG = 3;
pub const MQCMD_COPY_PROCESS: MQLONG = 4;
pub const MQCMD_CREATE_PROCESS: MQLONG = 5;
pub const MQCMD_DELETE_PROCESS: MQLONG = 6;
pub const MQCMD_INQUIRE_PROCESS: MQLONG = 7;
pub const MQCMD_CHANGE_Q: MQLONG = 8;
pub const MQCMD_CLEAR_Q: MQLONG = 9;
pub const MQCMD_COPY_Q: MQLONG = 10;
pub const MQCMD_CREATE_Q: MQLONG = 11;
pub const MQCMD_DELETE_Q: MQLONG = 12;
pub const MQCMD_INQUIRE_Q: MQLONG = 13;
pub const MQCMD_REFRESH_Q_MGR: MQLONG = 16;
pub const MQCMD_RESET_Q_STATS: MQLONG = 17;
pub const MQCMD_INQUIRE_Q_NAMES: MQLONG = 18;
pub const MQCMD_INQUIRE_PROCESS_NAMES: MQLONG = 19;
pub const MQCMD_INQUIRE_CHANNEL_NAMES: MQLONG = 20;
pub const MQCMD_CHANGE_CHANNEL: MQLONG = 21;
pub const MQCMD_COPY_CHANNEL: MQLONG = 22;
pub const MQCMD_CREATE_CHANNEL: MQLONG = 23;
pub const MQCMD_DELETE_CHANNEL: MQLONG = 24;
pub const MQCMD_INQUIRE_CHANNEL: MQLONG = 25;
pub const MQCMD_PING_CHANNEL: MQLONG = 26;
pub const MQCMD_RESET_CHANNEL: MQLONG = 27;
pub const MQCMD_START_CHANNEL: MQLONG = 28;
pub const MQCMD_STOP_CHANNEL: MQLONG = 29;
pub const MQCMD_START_CHANNEL_INIT: MQLONG = 30;
pub const MQCMD_START_CHANNEL_LISTENER: MQLONG = 31;
pub const MQCMD_CHANGE_NAMELIST: MQLONG = 32;
pub const MQCMD_COPY_NAMELIST: MQLONG = 33;
pub const MQCMD_CREATE_NAMELIST: MQLONG = 34;
pub const MQCMD_DELETE_NAMELIST: MQLONG = 35;
pub const MQCMD_INQUIRE_NAMELIST: MQLONG = 36;
pub const MQCMD_INQUIRE_NAMELIST_NAMES: MQLONG = 37;
pub const MQCMD_ESCAPE: MQLONG = 38;
pub const MQCMD_RESOLVE_CHANNEL: MQLONG = 39;
pub const MQCMD_PING_Q_MGR: MQLONG = 40;
pub const MQCMD_INQUIRE_Q_STATUS: MQLONG = 41;
pub const MQCMD_INQUIRE_CHANNEL_STATUS: MQLONG = 42;
pub const MQCMD_CONFIG_EVENT: MQLONG = 43;
pub const MQCMD_Q_MGR_EVENT: MQLONG = 44;
pub const MQCMD_PERFM_EVENT: MQLONG = 45;
pub const MQCMD_CHANNEL_EVENT: MQLONG = 46;
pub const MQCMD_DELETE_PUBLICATION: MQLONG = 60;
pub const MQCMD_DEREGISTER_PUBLISHER: MQLONG = 61;
pub const MQCMD_DEREGISTER_SUBSCRIBER: MQLONG = 62;
pub const MQCMD_PUBLISH: MQLONG = 63;
pub const MQCMD_REGISTER_PUBLISHER: MQLONG = 64;
pub const MQCMD_REGISTER_SUBSCRIBER: MQLONG = 65;
pub const MQCMD_REQUEST_UPDATE: MQLONG = 66;
pub const MQCMD_BROKER_INTERNAL: MQLONG = 67;
pub const MQCMD_ACTIVITY_MSG: MQLONG = 69;
pub const MQCMD_INQUIRE_CLUSTER_Q_MGR: MQLONG = 70;
pub const MQCMD_RESUME_Q_MGR_CLUSTER: MQLONG = 71;
pub const MQCMD_SUSPEND_Q_MGR_CLUSTER: MQLONG = 72;
pub const MQCMD_REFRESH_CLUSTER: MQLONG = 73;
pub const MQCMD_RESET_CLUSTER: MQLONG = 74;
pub const MQCMD_TRACE_ROUTE: MQLONG = 75;
pub const MQCMD_REFRESH_SECURITY: MQLONG = 78;
pub const MQCMD_CHANGE_AUTH_INFO: MQLONG = 79;
pub const MQCMD_COPY_AUTH_INFO: MQLONG = 80;
pub const MQCMD_CREATE_AUTH_INFO: MQLONG = 81;
pub const MQCMD_DELETE_AUTH_INFO: MQLONG = 82;
pub const MQCMD_INQUIRE_AUTH_INFO: MQLONG = 83;
pub const MQCMD_INQUIRE_AUTH_INFO_NAMES: MQLONG = 84;
pub const MQCMD_INQUIRE_CONNECTION: MQLONG = 85;
pub const MQCMD_STOP_CONNECTION: MQLONG = 86;
pub const MQCMD_INQUIRE_AUTH_RECS: MQLONG = 87;
pub const MQCMD_INQUIRE_ENTITY_AUTH: MQLONG = 88;
pub const MQCMD_DELETE_AUTH_REC: MQLONG = 89;
pub const MQCMD_SET_AUTH_REC: MQLONG = 90;
pub const MQCMD_LOGGER_EVENT: MQLONG = 91;
pub const MQCMD_RESET_Q_MGR: MQLONG = 92;
pub const MQCMD_CHANGE_LISTENER: MQLONG = 93;
pub const MQCMD_COPY_LISTENER: MQLONG = 94;
pub const MQCMD_CREATE_LISTENER: MQLONG = 95;
pub const MQCMD_DELETE_LISTENER: MQLONG = 96;
pub const MQCMD_INQUIRE_LISTENER: MQLONG = 97;
pub const MQCMD_INQUIRE_LISTENER_STATUS: MQLONG = 98;
pub const MQCMD_COMMAND_EVENT: MQLONG = 99;
pub const MQCMD_CHANGE_SECURITY: MQLONG = 100;
pub const MQCMD_CHANGE_CF_STRUC: MQLONG = 101;
pub const MQCMD_CHANGE_STG_CLASS: MQLONG = 102;
pub const MQCMD_CHANGE_TRACE: MQLONG = 103;
pub const MQCMD_ARCHIVE_LOG: MQLONG = 104;
pub const MQCMD_BACKUP_CF_STRUC: MQLONG = 105;
pub const MQCMD_CREATE_BUFFER_POOL: MQLONG = 106;
pub const MQCMD_CREATE_PAGE_SET: MQLONG = 107;
pub const MQCMD_CREATE_CF_STRUC: MQLONG = 108;
pub const MQCMD_CREATE_STG_CLASS: MQLONG = 109;
pub const MQCMD_COPY_CF_STRUC: MQLONG = 110;
pub const MQCMD_COPY_STG_CLASS: MQLONG = 111;
pub const MQCMD_DELETE_CF_STRUC: MQLONG = 112;
pub const MQCMD_DELETE_STG_CLASS: MQLONG = 113;
pub const MQCMD_INQUIRE_ARCHIVE: MQLONG = 114;
pub const MQCMD_INQUIRE_CF_STRUC: MQLONG = 115;
pub const MQCMD_INQUIRE_CF_STRUC_STATUS: MQLONG = 116;
pub const MQCMD_INQUIRE_CMD_SERVER: MQLONG = 117;
pub const MQCMD_INQUIRE_CHANNEL_INIT: MQLONG = 118;
pub const MQCMD_INQUIRE_QSG: MQLONG = 119;
pub const MQCMD_INQUIRE_LOG: MQLONG = 120;
pub const MQCMD_INQUIRE_SECURITY: MQLONG = 121;
pub const MQCMD_INQUIRE_STG_CLASS: MQLONG = 122;
pub const MQCMD_INQUIRE_SYSTEM: MQLONG = 123;
pub const MQCMD_INQUIRE_THREAD: MQLONG = 124;
pub const MQCMD_INQUIRE_TRACE: MQLONG = 125;
pub const MQCMD_INQUIRE_USAGE: MQLONG = 126;
pub const MQCMD_MOVE_Q: MQLONG = 127;
pub const MQCMD_RECOVER_BSDS: MQLONG = 128;
pub const MQCMD_RECOVER_CF_STRUC: MQLONG = 129;
pub const MQCMD_RESET_TPIPE: MQLONG = 130;
pub const MQCMD_RESOLVE_INDOUBT: MQLONG = 131;
pub const MQCMD_RESUME_Q_MGR: MQLONG = 132;
pub const MQCMD_REVERIFY_SECURITY: MQLONG = 133;
pub const MQCMD_SET_ARCHIVE: MQLONG = 134;
pub const MQCMD_SET_LOG: MQLONG = 136;
pub const MQCMD_SET_SYSTEM: MQLONG = 137;
pub const MQCMD_START_CMD_SERVER: MQLONG = 138;
pub const MQCMD_START_Q_MGR: MQLONG = 139;
pub const MQCMD_START_TRACE: MQLONG = 140;
pub const MQCMD_STOP_CHANNEL_INIT: MQLONG = 141;
pub const MQCMD_STOP_CHANNEL_LISTENER: MQLONG = 142;
pub const MQCMD_STOP_CMD_SERVER: MQLONG = 143;
pub const MQCMD_STOP_Q_MGR: MQLONG = 144;
pub const MQCMD_STOP_TRACE: MQLONG = 145;
pub const MQCMD_SUSPEND_Q_MGR: MQLONG = 146;
pub const MQCMD_INQUIRE_CF_STRUC_NAMES: MQLONG = 147;
pub const MQCMD_INQUIRE_STG_CLASS_NAMES: MQLONG = 148;
pub const MQCMD_CHANGE_SERVICE: MQLONG = 149;
pub const MQCMD_COPY_SERVICE: MQLONG = 150;
pub const MQCMD_CREATE_SERVICE: MQLONG = 151;
pub const MQCMD_DELETE_SERVICE: MQLONG = 152;
pub const MQCMD_INQUIRE_SERVICE: MQLONG = 153;
pub const MQCMD_INQUIRE_SERVICE_STATUS: MQLONG = 154;
pub const MQCMD_START_SERVICE: MQLONG = 155;
pub const MQCMD_STOP_SERVICE: MQLONG = 156;
pub const MQCMD_DELETE_BUFFER_POOL: MQLONG = 157;
pub const MQCMD_DELETE_PAGE_SET: MQLONG = 158;
pub const MQCMD_CHANGE_BUFFER_POOL: MQLONG = 159;
pub const MQCMD_CHANGE_PAGE_SET: MQLONG = 160;
pub const MQCMD_INQUIRE_Q_MGR_STATUS: MQLONG = 161;
pub const MQCMD_CREATE_LOG: MQLONG = 162;
pub const MQCMD_STATISTICS_MQI: MQLONG = 164;
pub const MQCMD_STATISTICS_Q: MQLONG = 165;
pub const MQCMD_STATISTICS_CHANNEL: MQLONG = 166;
pub const MQCMD_ACCOUNTING_MQI: MQLONG = 167;
pub const MQCMD_ACCOUNTING_Q: MQLONG = 168;
pub const MQCMD_INQUIRE_AUTH_SERVICE: MQLONG = 169;
pub const MQCMD_CHANGE_TOPIC: MQLONG = 170;
pub const MQCMD_COPY_TOPIC: MQLONG = 171;
pub const MQCMD_CREATE_TOPIC: MQLONG = 172;
pub const MQCMD_DELETE_TOPIC: MQLONG = 173;
pub const MQCMD_INQUIRE_TOPIC: MQLONG = 174;
pub const MQCMD_INQUIRE_TOPIC_NAMES: MQLONG = 175;
pub const MQCMD_INQUIRE_SUBSCRIPTION: MQLONG = 176;
pub const MQCMD_CREATE_SUBSCRIPTION: MQLONG = 177;
pub const MQCMD_CHANGE_SUBSCRIPTION: MQLONG = 178;
pub const MQCMD_DELETE_SUBSCRIPTION: MQLONG = 179;
pub const MQCMD_COPY_SUBSCRIPTION: MQLONG = 181;
pub const MQCMD_INQUIRE_SUB_STATUS: MQLONG = 182;
pub const MQCMD_INQUIRE_TOPIC_STATUS: MQLONG = 183;
pub const MQCMD_CLEAR_TOPIC_STRING: MQLONG = 184;
pub const MQCMD_INQUIRE_PUBSUB_STATUS: MQLONG = 185;
pub const MQCMD_INQUIRE_SMDS: MQLONG = 186;
pub const MQCMD_CHANGE_SMDS: MQLONG = 187;
pub const MQCMD_RESET_SMDS: MQLONG = 188;
pub const MQCMD_CREATE_COMM_INFO: MQLONG = 190;
pub const MQCMD_INQUIRE_COMM_INFO: MQLONG = 191;
pub const MQCMD_CHANGE_COMM_INFO: MQLONG = 192;
pub const MQCMD_COPY_COMM_INFO: MQLONG = 193;
pub const MQCMD_DELETE_COMM_INFO: MQLONG = 194;
pub const MQCMD_PURGE_CHANNEL: MQLONG = 195;
pub const MQCMD_MQXR_DIAGNOSTICS: MQLONG = 196;
pub const MQCMD_START_SMDSCONN: MQLONG = 197;
pub const MQCMD_STOP_SMDSCONN: MQLONG = 198;
pub const MQCMD_INQUIRE_SMDSCONN: MQLONG = 199;
pub const MQCMD_INQUIRE_MQXR_STATUS: MQLONG = 200;
pub const MQCMD_START_CLIENT_TRACE: MQLONG = 201;
pub const MQCMD_STOP_CLIENT_TRACE: MQLONG = 202;
pub const MQCMD_SET_CHLAUTH_REC: MQLONG = 203;
pub const MQCMD_INQUIRE_CHLAUTH_RECS: MQLONG = 204;
pub const MQCMD_INQUIRE_PROT_POLICY: MQLONG = 205;
pub const MQCMD_CREATE_PROT_POLICY: MQLONG = 206;
pub const MQCMD_DELETE_PROT_POLICY: MQLONG = 207;
pub const MQCMD_CHANGE_PROT_POLICY: MQLONG = 208;
pub const MQCMD_SET_PROT_POLICY: MQLONG = 208;
pub const MQCMD_ACTIVITY_TRACE: MQLONG = 209;
pub const MQCMD_RESET_CF_STRUC: MQLONG = 213;
pub const MQCMD_INQUIRE_XR_CAPABILITY: MQLONG = 214;
pub const MQCMD_INQUIRE_AMQP_CAPABILITY: MQLONG = 216;
pub const MQCMD_AMQP_DIAGNOSTICS: MQLONG = 217;
pub const MQCMD_INTER_Q_MGR_STATUS: MQLONG = 218;
pub const MQCMD_INTER_Q_MGR_BALANCE: MQLONG = 219;
pub const MQCMD_INQUIRE_APPL_STATUS: MQLONG = 220;
pub const MQCFC_LAST: MQLONG = 1;
pub const MQCFC_NOT_LAST: MQLONG = 0;
pub const MQRCCF_CFH_TYPE_ERROR: MQLONG = 3001;
pub const MQRCCF_CFH_LENGTH_ERROR: MQLONG = 3002;
pub const MQRCCF_CFH_VERSION_ERROR: MQLONG = 3003;
pub const MQRCCF_CFH_MSG_SEQ_NUMBER_ERR: MQLONG = 3004;
pub const MQRCCF_CFH_CONTROL_ERROR: MQLONG = 3005;
pub const MQRCCF_CFH_PARM_COUNT_ERROR: MQLONG = 3006;
pub const MQRCCF_CFH_COMMAND_ERROR: MQLONG = 3007;
pub const MQRCCF_COMMAND_FAILED: MQLONG = 3008;
pub const MQRCCF_CFIN_LENGTH_ERROR: MQLONG = 3009;
pub const MQRCCF_CFST_LENGTH_ERROR: MQLONG = 3010;
pub const MQRCCF_CFST_STRING_LENGTH_ERR: usize = 3011;
pub const MQRCCF_FORCE_VALUE_ERROR: MQLONG = 3012;
pub const MQRCCF_STRUCTURE_TYPE_ERROR: MQLONG = 3013;
pub const MQRCCF_CFIN_PARM_ID_ERROR: MQLONG = 3014;
pub const MQRCCF_CFST_PARM_ID_ERROR: MQLONG = 3015;
pub const MQRCCF_MSG_LENGTH_ERROR: MQLONG = 3016;
pub const MQRCCF_CFIN_DUPLICATE_PARM: MQLONG = 3017;
pub const MQRCCF_CFST_DUPLICATE_PARM: MQLONG = 3018;
pub const MQRCCF_PARM_COUNT_TOO_SMALL: MQLONG = 3019;
pub const MQRCCF_PARM_COUNT_TOO_BIG: MQLONG = 3020;
pub const MQRCCF_Q_ALREADY_IN_CELL: MQLONG = 3021;
pub const MQRCCF_Q_TYPE_ERROR: MQLONG = 3022;
pub const MQRCCF_MD_FORMAT_ERROR: MQLONG = 3023;
pub const MQRCCF_CFSL_LENGTH_ERROR: MQLONG = 3024;
pub const MQRCCF_REPLACE_VALUE_ERROR: MQLONG = 3025;
pub const MQRCCF_CFIL_DUPLICATE_VALUE: MQLONG = 3026;
pub const MQRCCF_CFIL_COUNT_ERROR: MQLONG = 3027;
pub const MQRCCF_CFIL_LENGTH_ERROR: MQLONG = 3028;
pub const MQRCCF_QUIESCE_VALUE_ERROR: MQLONG = 3029;
pub const MQRCCF_MODE_VALUE_ERROR: MQLONG = 3029;
pub const MQRCCF_MSG_SEQ_NUMBER_ERROR: MQLONG = 3030;
pub const MQRCCF_PING_DATA_COUNT_ERROR: MQLONG = 3031;
pub const MQRCCF_PING_DATA_COMPARE_ERROR: MQLONG = 3032;
pub const MQRCCF_CFSL_PARM_ID_ERROR: MQLONG = 3033;
pub const MQRCCF_CHANNEL_TYPE_ERROR: MQLONG = 3034;
pub const MQRCCF_PARM_SEQUENCE_ERROR: MQLONG = 3035;
pub const MQRCCF_XMIT_PROTOCOL_TYPE_ERR: MQLONG = 3036;
pub const MQRCCF_BATCH_SIZE_ERROR: MQLONG = 3037;
pub const MQRCCF_DISC_INT_ERROR: MQLONG = 3038;
pub const MQRCCF_SHORT_RETRY_ERROR: MQLONG = 3039;
pub const MQRCCF_SHORT_TIMER_ERROR: MQLONG = 3040;
pub const MQRCCF_LONG_RETRY_ERROR: MQLONG = 3041;
pub const MQRCCF_LONG_TIMER_ERROR: MQLONG = 3042;
pub const MQRCCF_SEQ_NUMBER_WRAP_ERROR: MQLONG = 3043;
pub const MQRCCF_MAX_MSG_LENGTH_ERROR: MQLONG = 3044;
pub const MQRCCF_PUT_AUTH_ERROR: MQLONG = 3045;
pub const MQRCCF_PURGE_VALUE_ERROR: MQLONG = 3046;
pub const MQRCCF_CFIL_PARM_ID_ERROR: MQLONG = 3047;
pub const MQRCCF_MSG_TRUNCATED: MQLONG = 3048;
pub const MQRCCF_CCSID_ERROR: MQLONG = 3049;
pub const MQRCCF_ENCODING_ERROR: MQLONG = 3050;
pub const MQRCCF_QUEUES_VALUE_ERROR: MQLONG = 3051;
pub const MQRCCF_DATA_CONV_VALUE_ERROR: MQLONG = 3052;
pub const MQRCCF_INDOUBT_VALUE_ERROR: MQLONG = 3053;
pub const MQRCCF_ESCAPE_TYPE_ERROR: MQLONG = 3054;
pub const MQRCCF_REPOS_VALUE_ERROR: MQLONG = 3055;
pub const MQRCCF_CHANNEL_TABLE_ERROR: MQLONG = 3062;
pub const MQRCCF_MCA_TYPE_ERROR: MQLONG = 3063;
pub const MQRCCF_CHL_INST_TYPE_ERROR: MQLONG = 3064;
pub const MQRCCF_CHL_STATUS_NOT_FOUND: MQLONG = 3065;
pub const MQRCCF_CFSL_DUPLICATE_PARM: MQLONG = 3066;
pub const MQRCCF_CFSL_TOTAL_LENGTH_ERROR: MQLONG = 3067;
pub const MQRCCF_CFSL_COUNT_ERROR: MQLONG = 3068;
pub const MQRCCF_CFSL_STRING_LENGTH_ERR: usize = 3069;
pub const MQRCCF_BROKER_DELETED: MQLONG = 3070;
pub const MQRCCF_STREAM_ERROR: MQLONG = 3071;
pub const MQRCCF_TOPIC_ERROR: MQLONG = 3072;
pub const MQRCCF_NOT_REGISTERED: MQLONG = 3073;
pub const MQRCCF_Q_MGR_NAME_ERROR: MQLONG = 3074;
pub const MQRCCF_INCORRECT_STREAM: MQLONG = 3075;
pub const MQRCCF_Q_NAME_ERROR: MQLONG = 3076;
pub const MQRCCF_NO_RETAINED_MSG: MQLONG = 3077;
pub const MQRCCF_DUPLICATE_IDENTITY: MQLONG = 3078;
pub const MQRCCF_INCORRECT_Q: MQLONG = 3079;
pub const MQRCCF_CORREL_ID_ERROR: MQLONG = 3080;
pub const MQRCCF_NOT_AUTHORIZED: MQLONG = 3081;
pub const MQRCCF_UNKNOWN_STREAM: MQLONG = 3082;
pub const MQRCCF_REG_OPTIONS_ERROR: MQLONG = 3083;
pub const MQRCCF_PUB_OPTIONS_ERROR: MQLONG = 3084;
pub const MQRCCF_UNKNOWN_BROKER: MQLONG = 3085;
pub const MQRCCF_Q_MGR_CCSID_ERROR: MQLONG = 3086;
pub const MQRCCF_DEL_OPTIONS_ERROR: MQLONG = 3087;
pub const MQRCCF_CLUSTER_NAME_CONFLICT: MQLONG = 3088;
pub const MQRCCF_REPOS_NAME_CONFLICT: MQLONG = 3089;
pub const MQRCCF_CLUSTER_Q_USAGE_ERROR: MQLONG = 3090;
pub const MQRCCF_ACTION_VALUE_ERROR: MQLONG = 3091;
pub const MQRCCF_COMMS_LIBRARY_ERROR: MQLONG = 3092;
pub const MQRCCF_NETBIOS_NAME_ERROR: MQLONG = 3093;
pub const MQRCCF_BROKER_COMMAND_FAILED: MQLONG = 3094;
pub const MQRCCF_CFST_CONFLICTING_PARM: MQLONG = 3095;
pub const MQRCCF_PATH_NOT_VALID: MQLONG = 3096;
pub const MQRCCF_PARM_SYNTAX_ERROR: MQLONG = 3097;
pub const MQRCCF_PWD_LENGTH_ERROR: MQLONG = 3098;
pub const MQRCCF_FILTER_ERROR: MQLONG = 3150;
pub const MQRCCF_WRONG_USER: MQLONG = 3151;
pub const MQRCCF_DUPLICATE_SUBSCRIPTION: MQLONG = 3152;
pub const MQRCCF_SUB_NAME_ERROR: MQLONG = 3153;
pub const MQRCCF_SUB_IDENTITY_ERROR: MQLONG = 3154;
pub const MQRCCF_SUBSCRIPTION_IN_USE: MQLONG = 3155;
pub const MQRCCF_SUBSCRIPTION_LOCKED: MQLONG = 3156;
pub const MQRCCF_ALREADY_JOINED: MQLONG = 3157;
pub const MQRCCF_OBJECT_IN_USE: MQLONG = 3160;
pub const MQRCCF_UNKNOWN_FILE_NAME: MQLONG = 3161;
pub const MQRCCF_FILE_NOT_AVAILABLE: MQLONG = 3162;
pub const MQRCCF_DISC_RETRY_ERROR: MQLONG = 3163;
pub const MQRCCF_ALLOC_RETRY_ERROR: MQLONG = 3164;
pub const MQRCCF_ALLOC_SLOW_TIMER_ERROR: MQLONG = 3165;
pub const MQRCCF_ALLOC_FAST_TIMER_ERROR: MQLONG = 3166;
pub const MQRCCF_PORT_NUMBER_ERROR: MQLONG = 3167;
pub const MQRCCF_CHL_SYSTEM_NOT_ACTIVE: MQLONG = 3168;
pub const MQRCCF_ENTITY_NAME_MISSING: MQLONG = 3169;
pub const MQRCCF_PROFILE_NAME_ERROR: MQLONG = 3170;
pub const MQRCCF_AUTH_VALUE_ERROR: MQLONG = 3171;
pub const MQRCCF_AUTH_VALUE_MISSING: MQLONG = 3172;
pub const MQRCCF_OBJECT_TYPE_MISSING: MQLONG = 3173;
pub const MQRCCF_CONNECTION_ID_ERROR: MQLONG = 3174;
pub const MQRCCF_LOG_TYPE_ERROR: MQLONG = 3175;
pub const MQRCCF_PROGRAM_NOT_AVAILABLE: MQLONG = 3176;
pub const MQRCCF_PROGRAM_AUTH_FAILED: MQLONG = 3177;
pub const MQRCCF_NONE_FOUND: MQLONG = 3200;
pub const MQRCCF_SECURITY_SWITCH_OFF: MQLONG = 3201;
pub const MQRCCF_SECURITY_REFRESH_FAILED: MQLONG = 3202;
pub const MQRCCF_PARM_CONFLICT: MQLONG = 3203;
pub const MQRCCF_COMMAND_INHIBITED: MQLONG = 3204;
pub const MQRCCF_OBJECT_BEING_DELETED: MQLONG = 3205;
pub const MQRCCF_STORAGE_CLASS_IN_USE: MQLONG = 3207;
pub const MQRCCF_OBJECT_NAME_RESTRICTED: MQLONG = 3208;
pub const MQRCCF_OBJECT_LIMIT_EXCEEDED: MQLONG = 3209;
pub const MQRCCF_OBJECT_OPEN_FORCE: MQLONG = 3210;
pub const MQRCCF_DISPOSITION_CONFLICT: MQLONG = 3211;
pub const MQRCCF_Q_MGR_NOT_IN_QSG: MQLONG = 3212;
pub const MQRCCF_ATTR_VALUE_FIXED: MQLONG = 3213;
pub const MQRCCF_NAMELIST_ERROR: MQLONG = 3215;
pub const MQRCCF_NO_CHANNEL_INITIATOR: MQLONG = 3217;
pub const MQRCCF_CHANNEL_INITIATOR_ERROR: MQLONG = 3218;
pub const MQRCCF_COMMAND_LEVEL_CONFLICT: MQLONG = 3222;
pub const MQRCCF_Q_ATTR_CONFLICT: MQLONG = 3223;
pub const MQRCCF_EVENTS_DISABLED: MQLONG = 3224;
pub const MQRCCF_COMMAND_SCOPE_ERROR: MQLONG = 3225;
pub const MQRCCF_COMMAND_REPLY_ERROR: MQLONG = 3226;
pub const MQRCCF_FUNCTION_RESTRICTED: MQLONG = 3227;
pub const MQRCCF_PARM_MISSING: MQLONG = 3228;
pub const MQRCCF_PARM_VALUE_ERROR: MQLONG = 3229;
pub const MQRCCF_COMMAND_LENGTH_ERROR: MQLONG = 3230;
pub const MQRCCF_COMMAND_ORIGIN_ERROR: MQLONG = 3231;
pub const MQRCCF_LISTENER_CONFLICT: MQLONG = 3232;
pub const MQRCCF_LISTENER_STARTED: MQLONG = 3233;
pub const MQRCCF_LISTENER_STOPPED: MQLONG = 3234;
pub const MQRCCF_CHANNEL_ERROR: MQLONG = 3235;
pub const MQRCCF_CF_STRUC_ERROR: MQLONG = 3236;
pub const MQRCCF_UNKNOWN_USER_ID: MQLONG = 3237;
pub const MQRCCF_UNEXPECTED_ERROR: MQLONG = 3238;
pub const MQRCCF_NO_XCF_PARTNER: MQLONG = 3239;
pub const MQRCCF_CFGR_PARM_ID_ERROR: MQLONG = 3240;
pub const MQRCCF_CFIF_LENGTH_ERROR: MQLONG = 3241;
pub const MQRCCF_CFIF_OPERATOR_ERROR: MQLONG = 3242;
pub const MQRCCF_CFIF_PARM_ID_ERROR: MQLONG = 3243;
pub const MQRCCF_CFSF_FILTER_VAL_LEN_ERR: MQLONG = 3244;
pub const MQRCCF_CFSF_LENGTH_ERROR: MQLONG = 3245;
pub const MQRCCF_CFSF_OPERATOR_ERROR: MQLONG = 3246;
pub const MQRCCF_CFSF_PARM_ID_ERROR: MQLONG = 3247;
pub const MQRCCF_TOO_MANY_FILTERS: MQLONG = 3248;
pub const MQRCCF_LISTENER_RUNNING: MQLONG = 3249;
pub const MQRCCF_LSTR_STATUS_NOT_FOUND: MQLONG = 3250;
pub const MQRCCF_SERVICE_RUNNING: MQLONG = 3251;
pub const MQRCCF_SERV_STATUS_NOT_FOUND: MQLONG = 3252;
pub const MQRCCF_SERVICE_STOPPED: MQLONG = 3253;
pub const MQRCCF_CFBS_DUPLICATE_PARM: MQLONG = 3254;
pub const MQRCCF_CFBS_LENGTH_ERROR: MQLONG = 3255;
pub const MQRCCF_CFBS_PARM_ID_ERROR: MQLONG = 3256;
pub const MQRCCF_CFBS_STRING_LENGTH_ERR: usize = 3257;
pub const MQRCCF_CFGR_LENGTH_ERROR: MQLONG = 3258;
pub const MQRCCF_CFGR_PARM_COUNT_ERROR: MQLONG = 3259;
pub const MQRCCF_CONN_NOT_STOPPED: MQLONG = 3260;
pub const MQRCCF_SERVICE_REQUEST_PENDING: MQLONG = 3261;
pub const MQRCCF_NO_START_CMD: MQLONG = 3262;
pub const MQRCCF_NO_STOP_CMD: MQLONG = 3263;
pub const MQRCCF_CFBF_LENGTH_ERROR: MQLONG = 3264;
pub const MQRCCF_CFBF_PARM_ID_ERROR: MQLONG = 3265;
pub const MQRCCF_CFBF_OPERATOR_ERROR: MQLONG = 3266;
pub const MQRCCF_CFBF_FILTER_VAL_LEN_ERR: MQLONG = 3267;
pub const MQRCCF_LISTENER_STILL_ACTIVE: MQLONG = 3268;
pub const MQRCCF_DEF_XMIT_Q_CLUS_ERROR: MQLONG = 3269;
pub const MQRCCF_TOPICSTR_ALREADY_EXISTS: MQLONG = 3300;
pub const MQRCCF_SHARING_CONVS_ERROR: MQLONG = 3301;
pub const MQRCCF_SHARING_CONVS_TYPE: MQLONG = 3302;
pub const MQRCCF_SECURITY_CASE_CONFLICT: MQLONG = 3303;
pub const MQRCCF_TOPIC_TYPE_ERROR: MQLONG = 3305;
pub const MQRCCF_MAX_INSTANCES_ERROR: MQLONG = 3306;
pub const MQRCCF_MAX_INSTS_PER_CLNT_ERR: MQLONG = 3307;
pub const MQRCCF_TOPIC_STRING_NOT_FOUND: MQLONG = 3308;
pub const MQRCCF_SUBSCRIPTION_POINT_ERR: MQLONG = 3309;
pub const MQRCCF_SUB_ALREADY_EXISTS: MQLONG = 3311;
pub const MQRCCF_UNKNOWN_OBJECT_NAME: MQLONG = 3312;
pub const MQRCCF_REMOTE_Q_NAME_ERROR: MQLONG = 3313;
pub const MQRCCF_DURABILITY_NOT_ALLOWED: MQLONG = 3314;
pub const MQRCCF_HOBJ_ERROR: MQLONG = 3315;
pub const MQRCCF_DEST_NAME_ERROR: MQLONG = 3316;
pub const MQRCCF_INVALID_DESTINATION: MQLONG = 3317;
pub const MQRCCF_PUBSUB_INHIBITED: MQLONG = 3318;
pub const MQRCCF_GROUPUR_CHECKS_FAILED: MQLONG = 3319;
pub const MQRCCF_COMM_INFO_TYPE_ERROR: MQLONG = 3320;
pub const MQRCCF_USE_CLIENT_ID_ERROR: MQLONG = 3321;
pub const MQRCCF_CLIENT_ID_NOT_FOUND: MQLONG = 3322;
pub const MQRCCF_CLIENT_ID_ERROR: MQLONG = 3323;
pub const MQRCCF_PORT_IN_USE: MQLONG = 3324;
pub const MQRCCF_SSL_ALT_PROVIDER_REQD: MQLONG = 3325;
pub const MQRCCF_CHLAUTH_TYPE_ERROR: MQLONG = 3326;
pub const MQRCCF_CHLAUTH_ACTION_ERROR: MQLONG = 3327;
pub const MQRCCF_POLICY_NOT_FOUND: MQLONG = 3328;
pub const MQRCCF_ENCRYPTION_ALG_ERROR: MQLONG = 3329;
pub const MQRCCF_SIGNATURE_ALG_ERROR: MQLONG = 3330;
pub const MQRCCF_TOLERATION_POL_ERROR: MQLONG = 3331;
pub const MQRCCF_POLICY_VERSION_ERROR: MQLONG = 3332;
pub const MQRCCF_RECIPIENT_DN_MISSING: MQLONG = 3333;
pub const MQRCCF_POLICY_NAME_MISSING: MQLONG = 3334;
pub const MQRCCF_CHLAUTH_USERSRC_ERROR: MQLONG = 3335;
pub const MQRCCF_WRONG_CHLAUTH_TYPE: MQLONG = 3336;
pub const MQRCCF_CHLAUTH_ALREADY_EXISTS: MQLONG = 3337;
pub const MQRCCF_CHLAUTH_NOT_FOUND: MQLONG = 3338;
pub const MQRCCF_WRONG_CHLAUTH_ACTION: MQLONG = 3339;
pub const MQRCCF_WRONG_CHLAUTH_USERSRC: MQLONG = 3340;
pub const MQRCCF_CHLAUTH_WARN_ERROR: MQLONG = 3341;
pub const MQRCCF_WRONG_CHLAUTH_MATCH: MQLONG = 3342;
pub const MQRCCF_IPADDR_RANGE_CONFLICT: MQLONG = 3343;
pub const MQRCCF_CHLAUTH_MAX_EXCEEDED: MQLONG = 3344;
pub const MQRCCF_IPADDR_ERROR: MQLONG = 3345;
pub const MQRCCF_ADDRESS_ERROR: MQLONG = 3345;
pub const MQRCCF_IPADDR_RANGE_ERROR: MQLONG = 3346;
pub const MQRCCF_PROFILE_NAME_MISSING: MQLONG = 3347;
pub const MQRCCF_CHLAUTH_CLNTUSER_ERROR: MQLONG = 3348;
pub const MQRCCF_CHLAUTH_NAME_ERROR: MQLONG = 3349;
pub const MQRCCF_CHLAUTH_RUNCHECK_ERROR: MQLONG = 3350;
pub const MQRCCF_CF_STRUC_ALREADY_FAILED: MQLONG = 3351;
pub const MQRCCF_CFCONLOS_CHECKS_FAILED: MQLONG = 3352;
pub const MQRCCF_SUITE_B_ERROR: MQLONG = 3353;
pub const MQRCCF_CHANNEL_NOT_STARTED: MQLONG = 3354;
pub const MQRCCF_CUSTOM_ERROR: MQLONG = 3355;
pub const MQRCCF_BACKLOG_OUT_OF_RANGE: MQLONG = 3356;
pub const MQRCCF_CHLAUTH_DISABLED: MQLONG = 3357;
pub const MQRCCF_SMDS_REQUIRES_DSGROUP: MQLONG = 3358;
pub const MQRCCF_PSCLUS_DISABLED_TOPDEF: MQLONG = 3359;
pub const MQRCCF_PSCLUS_TOPIC_EXISTS: MQLONG = 3360;
pub const MQRCCF_SSL_CIPHER_SUITE_ERROR: MQLONG = 3361;
pub const MQRCCF_SOCKET_ERROR: MQLONG = 3362;
pub const MQRCCF_CLUS_XMIT_Q_USAGE_ERROR: MQLONG = 3363;
pub const MQRCCF_CERT_VAL_POLICY_ERROR: MQLONG = 3364;
pub const MQRCCF_INVALID_PROTOCOL: MQLONG = 3365;
pub const MQRCCF_REVDNS_DISABLED: MQLONG = 3366;
pub const MQRCCF_CLROUTE_NOT_ALTERABLE: MQLONG = 3367;
pub const MQRCCF_CLUSTER_TOPIC_CONFLICT: MQLONG = 3368;
pub const MQRCCF_DEFCLXQ_MODEL_Q_ERROR: MQLONG = 3369;
pub const MQRCCF_CHLAUTH_CHKCLI_ERROR: MQLONG = 3370;
pub const MQRCCF_CERT_LABEL_NOT_ALLOWED: MQLONG = 3371;
pub const MQRCCF_Q_MGR_ATTR_CONFLICT: MQLONG = 3372;
pub const MQRCCF_ENTITY_TYPE_MISSING: MQLONG = 3373;
pub const MQRCCF_CLWL_EXIT_NAME_ERROR: MQLONG = 3374;
pub const MQRCCF_SERVICE_NAME_ERROR: MQLONG = 3375;
pub const MQRCCF_REMOTE_CHL_TYPE_ERROR: MQLONG = 3376;
pub const MQRCCF_TOPIC_RESTRICTED: MQLONG = 3377;
pub const MQRCCF_CURRENT_LOG_EXTENT: MQLONG = 3378;
pub const MQRCCF_LOG_EXTENT_NOT_FOUND: MQLONG = 3379;
pub const MQRCCF_LOG_NOT_REDUCED: MQLONG = 3380;
pub const MQRCCF_LOG_EXTENT_ERROR: MQLONG = 3381;
pub const MQRCCF_ACCESS_BLOCKED: MQLONG = 3382;
pub const MQRCCF_PS_REQUIRED_MQUC: MQLONG = 3383;
pub const MQRCCF_STREAMQ_DEST_NOT_SUPP: MQLONG = 3384;
pub const MQRCCF_STREAMQ_DEST_CONFLICT: MQLONG = 3385;
pub const MQRCCF_STREAMQ_NOT_SUPPORTED: MQLONG = 3386;
pub const MQRCCF_STREAMQ_CONFLICT: MQLONG = 3387;
pub const MQRCCF_INCOMPATIBLE_QM_IN_QSG: MQLONG = 3389;
pub const MQRCCF_OBJECT_ALREADY_EXISTS: MQLONG = 4001;
pub const MQRCCF_OBJECT_WRONG_TYPE: MQLONG = 4002;
pub const MQRCCF_LIKE_OBJECT_WRONG_TYPE: MQLONG = 4003;
pub const MQRCCF_OBJECT_OPEN: MQLONG = 4004;
pub const MQRCCF_ATTR_VALUE_ERROR: MQLONG = 4005;
pub const MQRCCF_UNKNOWN_Q_MGR: MQLONG = 4006;
pub const MQRCCF_Q_WRONG_TYPE: MQLONG = 4007;
pub const MQRCCF_OBJECT_NAME_ERROR: MQLONG = 4008;
pub const MQRCCF_ALLOCATE_FAILED: MQLONG = 4009;
pub const MQRCCF_HOST_NOT_AVAILABLE: MQLONG = 4010;
pub const MQRCCF_CONFIGURATION_ERROR: MQLONG = 4011;
pub const MQRCCF_CONNECTION_REFUSED: MQLONG = 4012;
pub const MQRCCF_ENTRY_ERROR: MQLONG = 4013;
pub const MQRCCF_SEND_FAILED: MQLONG = 4014;
pub const MQRCCF_RECEIVED_DATA_ERROR: MQLONG = 4015;
pub const MQRCCF_RECEIVE_FAILED: MQLONG = 4016;
pub const MQRCCF_CONNECTION_CLOSED: MQLONG = 4017;
pub const MQRCCF_NO_STORAGE: MQLONG = 4018;
pub const MQRCCF_NO_COMMS_MANAGER: MQLONG = 4019;
pub const MQRCCF_LISTENER_NOT_STARTED: MQLONG = 4020;
pub const MQRCCF_BIND_FAILED: MQLONG = 4024;
pub const MQRCCF_CHANNEL_INDOUBT: MQLONG = 4025;
pub const MQRCCF_MQCONN_FAILED: MQLONG = 4026;
pub const MQRCCF_MQOPEN_FAILED: MQLONG = 4027;
pub const MQRCCF_MQGET_FAILED: MQLONG = 4028;
pub const MQRCCF_MQPUT_FAILED: MQLONG = 4029;
pub const MQRCCF_PING_ERROR: MQLONG = 4030;
pub const MQRCCF_CHANNEL_IN_USE: MQLONG = 4031;
pub const MQRCCF_CHANNEL_NOT_FOUND: MQLONG = 4032;
pub const MQRCCF_UNKNOWN_REMOTE_CHANNEL: MQLONG = 4033;
pub const MQRCCF_REMOTE_QM_UNAVAILABLE: MQLONG = 4034;
pub const MQRCCF_REMOTE_QM_TERMINATING: MQLONG = 4035;
pub const MQRCCF_MQINQ_FAILED: MQLONG = 4036;
pub const MQRCCF_NOT_XMIT_Q: MQLONG = 4037;
pub const MQRCCF_CHANNEL_DISABLED: MQLONG = 4038;
pub const MQRCCF_USER_EXIT_NOT_AVAILABLE: MQLONG = 4039;
pub const MQRCCF_COMMIT_FAILED: MQLONG = 4040;
pub const MQRCCF_WRONG_CHANNEL_TYPE: MQLONG = 4041;
pub const MQRCCF_CHANNEL_ALREADY_EXISTS: MQLONG = 4042;
pub const MQRCCF_DATA_TOO_LARGE: MQLONG = 4043;
pub const MQRCCF_CHANNEL_NAME_ERROR: MQLONG = 4044;
pub const MQRCCF_XMIT_Q_NAME_ERROR: MQLONG = 4045;
pub const MQRCCF_MCA_NAME_ERROR: MQLONG = 4047;
pub const MQRCCF_SEND_EXIT_NAME_ERROR: MQLONG = 4048;
pub const MQRCCF_SEC_EXIT_NAME_ERROR: MQLONG = 4049;
pub const MQRCCF_MSG_EXIT_NAME_ERROR: MQLONG = 4050;
pub const MQRCCF_RCV_EXIT_NAME_ERROR: MQLONG = 4051;
pub const MQRCCF_XMIT_Q_NAME_WRONG_TYPE: MQLONG = 4052;
pub const MQRCCF_MCA_NAME_WRONG_TYPE: MQLONG = 4053;
pub const MQRCCF_DISC_INT_WRONG_TYPE: MQLONG = 4054;
pub const MQRCCF_SHORT_RETRY_WRONG_TYPE: MQLONG = 4055;
pub const MQRCCF_SHORT_TIMER_WRONG_TYPE: MQLONG = 4056;
pub const MQRCCF_LONG_RETRY_WRONG_TYPE: MQLONG = 4057;
pub const MQRCCF_LONG_TIMER_WRONG_TYPE: MQLONG = 4058;
pub const MQRCCF_PUT_AUTH_WRONG_TYPE: MQLONG = 4059;
pub const MQRCCF_KEEP_ALIVE_INT_ERROR: MQLONG = 4060;
pub const MQRCCF_MISSING_CONN_NAME: MQLONG = 4061;
pub const MQRCCF_CONN_NAME_ERROR: MQLONG = 4062;
pub const MQRCCF_MQSET_FAILED: MQLONG = 4063;
pub const MQRCCF_CHANNEL_NOT_ACTIVE: MQLONG = 4064;
pub const MQRCCF_TERMINATED_BY_SEC_EXIT: MQLONG = 4065;
pub const MQRCCF_DYNAMIC_Q_SCOPE_ERROR: MQLONG = 4067;
pub const MQRCCF_CELL_DIR_NOT_AVAILABLE: MQLONG = 4068;
pub const MQRCCF_MR_COUNT_ERROR: MQLONG = 4069;
pub const MQRCCF_MR_COUNT_WRONG_TYPE: MQLONG = 4070;
pub const MQRCCF_MR_EXIT_NAME_ERROR: MQLONG = 4071;
pub const MQRCCF_MR_EXIT_NAME_WRONG_TYPE: MQLONG = 4072;
pub const MQRCCF_MR_INTERVAL_ERROR: MQLONG = 4073;
pub const MQRCCF_MR_INTERVAL_WRONG_TYPE: MQLONG = 4074;
pub const MQRCCF_NPM_SPEED_ERROR: MQLONG = 4075;
pub const MQRCCF_NPM_SPEED_WRONG_TYPE: MQLONG = 4076;
pub const MQRCCF_HB_INTERVAL_ERROR: MQLONG = 4077;
pub const MQRCCF_HB_INTERVAL_WRONG_TYPE: MQLONG = 4078;
pub const MQRCCF_CHAD_ERROR: MQLONG = 4079;
pub const MQRCCF_CHAD_WRONG_TYPE: MQLONG = 4080;
pub const MQRCCF_CHAD_EVENT_ERROR: MQLONG = 4081;
pub const MQRCCF_CHAD_EVENT_WRONG_TYPE: MQLONG = 4082;
pub const MQRCCF_CHAD_EXIT_ERROR: MQLONG = 4083;
pub const MQRCCF_CHAD_EXIT_WRONG_TYPE: MQLONG = 4084;
pub const MQRCCF_SUPPRESSED_BY_EXIT: MQLONG = 4085;
pub const MQRCCF_BATCH_INT_ERROR: MQLONG = 4086;
pub const MQRCCF_BATCH_INT_WRONG_TYPE: MQLONG = 4087;
pub const MQRCCF_NET_PRIORITY_ERROR: MQLONG = 4088;
pub const MQRCCF_NET_PRIORITY_WRONG_TYPE: MQLONG = 4089;
pub const MQRCCF_CHANNEL_CLOSED: MQLONG = 4090;
pub const MQRCCF_Q_STATUS_NOT_FOUND: MQLONG = 4091;
pub const MQRCCF_SSL_CIPHER_SPEC_ERROR: MQLONG = 4092;
pub const MQRCCF_SSL_PEER_NAME_ERROR: MQLONG = 4093;
pub const MQRCCF_SSL_CLIENT_AUTH_ERROR: MQLONG = 4094;
pub const MQRCCF_RETAINED_NOT_SUPPORTED: MQLONG = 4095;
pub const MQRCCF_KWD_VALUE_WRONG_TYPE: MQLONG = 4096;
pub const MQRCCF_APPL_STATUS_NOT_FOUND: MQLONG = 4097;
pub const MQRCCF_NHA_NOT_AVAILABLE: MQLONG = 4098;
pub const MQRCCF_Q_MGR_STATUS_NOT_FOUND: MQLONG = 4099;
pub const MQCFBF_STRUC_LENGTH_FIXED: usize = 20;
pub const MQCFBS_STRUC_LENGTH_FIXED: usize = 16;
pub const MQCFGR_STRUC_LENGTH: usize = 16;
pub const MQCFIF_STRUC_LENGTH: usize = 20;
pub const MQCFIL_STRUC_LENGTH_FIXED: usize = 16;
pub const MQCFIL64_STRUC_LENGTH_FIXED: usize = 16;
pub const MQCFIN_STRUC_LENGTH: usize = 16;
pub const MQCFIN64_STRUC_LENGTH: usize = 24;
pub const MQCFSF_STRUC_LENGTH_FIXED: usize = 24;
pub const MQCFSL_STRUC_LENGTH_FIXED: usize = 24;
pub const MQCFST_STRUC_LENGTH_FIXED: usize = 20;
#[allow(unsafe_code)]
pub const MQEPH_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"EPH \0") };
pub const MQEPH_STRUC_LENGTH_FIXED: usize = 68;
pub const MQEPH_VERSION_1: MQLONG = 1;
pub const MQEPH_CURRENT_VERSION: MQLONG = 1;
pub const MQEPH_LENGTH_1: usize = 68;
pub const MQEPH_CURRENT_LENGTH: usize = 68;
pub const MQEPH_NONE: MQLONG = 0;
pub const MQEPH_CCSID_EMBEDDED: MQLONG = 1;
pub const MQ_ARCHIVE_PFX_LENGTH: usize = 36;
pub const MQ_ARCHIVE_UNIT_LENGTH: usize = 8;
pub const MQ_ASID_LENGTH: usize = 4;
pub const MQ_AUTH_PROFILE_NAME_LENGTH: usize = 48;
pub const MQ_CF_LEID_LENGTH: usize = 12;
pub const MQ_COMMAND_MQSC_LENGTH: usize = 32768;
pub const MQ_DATA_SET_NAME_LENGTH: usize = 44;
pub const MQ_DB2_NAME_LENGTH: usize = 4;
pub const MQ_DSG_NAME_LENGTH: usize = 8;
pub const MQ_ENTITY_NAME_LENGTH: usize = 1024;
pub const MQ_ENV_INFO_LENGTH: usize = 96;
pub const MQ_GROUP_ADDRESS_LENGTH: usize = 264;
pub const MQ_HOST_NAME_LENGTH: usize = 256;
pub const MQ_IP_ADDRESS_LENGTH: usize = 48;
pub const MQ_LOG_CORREL_ID_LENGTH: usize = 8;
pub const MQ_LOG_EXTENT_NAME_LENGTH: usize = 24;
pub const MQ_LOG_PATH_LENGTH: usize = 1024;
pub const MQ_LRSN_LENGTH: usize = 12;
pub const MQ_LSN_LENGTH: usize = 64;
pub const MQ_NHA_REPL_ADDRESS_LENGTH: usize = 264;
pub const MQ_ORIGIN_NAME_LENGTH: usize = 8;
pub const MQ_PSB_NAME_LENGTH: usize = 8;
pub const MQ_PST_ID_LENGTH: usize = 8;
pub const MQ_Q_MGR_CPF_LENGTH: usize = 4;
pub const MQ_Q_MGR_DATA_PATH_LENGTH: usize = 1024;
pub const MQ_RESPONSE_ID_LENGTH: usize = 24;
pub const MQ_RBA_LENGTH: usize = 16;
pub const MQ_REMOTE_PRODUCT_LENGTH: usize = 4;
pub const MQ_REMOTE_VERSION_LENGTH: usize = 8;
pub const MQ_SECURITY_PROFILE_LENGTH: usize = 40;
pub const MQ_SERVICE_COMPONENT_LENGTH: usize = 48;
pub const MQ_SUB_NAME_LENGTH: usize = 10240;
pub const MQ_SYSP_SERVICE_LENGTH: usize = 32;
pub const MQ_SYSTEM_NAME_LENGTH: usize = 8;
pub const MQ_TASK_NUMBER_LENGTH: usize = 8;
pub const MQ_TPIPE_PFX_LENGTH: usize = 4;
pub const MQ_UOW_ID_LENGTH: usize = 256;
pub const MQ_USER_DATA_LENGTH: usize = 10240;
pub const MQ_VOLSER_LENGTH: usize = 6;
pub const MQCFOP_LESS: MQLONG = 1;
pub const MQCFOP_EQUAL: MQLONG = 2;
pub const MQCFOP_GREATER: MQLONG = 4;
pub const MQCFOP_NOT_LESS: MQLONG = 6;
pub const MQCFOP_NOT_EQUAL: MQLONG = 5;
pub const MQCFOP_NOT_GREATER: MQLONG = 3;
pub const MQCFOP_LIKE: MQLONG = 18;
pub const MQCFOP_NOT_LIKE: MQLONG = 21;
pub const MQCFOP_CONTAINS: MQLONG = 10;
pub const MQCFOP_EXCLUDES: MQLONG = 13;
pub const MQCFOP_CONTAINS_GEN: MQLONG = 26;
pub const MQCFOP_EXCLUDES_GEN: MQLONG = 29;
pub const MQCFT_NONE: MQLONG = 0;
pub const MQCFT_COMMAND: MQLONG = 1;
pub const MQCFT_RESPONSE: MQLONG = 2;
pub const MQCFT_INTEGER: MQLONG = 3;
pub const MQCFT_STRING: MQLONG = 4;
pub const MQCFT_INTEGER_LIST: MQLONG = 5;
pub const MQCFT_STRING_LIST: MQLONG = 6;
pub const MQCFT_EVENT: MQLONG = 7;
pub const MQCFT_USER: MQLONG = 8;
pub const MQCFT_BYTE_STRING: MQLONG = 9;
pub const MQCFT_TRACE_ROUTE: MQLONG = 10;
pub const MQCFT_REPORT: MQLONG = 12;
pub const MQCFT_INTEGER_FILTER: MQLONG = 13;
pub const MQCFT_STRING_FILTER: MQLONG = 14;
pub const MQCFT_BYTE_STRING_FILTER: MQLONG = 15;
pub const MQCFT_COMMAND_XR: MQLONG = 16;
pub const MQCFT_XR_MSG: MQLONG = 17;
pub const MQCFT_XR_ITEM: MQLONG = 18;
pub const MQCFT_XR_SUMMARY: MQLONG = 19;
pub const MQCFT_GROUP: MQLONG = 20;
pub const MQCFT_STATISTICS: MQLONG = 21;
pub const MQCFT_ACCOUNTING: MQLONG = 22;
pub const MQCFT_INTEGER64: MQLONG = 23;
pub const MQCFT_INTEGER64_LIST: MQLONG = 25;
pub const MQCFT_APP_ACTIVITY: MQLONG = 26;
pub const MQCFT_STATUS: MQLONG = 27;
pub const MQOPMODE_COMPAT: MQLONG = 0;
pub const MQOPMODE_NEW_FUNCTION: MQLONG = 1;
pub const MQBACF_FIRST: MQLONG = 7001;
pub const MQBACF_EVENT_ACCOUNTING_TOKEN: MQLONG = 7001;
pub const MQBACF_EVENT_SECURITY_ID: MQLONG = 7002;
pub const MQBACF_RESPONSE_SET: MQLONG = 7003;
pub const MQBACF_RESPONSE_ID: MQLONG = 7004;
pub const MQBACF_EXTERNAL_UOW_ID: MQLONG = 7005;
pub const MQBACF_CONNECTION_ID: MQLONG = 7006;
pub const MQBACF_GENERIC_CONNECTION_ID: MQLONG = 7007;
pub const MQBACF_ORIGIN_UOW_ID: MQLONG = 7008;
pub const MQBACF_Q_MGR_UOW_ID: MQLONG = 7009;
pub const MQBACF_ACCOUNTING_TOKEN: MQLONG = 7010;
pub const MQBACF_CORREL_ID: MQLONG = 7011;
pub const MQBACF_GROUP_ID: MQLONG = 7012;
pub const MQBACF_MSG_ID: MQLONG = 7013;
pub const MQBACF_CF_LEID: MQLONG = 7014;
pub const MQBACF_DESTINATION_CORREL_ID: MQLONG = 7015;
pub const MQBACF_SUB_ID: MQLONG = 7016;
pub const MQBACF_ALTERNATE_SECURITYID: MQLONG = 7019;
pub const MQBACF_MESSAGE_DATA: MQLONG = 7020;
pub const MQBACF_MQBO_STRUCT: MQLONG = 7021;
pub const MQBACF_MQCB_FUNCTION: MQLONG = 7022;
pub const MQBACF_MQCBC_STRUCT: MQLONG = 7023;
pub const MQBACF_MQCBD_STRUCT: MQLONG = 7024;
pub const MQBACF_MQCD_STRUCT: MQLONG = 7025;
pub const MQBACF_MQCNO_STRUCT: MQLONG = 7026;
pub const MQBACF_MQGMO_STRUCT: MQLONG = 7027;
pub const MQBACF_MQMD_STRUCT: MQLONG = 7028;
pub const MQBACF_MQPMO_STRUCT: MQLONG = 7029;
pub const MQBACF_MQSD_STRUCT: MQLONG = 7030;
pub const MQBACF_MQSTS_STRUCT: MQLONG = 7031;
pub const MQBACF_SUB_CORREL_ID: MQLONG = 7032;
pub const MQBACF_XA_XID: MQLONG = 7033;
pub const MQBACF_XQH_CORREL_ID: MQLONG = 7034;
pub const MQBACF_XQH_MSG_ID: MQLONG = 7035;
pub const MQBACF_REQUEST_ID: MQLONG = 7036;
pub const MQBACF_PROPERTIES_DATA: MQLONG = 7037;
pub const MQBACF_CONN_TAG: MQLONG = 7038;
pub const MQBACF_MQBNO_STRUCT: MQLONG = 7039;
pub const MQBACF_LAST_USED: MQLONG = 7039;
pub const MQIAMO_FIRST: MQLONG = 701;
pub const MQIAMO_AVG_BATCH_SIZE: MQLONG = 702;
pub const MQIAMO_AVG_Q_TIME: MQLONG = 703;
pub const MQIAMO64_AVG_Q_TIME: u32 = 703;
pub const MQIAMO_BACKOUTS: MQLONG = 704;
pub const MQIAMO_BROWSES: MQLONG = 705;
pub const MQIAMO_BROWSE_MAX_BYTES: MQLONG = 706;
pub const MQIAMO_BROWSE_MIN_BYTES: MQLONG = 707;
pub const MQIAMO_BROWSES_FAILED: MQLONG = 708;
pub const MQIAMO_CLOSES: MQLONG = 709;
pub const MQIAMO_COMMITS: MQLONG = 710;
pub const MQIAMO_COMMITS_FAILED: MQLONG = 711;
pub const MQIAMO_CONNS: MQLONG = 712;
pub const MQIAMO_CONNS_MAX: MQLONG = 713;
pub const MQIAMO_DISCS: MQLONG = 714;
pub const MQIAMO_DISCS_IMPLICIT: MQLONG = 715;
pub const MQIAMO_DISC_TYPE: MQLONG = 716;
pub const MQIAMO_EXIT_TIME_AVG: MQLONG = 717;
pub const MQIAMO_EXIT_TIME_MAX: MQLONG = 718;
pub const MQIAMO_EXIT_TIME_MIN: MQLONG = 719;
pub const MQIAMO_FULL_BATCHES: MQLONG = 720;
pub const MQIAMO_GENERATED_MSGS: MQLONG = 721;
pub const MQIAMO_GETS: MQLONG = 722;
pub const MQIAMO_GET_MAX_BYTES: MQLONG = 723;
pub const MQIAMO_GET_MIN_BYTES: MQLONG = 724;
pub const MQIAMO_GETS_FAILED: MQLONG = 725;
pub const MQIAMO_INCOMPLETE_BATCHES: MQLONG = 726;
pub const MQIAMO_INQS: MQLONG = 727;
pub const MQIAMO_MSGS: MQLONG = 728;
pub const MQIAMO_NET_TIME_AVG: MQLONG = 729;
pub const MQIAMO_NET_TIME_MAX: MQLONG = 730;
pub const MQIAMO_NET_TIME_MIN: MQLONG = 731;
pub const MQIAMO_OBJECT_COUNT: MQLONG = 732;
pub const MQIAMO_OPENS: MQLONG = 733;
pub const MQIAMO_PUT1S: MQLONG = 734;
pub const MQIAMO_PUTS: MQLONG = 735;
pub const MQIAMO_PUT_MAX_BYTES: MQLONG = 736;
pub const MQIAMO_PUT_MIN_BYTES: MQLONG = 737;
pub const MQIAMO_PUT_RETRIES: MQLONG = 738;
pub const MQIAMO_Q_MAX_DEPTH: MQLONG = 739;
pub const MQIAMO_Q_MIN_DEPTH: MQLONG = 740;
pub const MQIAMO_Q_TIME_AVG: MQLONG = 741;
pub const MQIAMO64_Q_TIME_AVG: u32 = 741;
pub const MQIAMO_Q_TIME_MAX: MQLONG = 742;
pub const MQIAMO64_Q_TIME_MAX: u32 = 742;
pub const MQIAMO_Q_TIME_MIN: MQLONG = 743;
pub const MQIAMO64_Q_TIME_MIN: u32 = 743;
pub const MQIAMO_SETS: MQLONG = 744;
pub const MQIAMO64_BROWSE_BYTES: u32 = 745;
pub const MQIAMO64_BYTES: u32 = 746;
pub const MQIAMO64_GET_BYTES: u32 = 747;
pub const MQIAMO64_PUT_BYTES: u32 = 748;
pub const MQIAMO_CONNS_FAILED: MQLONG = 749;
pub const MQIAMO_OPENS_FAILED: MQLONG = 751;
pub const MQIAMO_INQS_FAILED: MQLONG = 752;
pub const MQIAMO_SETS_FAILED: MQLONG = 753;
pub const MQIAMO_PUTS_FAILED: MQLONG = 754;
pub const MQIAMO_PUT1S_FAILED: MQLONG = 755;
pub const MQIAMO_CLOSES_FAILED: MQLONG = 757;
pub const MQIAMO_MSGS_EXPIRED: MQLONG = 758;
pub const MQIAMO_MSGS_NOT_QUEUED: MQLONG = 759;
pub const MQIAMO_MSGS_PURGED: MQLONG = 760;
pub const MQIAMO_SUBS_DUR: MQLONG = 764;
pub const MQIAMO_SUBS_NDUR: MQLONG = 765;
pub const MQIAMO_SUBS_FAILED: MQLONG = 766;
pub const MQIAMO_SUBRQS: MQLONG = 767;
pub const MQIAMO_SUBRQS_FAILED: MQLONG = 768;
pub const MQIAMO_CBS: MQLONG = 769;
pub const MQIAMO_CBS_FAILED: MQLONG = 770;
pub const MQIAMO_CTLS: MQLONG = 771;
pub const MQIAMO_CTLS_FAILED: MQLONG = 772;
pub const MQIAMO_STATS: MQLONG = 773;
pub const MQIAMO_STATS_FAILED: MQLONG = 774;
pub const MQIAMO_SUB_DUR_HIGHWATER: MQLONG = 775;
pub const MQIAMO_SUB_DUR_LOWWATER: MQLONG = 776;
pub const MQIAMO_SUB_NDUR_HIGHWATER: MQLONG = 777;
pub const MQIAMO_SUB_NDUR_LOWWATER: MQLONG = 778;
pub const MQIAMO_TOPIC_PUTS: MQLONG = 779;
pub const MQIAMO_TOPIC_PUTS_FAILED: MQLONG = 780;
pub const MQIAMO_TOPIC_PUT1S: MQLONG = 781;
pub const MQIAMO_TOPIC_PUT1S_FAILED: MQLONG = 782;
pub const MQIAMO64_TOPIC_PUT_BYTES: u32 = 783;
pub const MQIAMO_PUBLISH_MSG_COUNT: MQLONG = 784;
pub const MQIAMO64_PUBLISH_MSG_BYTES: u32 = 785;
pub const MQIAMO_UNSUBS_DUR: MQLONG = 786;
pub const MQIAMO_UNSUBS_NDUR: MQLONG = 787;
pub const MQIAMO_UNSUBS_FAILED: MQLONG = 788;
pub const MQIAMO_INTERVAL: MQLONG = 789;
pub const MQIAMO_MSGS_SENT: MQLONG = 790;
pub const MQIAMO_BYTES_SENT: MQLONG = 791;
pub const MQIAMO_REPAIR_BYTES: MQLONG = 792;
pub const MQIAMO_FEEDBACK_MODE: MQLONG = 793;
pub const MQIAMO_RELIABILITY_TYPE: MQLONG = 794;
pub const MQIAMO_LATE_JOIN_MARK: MQLONG = 795;
pub const MQIAMO_NACKS_RCVD: MQLONG = 796;
pub const MQIAMO_REPAIR_PKTS: MQLONG = 797;
pub const MQIAMO_HISTORY_PKTS: MQLONG = 798;
pub const MQIAMO_PENDING_PKTS: MQLONG = 799;
pub const MQIAMO_PKT_RATE: MQLONG = 800;
pub const MQIAMO_MCAST_XMIT_RATE: MQLONG = 801;
pub const MQIAMO_MCAST_BATCH_TIME: MQLONG = 802;
pub const MQIAMO_MCAST_HEARTBEAT: MQLONG = 803;
pub const MQIAMO_DEST_DATA_PORT: MQLONG = 804;
pub const MQIAMO_DEST_REPAIR_PORT: MQLONG = 805;
pub const MQIAMO_ACKS_RCVD: MQLONG = 806;
pub const MQIAMO_ACTIVE_ACKERS: MQLONG = 807;
pub const MQIAMO_PKTS_SENT: MQLONG = 808;
pub const MQIAMO_TOTAL_REPAIR_PKTS: MQLONG = 809;
pub const MQIAMO_TOTAL_PKTS_SENT: MQLONG = 810;
pub const MQIAMO_TOTAL_MSGS_SENT: MQLONG = 811;
pub const MQIAMO_TOTAL_BYTES_SENT: MQLONG = 812;
pub const MQIAMO_NUM_STREAMS: MQLONG = 813;
pub const MQIAMO_ACK_FEEDBACK: MQLONG = 814;
pub const MQIAMO_NACK_FEEDBACK: MQLONG = 815;
pub const MQIAMO_PKTS_LOST: MQLONG = 816;
pub const MQIAMO_MSGS_RCVD: MQLONG = 817;
pub const MQIAMO_MSG_BYTES_RCVD: MQLONG = 818;
pub const MQIAMO_MSGS_DELIVERED: MQLONG = 819;
pub const MQIAMO_PKTS_PROCESSED: MQLONG = 820;
pub const MQIAMO_PKTS_DELIVERED: MQLONG = 821;
pub const MQIAMO_PKTS_DROPPED: MQLONG = 822;
pub const MQIAMO_PKTS_DUPLICATED: MQLONG = 823;
pub const MQIAMO_NACKS_CREATED: MQLONG = 824;
pub const MQIAMO_NACK_PKTS_SENT: MQLONG = 825;
pub const MQIAMO_REPAIR_PKTS_RQSTD: MQLONG = 826;
pub const MQIAMO_REPAIR_PKTS_RCVD: MQLONG = 827;
pub const MQIAMO_PKTS_REPAIRED: MQLONG = 828;
pub const MQIAMO_TOTAL_MSGS_RCVD: MQLONG = 829;
pub const MQIAMO_TOTAL_MSG_BYTES_RCVD: MQLONG = 830;
pub const MQIAMO_TOTAL_REPAIR_PKTS_RCVD: MQLONG = 831;
pub const MQIAMO_TOTAL_REPAIR_PKTS_RQSTD: MQLONG = 832;
pub const MQIAMO_TOTAL_MSGS_PROCESSED: MQLONG = 833;
pub const MQIAMO_TOTAL_MSGS_SELECTED: MQLONG = 834;
pub const MQIAMO_TOTAL_MSGS_EXPIRED: MQLONG = 835;
pub const MQIAMO_TOTAL_MSGS_DELIVERED: MQLONG = 836;
pub const MQIAMO_TOTAL_MSGS_RETURNED: MQLONG = 837;
pub const MQIAMO64_HIGHRES_TIME: u32 = 838;
pub const MQIAMO_MONITOR_CLASS: MQLONG = 839;
pub const MQIAMO_MONITOR_TYPE: MQLONG = 840;
pub const MQIAMO_MONITOR_ELEMENT: MQLONG = 841;
pub const MQIAMO_MONITOR_DATATYPE: MQLONG = 842;
pub const MQIAMO_MONITOR_FLAGS: MQLONG = 843;
pub const MQIAMO64_QMGR_OP_DURATION: u32 = 844;
pub const MQIAMO64_MONITOR_INTERVAL: u32 = 845;
pub const MQIAMO_LAST_USED: MQLONG = 845;
pub const MQIAMO_MONITOR_FLAGS_NONE: MQLONG = 0;
pub const MQIAMO_MONITOR_FLAGS_OBJNAME: MQLONG = 1;
pub const MQIAMO_MONITOR_UNIT: MQLONG = 1;
pub const MQIAMO_MONITOR_DELTA: MQLONG = 2;
pub const MQIAMO_MONITOR_HUNDREDTHS: MQLONG = 100;
pub const MQIAMO_MONITOR_KB: MQLONG = 1024;
pub const MQIAMO_MONITOR_PERCENT: MQLONG = 10000;
pub const MQIAMO_MONITOR_MICROSEC: MQLONG = 1000000;
pub const MQIAMO_MONITOR_MB: MQLONG = 1048576;
pub const MQIAMO_MONITOR_GB: MQLONG = 100000000;
pub const MQIACF_FIRST: MQLONG = 1001;
pub const MQIACF_Q_MGR_ATTRS: MQLONG = 1001;
pub const MQIACF_Q_ATTRS: MQLONG = 1002;
pub const MQIACF_PROCESS_ATTRS: MQLONG = 1003;
pub const MQIACF_NAMELIST_ATTRS: MQLONG = 1004;
pub const MQIACF_FORCE: MQLONG = 1005;
pub const MQIACF_REPLACE: MQLONG = 1006;
pub const MQIACF_PURGE: MQLONG = 1007;
pub const MQIACF_QUIESCE: MQLONG = 1008;
pub const MQIACF_MODE: MQLONG = 1008;
pub const MQIACF_ALL: MQLONG = 1009;
pub const MQIACF_EVENT_APPL_TYPE: MQLONG = 1010;
pub const MQIACF_EVENT_ORIGIN: MQLONG = 1011;
pub const MQIACF_PARAMETER_ID: MQLONG = 1012;
pub const MQIACF_ERROR_ID: MQLONG = 1013;
pub const MQIACF_ERROR_IDENTIFIER: MQLONG = 1013;
pub const MQIACF_SELECTOR: MQLONG = 1014;
pub const MQIACF_CHANNEL_ATTRS: MQLONG = 1015;
pub const MQIACF_OBJECT_TYPE: MQLONG = 1016;
pub const MQIACF_ESCAPE_TYPE: MQLONG = 1017;
pub const MQIACF_ERROR_OFFSET: MQLONG = 1018;
pub const MQIACF_AUTH_INFO_ATTRS: MQLONG = 1019;
pub const MQIACF_REASON_QUALIFIER: MQLONG = 1020;
pub const MQIACF_COMMAND: MQLONG = 1021;
pub const MQIACF_OPEN_OPTIONS: MQLONG = 1022;
pub const MQIACF_OPEN_TYPE: MQLONG = 1023;
pub const MQIACF_PROCESS_ID: MQLONG = 1024;
pub const MQIACF_THREAD_ID: MQLONG = 1025;
pub const MQIACF_Q_STATUS_ATTRS: MQLONG = 1026;
pub const MQIACF_UNCOMMITTED_MSGS: MQLONG = 1027;
pub const MQIACF_HANDLE_STATE: MQLONG = 1028;
pub const MQIACF_AUX_ERROR_DATA_INT_1: MQLONG = 1070;
pub const MQIACF_AUX_ERROR_DATA_INT_2: MQLONG = 1071;
pub const MQIACF_CONV_REASON_CODE: MQLONG = 1072;
pub const MQIACF_BRIDGE_TYPE: MQLONG = 1073;
pub const MQIACF_INQUIRY: MQLONG = 1074;
pub const MQIACF_WAIT_INTERVAL: MQLONG = 1075;
pub const MQIACF_OPTIONS: MQLONG = 1076;
pub const MQIACF_BROKER_OPTIONS: MQLONG = 1077;
pub const MQIACF_REFRESH_TYPE: MQLONG = 1078;
pub const MQIACF_SEQUENCE_NUMBER: MQLONG = 1079;
pub const MQIACF_INTEGER_DATA: MQLONG = 1080;
pub const MQIACF_REGISTRATION_OPTIONS: MQLONG = 1081;
pub const MQIACF_PUBLICATION_OPTIONS: MQLONG = 1082;
pub const MQIACF_CLUSTER_INFO: MQLONG = 1083;
pub const MQIACF_Q_MGR_DEFINITION_TYPE: MQLONG = 1084;
pub const MQIACF_Q_MGR_TYPE: MQLONG = 1085;
pub const MQIACF_ACTION: MQLONG = 1086;
pub const MQIACF_SUSPEND: MQLONG = 1087;
pub const MQIACF_BROKER_COUNT: MQLONG = 1088;
pub const MQIACF_APPL_COUNT: MQLONG = 1089;
pub const MQIACF_ANONYMOUS_COUNT: MQLONG = 1090;
pub const MQIACF_REG_REG_OPTIONS: MQLONG = 1091;
pub const MQIACF_DELETE_OPTIONS: MQLONG = 1092;
pub const MQIACF_CLUSTER_Q_MGR_ATTRS: MQLONG = 1093;
pub const MQIACF_REFRESH_INTERVAL: MQLONG = 1094;
pub const MQIACF_REFRESH_REPOSITORY: MQLONG = 1095;
pub const MQIACF_REMOVE_QUEUES: MQLONG = 1096;
pub const MQIACF_OPEN_INPUT_TYPE: MQLONG = 1098;
pub const MQIACF_OPEN_OUTPUT: MQLONG = 1099;
pub const MQIACF_OPEN_SET: MQLONG = 1100;
pub const MQIACF_OPEN_INQUIRE: MQLONG = 1101;
pub const MQIACF_OPEN_BROWSE: MQLONG = 1102;
pub const MQIACF_Q_STATUS_TYPE: MQLONG = 1103;
pub const MQIACF_Q_HANDLE: MQLONG = 1104;
pub const MQIACF_Q_STATUS: MQLONG = 1105;
pub const MQIACF_SECURITY_TYPE: MQLONG = 1106;
pub const MQIACF_CONNECTION_ATTRS: MQLONG = 1107;
pub const MQIACF_CONNECT_OPTIONS: MQLONG = 1108;
pub const MQIACF_CONN_INFO_TYPE: MQLONG = 1110;
pub const MQIACF_CONN_INFO_CONN: MQLONG = 1111;
pub const MQIACF_CONN_INFO_HANDLE: MQLONG = 1112;
pub const MQIACF_CONN_INFO_ALL: MQLONG = 1113;
pub const MQIACF_AUTH_PROFILE_ATTRS: MQLONG = 1114;
pub const MQIACF_AUTHORIZATION_LIST: MQLONG = 1115;
pub const MQIACF_AUTH_ADD_AUTHS: MQLONG = 1116;
pub const MQIACF_AUTH_REMOVE_AUTHS: MQLONG = 1117;
pub const MQIACF_ENTITY_TYPE: MQLONG = 1118;
pub const MQIACF_COMMAND_INFO: MQLONG = 1120;
pub const MQIACF_CMDSCOPE_Q_MGR_COUNT: MQLONG = 1121;
pub const MQIACF_Q_MGR_SYSTEM: MQLONG = 1122;
pub const MQIACF_Q_MGR_EVENT: MQLONG = 1123;
pub const MQIACF_Q_MGR_DQM: MQLONG = 1124;
pub const MQIACF_Q_MGR_CLUSTER: MQLONG = 1125;
pub const MQIACF_QSG_DISPS: MQLONG = 1126;
pub const MQIACF_UOW_STATE: MQLONG = 1128;
pub const MQIACF_SECURITY_ITEM: MQLONG = 1129;
pub const MQIACF_CF_STRUC_STATUS: MQLONG = 1130;
pub const MQIACF_UOW_TYPE: MQLONG = 1132;
pub const MQIACF_CF_STRUC_ATTRS: MQLONG = 1133;
pub const MQIACF_EXCLUDE_INTERVAL: MQLONG = 1134;
pub const MQIACF_CF_STATUS_TYPE: MQLONG = 1135;
pub const MQIACF_CF_STATUS_SUMMARY: MQLONG = 1136;
pub const MQIACF_CF_STATUS_CONNECT: MQLONG = 1137;
pub const MQIACF_CF_STATUS_BACKUP: MQLONG = 1138;
pub const MQIACF_CF_STRUC_TYPE: MQLONG = 1139;
pub const MQIACF_CF_STRUC_SIZE_MAX: MQLONG = 1140;
pub const MQIACF_CF_STRUC_SIZE_USED: MQLONG = 1141;
pub const MQIACF_CF_STRUC_ENTRIES_MAX: MQLONG = 1142;
pub const MQIACF_CF_STRUC_ENTRIES_USED: MQLONG = 1143;
pub const MQIACF_CF_STRUC_BACKUP_SIZE: MQLONG = 1144;
pub const MQIACF_MOVE_TYPE: MQLONG = 1145;
pub const MQIACF_MOVE_TYPE_MOVE: MQLONG = 1146;
pub const MQIACF_MOVE_TYPE_ADD: MQLONG = 1147;
pub const MQIACF_Q_MGR_NUMBER: MQLONG = 1148;
pub const MQIACF_Q_MGR_STATUS: MQLONG = 1149;
pub const MQIACF_DB2_CONN_STATUS: MQLONG = 1150;
pub const MQIACF_SECURITY_ATTRS: MQLONG = 1151;
pub const MQIACF_SECURITY_TIMEOUT: MQLONG = 1152;
pub const MQIACF_SECURITY_INTERVAL: MQLONG = 1153;
pub const MQIACF_SECURITY_SWITCH: MQLONG = 1154;
pub const MQIACF_SECURITY_SETTING: MQLONG = 1155;
pub const MQIACF_STORAGE_CLASS_ATTRS: MQLONG = 1156;
pub const MQIACF_USAGE_TYPE: MQLONG = 1157;
pub const MQIACF_BUFFER_POOL_ID: MQLONG = 1158;
pub const MQIACF_USAGE_TOTAL_PAGES: MQLONG = 1159;
pub const MQIACF_USAGE_UNUSED_PAGES: MQLONG = 1160;
pub const MQIACF_USAGE_PERSIST_PAGES: MQLONG = 1161;
pub const MQIACF_USAGE_NONPERSIST_PAGES: MQLONG = 1162;
pub const MQIACF_USAGE_RESTART_EXTENTS: MQLONG = 1163;
pub const MQIACF_USAGE_EXPAND_COUNT: MQLONG = 1164;
pub const MQIACF_PAGESET_STATUS: MQLONG = 1165;
pub const MQIACF_USAGE_TOTAL_BUFFERS: MQLONG = 1166;
pub const MQIACF_USAGE_DATA_SET_TYPE: MQLONG = 1167;
pub const MQIACF_USAGE_PAGESET: MQLONG = 1168;
pub const MQIACF_USAGE_DATA_SET: MQLONG = 1169;
pub const MQIACF_USAGE_BUFFER_POOL: MQLONG = 1170;
pub const MQIACF_MOVE_COUNT: MQLONG = 1171;
pub const MQIACF_EXPIRY_Q_COUNT: MQLONG = 1172;
pub const MQIACF_CONFIGURATION_OBJECTS: MQLONG = 1173;
pub const MQIACF_CONFIGURATION_EVENTS: MQLONG = 1174;
pub const MQIACF_SYSP_TYPE: MQLONG = 1175;
pub const MQIACF_SYSP_DEALLOC_INTERVAL: MQLONG = 1176;
pub const MQIACF_SYSP_MAX_ARCHIVE: MQLONG = 1177;
pub const MQIACF_SYSP_MAX_READ_TAPES: MQLONG = 1178;
pub const MQIACF_SYSP_IN_BUFFER_SIZE: MQLONG = 1179;
pub const MQIACF_SYSP_OUT_BUFFER_SIZE: MQLONG = 1180;
pub const MQIACF_SYSP_OUT_BUFFER_COUNT: MQLONG = 1181;
pub const MQIACF_SYSP_ARCHIVE: MQLONG = 1182;
pub const MQIACF_SYSP_DUAL_ACTIVE: MQLONG = 1183;
pub const MQIACF_SYSP_DUAL_ARCHIVE: MQLONG = 1184;
pub const MQIACF_SYSP_DUAL_BSDS: MQLONG = 1185;
pub const MQIACF_SYSP_MAX_CONNS: MQLONG = 1186;
pub const MQIACF_SYSP_MAX_CONNS_FORE: MQLONG = 1187;
pub const MQIACF_SYSP_MAX_CONNS_BACK: MQLONG = 1188;
pub const MQIACF_SYSP_EXIT_INTERVAL: MQLONG = 1189;
pub const MQIACF_SYSP_EXIT_TASKS: MQLONG = 1190;
pub const MQIACF_SYSP_CHKPOINT_COUNT: MQLONG = 1191;
pub const MQIACF_SYSP_OTMA_INTERVAL: MQLONG = 1192;
pub const MQIACF_SYSP_Q_INDEX_DEFER: MQLONG = 1193;
pub const MQIACF_SYSP_DB2_TASKS: MQLONG = 1194;
pub const MQIACF_SYSP_RESLEVEL_AUDIT: MQLONG = 1195;
pub const MQIACF_SYSP_ROUTING_CODE: MQLONG = 1196;
pub const MQIACF_SYSP_SMF_ACCOUNTING: MQLONG = 1197;
pub const MQIACF_SYSP_SMF_STATS: MQLONG = 1198;
pub const MQIACF_SYSP_SMF_INTERVAL: MQLONG = 1199;
pub const MQIACF_SYSP_SMF_STAT_TIME_MINS: MQLONG = 1199;
pub const MQIACF_SYSP_TRACE_CLASS: MQLONG = 1200;
pub const MQIACF_SYSP_TRACE_SIZE: MQLONG = 1201;
pub const MQIACF_SYSP_WLM_INTERVAL: MQLONG = 1202;
pub const MQIACF_SYSP_ALLOC_UNIT: MQLONG = 1203;
pub const MQIACF_SYSP_ARCHIVE_RETAIN: MQLONG = 1204;
pub const MQIACF_SYSP_ARCHIVE_WTOR: MQLONG = 1205;
pub const MQIACF_SYSP_BLOCK_SIZE: MQLONG = 1206;
pub const MQIACF_SYSP_CATALOG: MQLONG = 1207;
pub const MQIACF_SYSP_COMPACT: MQLONG = 1208;
pub const MQIACF_SYSP_ALLOC_PRIMARY: MQLONG = 1209;
pub const MQIACF_SYSP_ALLOC_SECONDARY: MQLONG = 1210;
pub const MQIACF_SYSP_PROTECT: MQLONG = 1211;
pub const MQIACF_SYSP_QUIESCE_INTERVAL: MQLONG = 1212;
pub const MQIACF_SYSP_TIMESTAMP: MQLONG = 1213;
pub const MQIACF_SYSP_UNIT_ADDRESS: MQLONG = 1214;
pub const MQIACF_SYSP_UNIT_STATUS: MQLONG = 1215;
pub const MQIACF_SYSP_LOG_COPY: MQLONG = 1216;
pub const MQIACF_SYSP_LOG_USED: MQLONG = 1217;
pub const MQIACF_SYSP_LOG_SUSPEND: MQLONG = 1218;
pub const MQIACF_SYSP_OFFLOAD_STATUS: MQLONG = 1219;
pub const MQIACF_SYSP_TOTAL_LOGS: MQLONG = 1220;
pub const MQIACF_SYSP_FULL_LOGS: MQLONG = 1221;
pub const MQIACF_LISTENER_ATTRS: MQLONG = 1222;
pub const MQIACF_LISTENER_STATUS_ATTRS: MQLONG = 1223;
pub const MQIACF_SERVICE_ATTRS: MQLONG = 1224;
pub const MQIACF_SERVICE_STATUS_ATTRS: MQLONG = 1225;
pub const MQIACF_Q_TIME_INDICATOR: MQLONG = 1226;
pub const MQIACF_OLDEST_MSG_AGE: MQLONG = 1227;
pub const MQIACF_AUTH_OPTIONS: MQLONG = 1228;
pub const MQIACF_Q_MGR_STATUS_ATTRS: MQLONG = 1229;
pub const MQIACF_CONNECTION_COUNT: MQLONG = 1230;
pub const MQIACF_Q_MGR_FACILITY: MQLONG = 1231;
pub const MQIACF_CHINIT_STATUS: MQLONG = 1232;
pub const MQIACF_CMD_SERVER_STATUS: MQLONG = 1233;
pub const MQIACF_ROUTE_DETAIL: MQLONG = 1234;
pub const MQIACF_RECORDED_ACTIVITIES: MQLONG = 1235;
pub const MQIACF_MAX_ACTIVITIES: MQLONG = 1236;
pub const MQIACF_DISCONTINUITY_COUNT: MQLONG = 1237;
pub const MQIACF_ROUTE_ACCUMULATION: MQLONG = 1238;
pub const MQIACF_ROUTE_DELIVERY: MQLONG = 1239;
pub const MQIACF_OPERATION_TYPE: MQLONG = 1240;
pub const MQIACF_BACKOUT_COUNT: MQLONG = 1241;
pub const MQIACF_COMP_CODE: MQLONG = 1242;
pub const MQIACF_ENCODING: MQLONG = 1243;
pub const MQIACF_EXPIRY: MQLONG = 1244;
pub const MQIACF_FEEDBACK: MQLONG = 1245;
pub const MQIACF_MSG_FLAGS: MQLONG = 1247;
pub const MQIACF_MSG_LENGTH: usize = 1248;
pub const MQIACF_MSG_TYPE: MQLONG = 1249;
pub const MQIACF_OFFSET: MQLONG = 1250;
pub const MQIACF_ORIGINAL_LENGTH: usize = 1251;
pub const MQIACF_PERSISTENCE: MQLONG = 1252;
pub const MQIACF_PRIORITY: MQLONG = 1253;
pub const MQIACF_REASON_CODE: MQLONG = 1254;
pub const MQIACF_REPORT: MQLONG = 1255;
pub const MQIACF_VERSION: MQLONG = 1256;
pub const MQIACF_UNRECORDED_ACTIVITIES: MQLONG = 1257;
pub const MQIACF_MONITORING: MQLONG = 1258;
pub const MQIACF_ROUTE_FORWARDING: MQLONG = 1259;
pub const MQIACF_SERVICE_STATUS: MQLONG = 1260;
pub const MQIACF_Q_TYPES: MQLONG = 1261;
pub const MQIACF_USER_ID_SUPPORT: MQLONG = 1262;
pub const MQIACF_INTERFACE_VERSION: MQLONG = 1263;
pub const MQIACF_AUTH_SERVICE_ATTRS: MQLONG = 1264;
pub const MQIACF_USAGE_EXPAND_TYPE: MQLONG = 1265;
pub const MQIACF_SYSP_CLUSTER_CACHE: MQLONG = 1266;
pub const MQIACF_SYSP_DB2_BLOB_TASKS: MQLONG = 1267;
pub const MQIACF_SYSP_WLM_INT_UNITS: MQLONG = 1268;
pub const MQIACF_TOPIC_ATTRS: MQLONG = 1269;
pub const MQIACF_PUBSUB_PROPERTIES: MQLONG = 1271;
pub const MQIACF_DESTINATION_CLASS: MQLONG = 1273;
pub const MQIACF_DURABLE_SUBSCRIPTION: MQLONG = 1274;
pub const MQIACF_SUBSCRIPTION_SCOPE: MQLONG = 1275;
pub const MQIACF_VARIABLE_USER_ID: MQLONG = 1277;
pub const MQIACF_REQUEST_ONLY: MQLONG = 1280;
pub const MQIACF_PUB_PRIORITY: MQLONG = 1283;
pub const MQIACF_SUB_ATTRS: MQLONG = 1287;
pub const MQIACF_WILDCARD_SCHEMA: MQLONG = 1288;
pub const MQIACF_SUB_TYPE: MQLONG = 1289;
pub const MQIACF_MESSAGE_COUNT: MQLONG = 1290;
pub const MQIACF_Q_MGR_PUBSUB: MQLONG = 1291;
pub const MQIACF_Q_MGR_VERSION: MQLONG = 1292;
pub const MQIACF_SUB_STATUS_ATTRS: MQLONG = 1294;
pub const MQIACF_TOPIC_STATUS: MQLONG = 1295;
pub const MQIACF_TOPIC_SUB: MQLONG = 1296;
pub const MQIACF_TOPIC_PUB: MQLONG = 1297;
pub const MQIACF_RETAINED_PUBLICATION: MQLONG = 1300;
pub const MQIACF_TOPIC_STATUS_ATTRS: MQLONG = 1301;
pub const MQIACF_TOPIC_STATUS_TYPE: MQLONG = 1302;
pub const MQIACF_SUB_OPTIONS: MQLONG = 1303;
pub const MQIACF_PUBLISH_COUNT: MQLONG = 1304;
pub const MQIACF_CLEAR_TYPE: MQLONG = 1305;
pub const MQIACF_CLEAR_SCOPE: MQLONG = 1306;
pub const MQIACF_SUB_LEVEL: MQLONG = 1307;
pub const MQIACF_ASYNC_STATE: MQLONG = 1308;
pub const MQIACF_SUB_SUMMARY: MQLONG = 1309;
pub const MQIACF_OBSOLETE_MSGS: MQLONG = 1310;
pub const MQIACF_PUBSUB_STATUS: MQLONG = 1311;
pub const MQIACF_PS_STATUS_TYPE: MQLONG = 1314;
pub const MQIACF_PUBSUB_STATUS_ATTRS: MQLONG = 1318;
pub const MQIACF_SELECTOR_TYPE: MQLONG = 1321;
pub const MQIACF_LOG_COMPRESSION: MQLONG = 1322;
pub const MQIACF_GROUPUR_CHECK_ID: MQLONG = 1323;
pub const MQIACF_MULC_CAPTURE: MQLONG = 1324;
pub const MQIACF_PERMIT_STANDBY: MQLONG = 1325;
pub const MQIACF_OPERATION_MODE: MQLONG = 1326;
pub const MQIACF_COMM_INFO_ATTRS: MQLONG = 1327;
pub const MQIACF_CF_SMDS_BLOCK_SIZE: MQLONG = 1328;
pub const MQIACF_CF_SMDS_EXPAND: MQLONG = 1329;
pub const MQIACF_USAGE_FREE_BUFF: MQLONG = 1330;
pub const MQIACF_USAGE_FREE_BUFF_PERC: MQLONG = 1331;
pub const MQIACF_CF_STRUC_ACCESS: MQLONG = 1332;
pub const MQIACF_CF_STATUS_SMDS: MQLONG = 1333;
pub const MQIACF_SMDS_ATTRS: MQLONG = 1334;
pub const MQIACF_USAGE_SMDS: MQLONG = 1335;
pub const MQIACF_USAGE_BLOCK_SIZE: MQLONG = 1336;
pub const MQIACF_USAGE_DATA_BLOCKS: MQLONG = 1337;
pub const MQIACF_USAGE_EMPTY_BUFFERS: MQLONG = 1338;
pub const MQIACF_USAGE_INUSE_BUFFERS: MQLONG = 1339;
pub const MQIACF_USAGE_LOWEST_FREE: MQLONG = 1340;
pub const MQIACF_USAGE_OFFLOAD_MSGS: MQLONG = 1341;
pub const MQIACF_USAGE_READS_SAVED: MQLONG = 1342;
pub const MQIACF_USAGE_SAVED_BUFFERS: MQLONG = 1343;
pub const MQIACF_USAGE_TOTAL_BLOCKS: MQLONG = 1344;
pub const MQIACF_USAGE_USED_BLOCKS: MQLONG = 1345;
pub const MQIACF_USAGE_USED_RATE: MQLONG = 1346;
pub const MQIACF_USAGE_WAIT_RATE: MQLONG = 1347;
pub const MQIACF_SMDS_OPENMODE: MQLONG = 1348;
pub const MQIACF_SMDS_STATUS: MQLONG = 1349;
pub const MQIACF_SMDS_AVAIL: MQLONG = 1350;
pub const MQIACF_MCAST_REL_INDICATOR: MQLONG = 1351;
pub const MQIACF_CHLAUTH_TYPE: MQLONG = 1352;
pub const MQIACF_MQXR_DIAGNOSTICS_TYPE: MQLONG = 1354;
pub const MQIACF_CHLAUTH_ATTRS: MQLONG = 1355;
pub const MQIACF_OPERATION_ID: MQLONG = 1356;
pub const MQIACF_API_CALLER_TYPE: MQLONG = 1357;
pub const MQIACF_API_ENVIRONMENT: MQLONG = 1358;
pub const MQIACF_TRACE_DETAIL: MQLONG = 1359;
pub const MQIACF_HOBJ: MQLONG = 1360;
pub const MQIACF_CALL_TYPE: MQLONG = 1361;
pub const MQIACF_MQCB_OPERATION: MQLONG = 1362;
pub const MQIACF_MQCB_TYPE: MQLONG = 1363;
pub const MQIACF_MQCB_OPTIONS: MQLONG = 1364;
pub const MQIACF_CLOSE_OPTIONS: MQLONG = 1365;
pub const MQIACF_CTL_OPERATION: MQLONG = 1366;
pub const MQIACF_GET_OPTIONS: MQLONG = 1367;
pub const MQIACF_RECS_PRESENT: MQLONG = 1368;
pub const MQIACF_KNOWN_DEST_COUNT: MQLONG = 1369;
pub const MQIACF_UNKNOWN_DEST_COUNT: MQLONG = 1370;
pub const MQIACF_INVALID_DEST_COUNT: MQLONG = 1371;
pub const MQIACF_RESOLVED_TYPE: MQLONG = 1372;
pub const MQIACF_PUT_OPTIONS: MQLONG = 1373;
pub const MQIACF_BUFFER_LENGTH: usize = 1374;
pub const MQIACF_TRACE_DATA_LENGTH: usize = 1375;
pub const MQIACF_SMDS_EXPANDST: MQLONG = 1376;
pub const MQIACF_STRUC_LENGTH: usize = 1377;
pub const MQIACF_ITEM_COUNT: MQLONG = 1378;
pub const MQIACF_EXPIRY_TIME: MQLONG = 1379;
pub const MQIACF_CONNECT_TIME: MQLONG = 1380;
pub const MQIACF_DISCONNECT_TIME: MQLONG = 1381;
pub const MQIACF_HSUB: MQLONG = 1382;
pub const MQIACF_SUBRQ_OPTIONS: MQLONG = 1383;
pub const MQIACF_XA_RMID: MQLONG = 1384;
pub const MQIACF_XA_FLAGS: MQLONG = 1385;
pub const MQIACF_XA_RETCODE: MQLONG = 1386;
pub const MQIACF_XA_HANDLE: MQLONG = 1387;
pub const MQIACF_XA_RETVAL: MQLONG = 1388;
pub const MQIACF_STATUS_TYPE: MQLONG = 1389;
pub const MQIACF_XA_COUNT: MQLONG = 1390;
pub const MQIACF_SELECTOR_COUNT: MQLONG = 1391;
pub const MQIACF_SELECTORS: MQLONG = 1392;
pub const MQIACF_INTATTR_COUNT: MQLONG = 1393;
pub const MQIACF_INT_ATTRS: MQLONG = 1394;
pub const MQIACF_SUBRQ_ACTION: MQLONG = 1395;
pub const MQIACF_NUM_PUBS: MQLONG = 1396;
pub const MQIACF_POINTER_SIZE: MQLONG = 1397;
pub const MQIACF_REMOVE_AUTHREC: MQLONG = 1398;
pub const MQIACF_XR_ATTRS: MQLONG = 1399;
pub const MQIACF_APPL_FUNCTION_TYPE: MQLONG = 1400;
pub const MQIACF_AMQP_ATTRS: MQLONG = 1401;
pub const MQIACF_EXPORT_TYPE: MQLONG = 1402;
pub const MQIACF_EXPORT_ATTRS: MQLONG = 1403;
pub const MQIACF_SYSTEM_OBJECTS: MQLONG = 1404;
pub const MQIACF_CONNECTION_SWAP: MQLONG = 1405;
pub const MQIACF_AMQP_DIAGNOSTICS_TYPE: MQLONG = 1406;
pub const MQIACF_BUFFER_POOL_LOCATION: MQLONG = 1408;
pub const MQIACF_LDAP_CONNECTION_STATUS: MQLONG = 1409;
pub const MQIACF_SYSP_MAX_ACE_POOL: MQLONG = 1410;
pub const MQIACF_PAGECLAS: MQLONG = 1411;
pub const MQIACF_AUTH_REC_TYPE: MQLONG = 1412;
pub const MQIACF_SYSP_MAX_CONC_OFFLOADS: MQLONG = 1413;
pub const MQIACF_SYSP_ZHYPERWRITE: MQLONG = 1414;
pub const MQIACF_Q_MGR_STATUS_LOG: MQLONG = 1415;
pub const MQIACF_ARCHIVE_LOG_SIZE: MQLONG = 1416;
pub const MQIACF_MEDIA_LOG_SIZE: MQLONG = 1417;
pub const MQIACF_RESTART_LOG_SIZE: MQLONG = 1418;
pub const MQIACF_REUSABLE_LOG_SIZE: MQLONG = 1419;
pub const MQIACF_LOG_IN_USE: MQLONG = 1420;
pub const MQIACF_LOG_UTILIZATION: MQLONG = 1421;
pub const MQIACF_LOG_REDUCTION: MQLONG = 1422;
pub const MQIACF_IGNORE_STATE: MQLONG = 1423;
pub const MQIACF_MOVABLE_APPL_COUNT: MQLONG = 1424;
pub const MQIACF_APPL_INFO_ATTRS: MQLONG = 1425;
pub const MQIACF_APPL_MOVABLE: MQLONG = 1426;
pub const MQIACF_REMOTE_QMGR_ACTIVE: MQLONG = 1427;
pub const MQIACF_APPL_INFO_TYPE: MQLONG = 1428;
pub const MQIACF_APPL_INFO_APPL: MQLONG = 1429;
pub const MQIACF_APPL_INFO_QMGR: MQLONG = 1430;
pub const MQIACF_APPL_INFO_LOCAL: MQLONG = 1431;
pub const MQIACF_APPL_IMMOVABLE_COUNT: MQLONG = 1432;
pub const MQIACF_BALANCED: MQLONG = 1433;
pub const MQIACF_BALSTATE: MQLONG = 1434;
pub const MQIACF_APPL_IMMOVABLE_REASON: MQLONG = 1435;
pub const MQIACF_DS_ENCRYPTED: MQLONG = 1436;
pub const MQIACF_CUR_Q_FILE_SIZE: MQLONG = 1437;
pub const MQIACF_CUR_MAX_FILE_SIZE: MQLONG = 1438;
pub const MQIACF_BALANCING_TYPE: MQLONG = 1439;
pub const MQIACF_BALANCING_OPTIONS: MQLONG = 1440;
pub const MQIACF_BALANCING_TIMEOUT: MQLONG = 1441;
pub const MQIACF_SYSP_SMF_STAT_TIME_SECS: MQLONG = 1442;
pub const MQIACF_SYSP_SMF_ACCT_TIME_MINS: MQLONG = 1443;
pub const MQIACF_SYSP_SMF_ACCT_TIME_SECS: MQLONG = 1444;
pub const MQIACF_Q_MGR_STATUS_INFO_TYPE: MQLONG = 1445;
pub const MQIACF_Q_MGR_STATUS_INFO_Q_MGR: MQLONG = 1446;
pub const MQIACF_Q_MGR_STATUS_INFO_NHA: MQLONG = 1447;
pub const MQIACF_AUTO_CLUSTER_TYPE: MQLONG = 1448;
pub const MQIACF_DATA_FS_IN_USE: MQLONG = 1449;
pub const MQIACF_DATA_FS_SIZE: MQLONG = 1450;
pub const MQIACF_LOG_EXTENT_SIZE: MQLONG = 1451;
pub const MQIACF_LOG_FS_IN_USE: MQLONG = 1452;
pub const MQIACF_LOG_FS_SIZE: MQLONG = 1453;
pub const MQIACF_LOG_PRIMARIES: MQLONG = 1454;
pub const MQIACF_LOG_SECONDARIES: MQLONG = 1455;
pub const MQIACF_LOG_TYPE: MQLONG = 1456;
pub const MQIACF_NHA_INSTANCE_ACTV_CONNS: MQLONG = 1457;
pub const MQIACF_NHA_INSTANCE_BACKLOG: MQLONG = 1458;
pub const MQIACF_NHA_INSTANCE_IN_SYNC: MQLONG = 1459;
pub const MQIACF_NHA_INSTANCE_ROLE: MQLONG = 1460;
pub const MQIACF_NHA_IN_SYNC_INSTANCES: MQLONG = 1461;
pub const MQIACF_NHA_TOTAL_INSTANCES: MQLONG = 1462;
pub const MQIACF_Q_MGR_FS_ENCRYPTED: MQLONG = 1463;
pub const MQIACF_Q_MGR_FS_IN_USE: MQLONG = 1464;
pub const MQIACF_Q_MGR_FS_SIZE: MQLONG = 1465;
pub const MQIACF_SYSP_ZHYPERLINK: MQLONG = 1466;
pub const MQIACF_LAST_USED: MQLONG = 1466;
pub const MQCFACCESS_ENABLED: MQLONG = 0;
pub const MQCFACCESS_SUSPENDED: MQLONG = 1;
pub const MQCFACCESS_DISABLED: MQLONG = 2;
pub const MQS_OPENMODE_NONE: u32 = 0;
pub const MQS_OPENMODE_READONLY: u32 = 1;
pub const MQS_OPENMODE_UPDATE: u32 = 2;
pub const MQS_OPENMODE_RECOVERY: u32 = 3;
pub const MQS_STATUS_CLOSED: u32 = 0;
pub const MQS_STATUS_CLOSING: u32 = 1;
pub const MQS_STATUS_OPENING: u32 = 2;
pub const MQS_STATUS_OPEN: u32 = 3;
pub const MQS_STATUS_NOTENABLED: u32 = 4;
pub const MQS_STATUS_ALLOCFAIL: u32 = 5;
pub const MQS_STATUS_OPENFAIL: u32 = 6;
pub const MQS_STATUS_STGFAIL: u32 = 7;
pub const MQS_STATUS_DATAFAIL: u32 = 8;
pub const MQS_AVAIL_NORMAL: u32 = 0;
pub const MQS_AVAIL_ERROR: MQLONG = 1;
pub const MQS_AVAIL_STOPPED: u32 = 2;
pub const MQBPLOCATION_BELOW: MQLONG = 0;
pub const MQBPLOCATION_ABOVE: MQLONG = 1;
pub const MQBPLOCATION_SWITCHING_ABOVE: MQLONG = 2;
pub const MQBPLOCATION_SWITCHING_BELOW: MQLONG = 3;
pub const MQPAGECLAS_4KB: MQLONG = 0;
pub const MQPAGECLAS_FIXED4KB: MQLONG = 1;
pub const MQS_EXPANDST_NORMAL: u32 = 0;
pub const MQS_EXPANDST_FAILED: u32 = 1;
pub const MQS_EXPANDST_MAXIMUM: u32 = 2;
pub const MQUSAGE_SMDS_AVAILABLE: MQLONG = 0;
pub const MQUSAGE_SMDS_NO_DATA: MQLONG = 1;
pub const MQIACH_FIRST: MQLONG = 1501;
pub const MQIACH_XMIT_PROTOCOL_TYPE: MQLONG = 1501;
pub const MQIACH_BATCH_SIZE: MQLONG = 1502;
pub const MQIACH_DISC_INTERVAL: MQLONG = 1503;
pub const MQIACH_SHORT_TIMER: MQLONG = 1504;
pub const MQIACH_SHORT_RETRY: MQLONG = 1505;
pub const MQIACH_LONG_TIMER: MQLONG = 1506;
pub const MQIACH_LONG_RETRY: MQLONG = 1507;
pub const MQIACH_PUT_AUTHORITY: MQLONG = 1508;
pub const MQIACH_SEQUENCE_NUMBER_WRAP: MQLONG = 1509;
pub const MQIACH_MAX_MSG_LENGTH: usize = 1510;
pub const MQIACH_CHANNEL_TYPE: MQLONG = 1511;
pub const MQIACH_DATA_COUNT: MQLONG = 1512;
pub const MQIACH_NAME_COUNT: MQLONG = 1513;
pub const MQIACH_MSG_SEQUENCE_NUMBER: MQLONG = 1514;
pub const MQIACH_DATA_CONVERSION: MQLONG = 1515;
pub const MQIACH_IN_DOUBT: MQLONG = 1516;
pub const MQIACH_MCA_TYPE: MQLONG = 1517;
pub const MQIACH_SESSION_COUNT: MQLONG = 1518;
pub const MQIACH_ADAPTER: MQLONG = 1519;
pub const MQIACH_COMMAND_COUNT: MQLONG = 1520;
pub const MQIACH_SOCKET: MQLONG = 1521;
pub const MQIACH_PORT: MQLONG = 1522;
pub const MQIACH_CHANNEL_INSTANCE_TYPE: MQLONG = 1523;
pub const MQIACH_CHANNEL_INSTANCE_ATTRS: MQLONG = 1524;
pub const MQIACH_CHANNEL_ERROR_DATA: MQLONG = 1525;
pub const MQIACH_CHANNEL_TABLE: MQLONG = 1526;
pub const MQIACH_CHANNEL_STATUS: MQLONG = 1527;
pub const MQIACH_INDOUBT_STATUS: MQLONG = 1528;
pub const MQIACH_LAST_SEQ_NUMBER: MQLONG = 1529;
pub const MQIACH_LAST_SEQUENCE_NUMBER: MQLONG = 1529;
pub const MQIACH_CURRENT_MSGS: MQLONG = 1531;
pub const MQIACH_CURRENT_SEQ_NUMBER: MQLONG = 1532;
pub const MQIACH_CURRENT_SEQUENCE_NUMBER: MQLONG = 1532;
pub const MQIACH_SSL_RETURN_CODE: MQLONG = 1533;
pub const MQIACH_MSGS: MQLONG = 1534;
pub const MQIACH_BYTES_SENT: MQLONG = 1535;
pub const MQIACH_BYTES_RCVD: MQLONG = 1536;
pub const MQIACH_BYTES_RECEIVED: MQLONG = 1536;
pub const MQIACH_BATCHES: MQLONG = 1537;
pub const MQIACH_BUFFERS_SENT: MQLONG = 1538;
pub const MQIACH_BUFFERS_RCVD: MQLONG = 1539;
pub const MQIACH_BUFFERS_RECEIVED: MQLONG = 1539;
pub const MQIACH_LONG_RETRIES_LEFT: MQLONG = 1540;
pub const MQIACH_SHORT_RETRIES_LEFT: MQLONG = 1541;
pub const MQIACH_MCA_STATUS: MQLONG = 1542;
pub const MQIACH_STOP_REQUESTED: MQLONG = 1543;
pub const MQIACH_MR_COUNT: MQLONG = 1544;
pub const MQIACH_MR_INTERVAL: MQLONG = 1545;
pub const MQIACH_NPM_SPEED: MQLONG = 1562;
pub const MQIACH_HB_INTERVAL: MQLONG = 1563;
pub const MQIACH_BATCH_INTERVAL: MQLONG = 1564;
pub const MQIACH_NETWORK_PRIORITY: MQLONG = 1565;
pub const MQIACH_KEEP_ALIVE_INTERVAL: MQLONG = 1566;
pub const MQIACH_BATCH_HB: MQLONG = 1567;
pub const MQIACH_SSL_CLIENT_AUTH: MQLONG = 1568;
pub const MQIACH_ALLOC_RETRY: MQLONG = 1570;
pub const MQIACH_ALLOC_FAST_TIMER: MQLONG = 1571;
pub const MQIACH_ALLOC_SLOW_TIMER: MQLONG = 1572;
pub const MQIACH_DISC_RETRY: MQLONG = 1573;
pub const MQIACH_PORT_NUMBER: MQLONG = 1574;
pub const MQIACH_HDR_COMPRESSION: MQLONG = 1575;
pub const MQIACH_MSG_COMPRESSION: MQLONG = 1576;
pub const MQIACH_CLWL_CHANNEL_RANK: MQLONG = 1577;
pub const MQIACH_CLWL_CHANNEL_PRIORITY: MQLONG = 1578;
pub const MQIACH_CLWL_CHANNEL_WEIGHT: MQLONG = 1579;
pub const MQIACH_CHANNEL_DISP: MQLONG = 1580;
pub const MQIACH_INBOUND_DISP: MQLONG = 1581;
pub const MQIACH_CHANNEL_TYPES: MQLONG = 1582;
pub const MQIACH_ADAPS_STARTED: MQLONG = 1583;
pub const MQIACH_ADAPS_MAX: MQLONG = 1584;
pub const MQIACH_DISPS_STARTED: MQLONG = 1585;
pub const MQIACH_DISPS_MAX: MQLONG = 1586;
pub const MQIACH_SSLTASKS_STARTED: MQLONG = 1587;
pub const MQIACH_SSLTASKS_MAX: MQLONG = 1588;
pub const MQIACH_CURRENT_CHL: MQLONG = 1589;
pub const MQIACH_CURRENT_CHL_MAX: MQLONG = 1590;
pub const MQIACH_CURRENT_CHL_TCP: MQLONG = 1591;
pub const MQIACH_CURRENT_CHL_LU62: MQLONG = 1592;
pub const MQIACH_ACTIVE_CHL: MQLONG = 1593;
pub const MQIACH_ACTIVE_CHL_MAX: MQLONG = 1594;
pub const MQIACH_ACTIVE_CHL_PAUSED: MQLONG = 1595;
pub const MQIACH_ACTIVE_CHL_STARTED: MQLONG = 1596;
pub const MQIACH_ACTIVE_CHL_STOPPED: MQLONG = 1597;
pub const MQIACH_ACTIVE_CHL_RETRY: MQLONG = 1598;
pub const MQIACH_LISTENER_STATUS: MQLONG = 1599;
pub const MQIACH_SHARED_CHL_RESTART: MQLONG = 1600;
pub const MQIACH_LISTENER_CONTROL: MQLONG = 1601;
pub const MQIACH_BACKLOG: MQLONG = 1602;
pub const MQIACH_XMITQ_TIME_INDICATOR: MQLONG = 1604;
pub const MQIACH_NETWORK_TIME_INDICATOR: MQLONG = 1605;
pub const MQIACH_EXIT_TIME_INDICATOR: MQLONG = 1606;
pub const MQIACH_BATCH_SIZE_INDICATOR: MQLONG = 1607;
pub const MQIACH_XMITQ_MSGS_AVAILABLE: MQLONG = 1608;
pub const MQIACH_CHANNEL_SUBSTATE: MQLONG = 1609;
pub const MQIACH_SSL_KEY_RESETS: MQLONG = 1610;
pub const MQIACH_COMPRESSION_RATE: MQLONG = 1611;
pub const MQIACH_COMPRESSION_TIME: MQLONG = 1612;
pub const MQIACH_MAX_XMIT_SIZE: MQLONG = 1613;
pub const MQIACH_DEF_CHANNEL_DISP: MQLONG = 1614;
pub const MQIACH_SHARING_CONVERSATIONS: MQLONG = 1615;
pub const MQIACH_MAX_SHARING_CONVS: MQLONG = 1616;
pub const MQIACH_CURRENT_SHARING_CONVS: MQLONG = 1617;
pub const MQIACH_MAX_INSTANCES: MQLONG = 1618;
pub const MQIACH_MAX_INSTS_PER_CLIENT: MQLONG = 1619;
pub const MQIACH_CLIENT_CHANNEL_WEIGHT: MQLONG = 1620;
pub const MQIACH_CONNECTION_AFFINITY: MQLONG = 1621;
pub const MQIACH_AUTH_INFO_TYPES: MQLONG = 1622;
pub const MQIACH_RESET_REQUESTED: MQLONG = 1623;
pub const MQIACH_BATCH_DATA_LIMIT: MQLONG = 1624;
pub const MQIACH_MSG_HISTORY: MQLONG = 1625;
pub const MQIACH_MULTICAST_PROPERTIES: MQLONG = 1626;
pub const MQIACH_NEW_SUBSCRIBER_HISTORY: MQLONG = 1627;
pub const MQIACH_MC_HB_INTERVAL: MQLONG = 1628;
pub const MQIACH_USE_CLIENT_ID: MQLONG = 1629;
pub const MQIACH_MQTT_KEEP_ALIVE: MQLONG = 1630;
pub const MQIACH_IN_DOUBT_IN: MQLONG = 1631;
pub const MQIACH_IN_DOUBT_OUT: MQLONG = 1632;
pub const MQIACH_MSGS_SENT: MQLONG = 1633;
pub const MQIACH_MSGS_RECEIVED: MQLONG = 1634;
pub const MQIACH_MSGS_RCVD: MQLONG = 1634;
pub const MQIACH_PENDING_OUT: MQLONG = 1635;
pub const MQIACH_AVAILABLE_CIPHERSPECS: MQLONG = 1636;
pub const MQIACH_MATCH: MQLONG = 1637;
pub const MQIACH_USER_SOURCE: MQLONG = 1638;
pub const MQIACH_WARNING: MQLONG = 1639;
pub const MQIACH_DEF_RECONNECT: MQLONG = 1640;
pub const MQIACH_CHANNEL_SUMMARY_ATTRS: MQLONG = 1642;
pub const MQIACH_PROTOCOL: MQLONG = 1643;
pub const MQIACH_AMQP_KEEP_ALIVE: MQLONG = 1644;
pub const MQIACH_SECURITY_PROTOCOL: MQLONG = 1645;
pub const MQIACH_SPL_PROTECTION: MQLONG = 1646;
pub const MQIACH_LAST_USED: MQLONG = 1646;
pub const MQCAMO_FIRST: MQLONG = 2701;
pub const MQCAMO_CLOSE_DATE: MQLONG = 2701;
pub const MQCAMO_CLOSE_TIME: MQLONG = 2702;
pub const MQCAMO_CONN_DATE: MQLONG = 2703;
pub const MQCAMO_CONN_TIME: MQLONG = 2704;
pub const MQCAMO_DISC_DATE: MQLONG = 2705;
pub const MQCAMO_DISC_TIME: MQLONG = 2706;
pub const MQCAMO_END_DATE: MQLONG = 2707;
pub const MQCAMO_END_TIME: MQLONG = 2708;
pub const MQCAMO_OPEN_DATE: MQLONG = 2709;
pub const MQCAMO_OPEN_TIME: MQLONG = 2710;
pub const MQCAMO_START_DATE: MQLONG = 2711;
pub const MQCAMO_START_TIME: MQLONG = 2712;
pub const MQCAMO_MONITOR_CLASS: MQLONG = 2713;
pub const MQCAMO_MONITOR_TYPE: MQLONG = 2714;
pub const MQCAMO_MONITOR_DESC: MQLONG = 2715;
pub const MQCAMO_LAST_USED: MQLONG = 2715;
pub const MQCACF_FIRST: MQLONG = 3001;
pub const MQCACF_FROM_Q_NAME: MQLONG = 3001;
pub const MQCACF_TO_Q_NAME: MQLONG = 3002;
pub const MQCACF_FROM_PROCESS_NAME: MQLONG = 3003;
pub const MQCACF_TO_PROCESS_NAME: MQLONG = 3004;
pub const MQCACF_FROM_NAMELIST_NAME: MQLONG = 3005;
pub const MQCACF_TO_NAMELIST_NAME: MQLONG = 3006;
pub const MQCACF_FROM_CHANNEL_NAME: MQLONG = 3007;
pub const MQCACF_TO_CHANNEL_NAME: MQLONG = 3008;
pub const MQCACF_FROM_AUTH_INFO_NAME: MQLONG = 3009;
pub const MQCACF_TO_AUTH_INFO_NAME: MQLONG = 3010;
pub const MQCACF_Q_NAMES: MQLONG = 3011;
pub const MQCACF_PROCESS_NAMES: MQLONG = 3012;
pub const MQCACF_NAMELIST_NAMES: MQLONG = 3013;
pub const MQCACF_ESCAPE_TEXT: MQLONG = 3014;
pub const MQCACF_LOCAL_Q_NAMES: MQLONG = 3015;
pub const MQCACF_MODEL_Q_NAMES: MQLONG = 3016;
pub const MQCACF_ALIAS_Q_NAMES: MQLONG = 3017;
pub const MQCACF_REMOTE_Q_NAMES: MQLONG = 3018;
pub const MQCACF_SENDER_CHANNEL_NAMES: MQLONG = 3019;
pub const MQCACF_SERVER_CHANNEL_NAMES: MQLONG = 3020;
pub const MQCACF_REQUESTER_CHANNEL_NAMES: MQLONG = 3021;
pub const MQCACF_RECEIVER_CHANNEL_NAMES: MQLONG = 3022;
pub const MQCACF_OBJECT_Q_MGR_NAME: MQLONG = 3023;
pub const MQCACF_APPL_NAME: MQLONG = 3024;
pub const MQCACF_USER_IDENTIFIER: MQLONG = 3025;
pub const MQCACF_AUX_ERROR_DATA_STR_1: MQLONG = 3026;
pub const MQCACF_AUX_ERROR_DATA_STR_2: MQLONG = 3027;
pub const MQCACF_AUX_ERROR_DATA_STR_3: MQLONG = 3028;
pub const MQCACF_BRIDGE_NAME: MQLONG = 3029;
pub const MQCACF_STREAM_NAME: MQLONG = 3030;
pub const MQCACF_TOPIC: MQLONG = 3031;
pub const MQCACF_PARENT_Q_MGR_NAME: MQLONG = 3032;
pub const MQCACF_CORREL_ID: MQLONG = 3033;
pub const MQCACF_PUBLISH_TIMESTAMP: MQLONG = 3034;
pub const MQCACF_STRING_DATA: MQLONG = 3035;
pub const MQCACF_SUPPORTED_STREAM_NAME: MQLONG = 3036;
pub const MQCACF_REG_TOPIC: MQLONG = 3037;
pub const MQCACF_REG_TIME: MQLONG = 3038;
pub const MQCACF_REG_USER_ID: MQLONG = 3039;
pub const MQCACF_CHILD_Q_MGR_NAME: MQLONG = 3040;
pub const MQCACF_REG_STREAM_NAME: MQLONG = 3041;
pub const MQCACF_REG_Q_MGR_NAME: MQLONG = 3042;
pub const MQCACF_REG_Q_NAME: MQLONG = 3043;
pub const MQCACF_REG_CORREL_ID: MQLONG = 3044;
pub const MQCACF_EVENT_USER_ID: MQLONG = 3045;
pub const MQCACF_OBJECT_NAME: MQLONG = 3046;
pub const MQCACF_EVENT_Q_MGR: MQLONG = 3047;
pub const MQCACF_AUTH_INFO_NAMES: MQLONG = 3048;
pub const MQCACF_EVENT_APPL_IDENTITY: MQLONG = 3049;
pub const MQCACF_EVENT_APPL_NAME: MQLONG = 3050;
pub const MQCACF_EVENT_APPL_ORIGIN: MQLONG = 3051;
pub const MQCACF_SUBSCRIPTION_NAME: MQLONG = 3052;
pub const MQCACF_REG_SUB_NAME: MQLONG = 3053;
pub const MQCACF_SUBSCRIPTION_IDENTITY: MQLONG = 3054;
pub const MQCACF_REG_SUB_IDENTITY: MQLONG = 3055;
pub const MQCACF_SUBSCRIPTION_USER_DATA: MQLONG = 3056;
pub const MQCACF_REG_SUB_USER_DATA: MQLONG = 3057;
pub const MQCACF_APPL_TAG: MQLONG = 3058;
pub const MQCACF_DATA_SET_NAME: MQLONG = 3059;
pub const MQCACF_UOW_START_DATE: MQLONG = 3060;
pub const MQCACF_UOW_START_TIME: MQLONG = 3061;
pub const MQCACF_UOW_LOG_START_DATE: MQLONG = 3062;
pub const MQCACF_UOW_LOG_START_TIME: MQLONG = 3063;
pub const MQCACF_UOW_LOG_EXTENT_NAME: MQLONG = 3064;
pub const MQCACF_PRINCIPAL_ENTITY_NAMES: MQLONG = 3065;
pub const MQCACF_GROUP_ENTITY_NAMES: MQLONG = 3066;
pub const MQCACF_AUTH_PROFILE_NAME: MQLONG = 3067;
pub const MQCACF_ENTITY_NAME: MQLONG = 3068;
pub const MQCACF_SERVICE_COMPONENT: MQLONG = 3069;
pub const MQCACF_RESPONSE_Q_MGR_NAME: MQLONG = 3070;
pub const MQCACF_CURRENT_LOG_EXTENT_NAME: MQLONG = 3071;
pub const MQCACF_RESTART_LOG_EXTENT_NAME: MQLONG = 3072;
pub const MQCACF_MEDIA_LOG_EXTENT_NAME: MQLONG = 3073;
pub const MQCACF_LOG_PATH: MQLONG = 3074;
pub const MQCACF_COMMAND_MQSC: MQLONG = 3075;
pub const MQCACF_Q_MGR_CPF: MQLONG = 3076;
pub const MQCACF_USAGE_LOG_RBA: MQLONG = 3078;
pub const MQCACF_USAGE_LOG_LRSN: MQLONG = 3079;
pub const MQCACF_COMMAND_SCOPE: MQLONG = 3080;
pub const MQCACF_ASID: MQLONG = 3081;
pub const MQCACF_PSB_NAME: MQLONG = 3082;
pub const MQCACF_PST_ID: MQLONG = 3083;
pub const MQCACF_TASK_NUMBER: MQLONG = 3084;
pub const MQCACF_TRANSACTION_ID: MQLONG = 3085;
pub const MQCACF_Q_MGR_UOW_ID: MQLONG = 3086;
pub const MQCACF_ORIGIN_NAME: MQLONG = 3088;
pub const MQCACF_ENV_INFO: MQLONG = 3089;
pub const MQCACF_SECURITY_PROFILE: MQLONG = 3090;
pub const MQCACF_CONFIGURATION_DATE: MQLONG = 3091;
pub const MQCACF_CONFIGURATION_TIME: MQLONG = 3092;
pub const MQCACF_FROM_CF_STRUC_NAME: MQLONG = 3093;
pub const MQCACF_TO_CF_STRUC_NAME: MQLONG = 3094;
pub const MQCACF_CF_STRUC_NAMES: MQLONG = 3095;
pub const MQCACF_FAIL_DATE: MQLONG = 3096;
pub const MQCACF_FAIL_TIME: MQLONG = 3097;
pub const MQCACF_BACKUP_DATE: MQLONG = 3098;
pub const MQCACF_BACKUP_TIME: MQLONG = 3099;
pub const MQCACF_SYSTEM_NAME: MQLONG = 3100;
pub const MQCACF_CF_STRUC_BACKUP_START: MQLONG = 3101;
pub const MQCACF_CF_STRUC_BACKUP_END: MQLONG = 3102;
pub const MQCACF_CF_STRUC_LOG_Q_MGRS: MQLONG = 3103;
pub const MQCACF_FROM_STORAGE_CLASS: MQLONG = 3104;
pub const MQCACF_TO_STORAGE_CLASS: MQLONG = 3105;
pub const MQCACF_STORAGE_CLASS_NAMES: MQLONG = 3106;
pub const MQCACF_DSG_NAME: MQLONG = 3108;
pub const MQCACF_DB2_NAME: MQLONG = 3109;
pub const MQCACF_SYSP_CMD_USER_ID: MQLONG = 3110;
pub const MQCACF_SYSP_OTMA_GROUP: MQLONG = 3111;
pub const MQCACF_SYSP_OTMA_MEMBER: MQLONG = 3112;
pub const MQCACF_SYSP_OTMA_DRU_EXIT: MQLONG = 3113;
pub const MQCACF_SYSP_OTMA_TPIPE_PFX: MQLONG = 3114;
pub const MQCACF_SYSP_ARCHIVE_PFX1: MQLONG = 3115;
pub const MQCACF_SYSP_ARCHIVE_UNIT1: MQLONG = 3116;
pub const MQCACF_SYSP_LOG_CORREL_ID: MQLONG = 3117;
pub const MQCACF_SYSP_UNIT_VOLSER: MQLONG = 3118;
pub const MQCACF_SYSP_Q_MGR_TIME: MQLONG = 3119;
pub const MQCACF_SYSP_Q_MGR_DATE: MQLONG = 3120;
pub const MQCACF_SYSP_Q_MGR_RBA: MQLONG = 3121;
pub const MQCACF_SYSP_LOG_RBA: MQLONG = 3122;
pub const MQCACF_SYSP_SERVICE: MQLONG = 3123;
pub const MQCACF_FROM_LISTENER_NAME: MQLONG = 3124;
pub const MQCACF_TO_LISTENER_NAME: MQLONG = 3125;
pub const MQCACF_FROM_SERVICE_NAME: MQLONG = 3126;
pub const MQCACF_TO_SERVICE_NAME: MQLONG = 3127;
pub const MQCACF_LAST_PUT_DATE: MQLONG = 3128;
pub const MQCACF_LAST_PUT_TIME: MQLONG = 3129;
pub const MQCACF_LAST_GET_DATE: MQLONG = 3130;
pub const MQCACF_LAST_GET_TIME: MQLONG = 3131;
pub const MQCACF_OPERATION_DATE: MQLONG = 3132;
pub const MQCACF_OPERATION_TIME: MQLONG = 3133;
pub const MQCACF_ACTIVITY_DESC: MQLONG = 3134;
pub const MQCACF_APPL_IDENTITY_DATA: MQLONG = 3135;
pub const MQCACF_APPL_ORIGIN_DATA: MQLONG = 3136;
pub const MQCACF_PUT_DATE: MQLONG = 3137;
pub const MQCACF_PUT_TIME: MQLONG = 3138;
pub const MQCACF_REPLY_TO_Q: MQLONG = 3139;
pub const MQCACF_REPLY_TO_Q_MGR: MQLONG = 3140;
pub const MQCACF_RESOLVED_Q_NAME: MQLONG = 3141;
pub const MQCACF_STRUC_ID: MQLONG = 3142;
pub const MQCACF_VALUE_NAME: MQLONG = 3143;
pub const MQCACF_SERVICE_START_DATE: MQLONG = 3144;
pub const MQCACF_SERVICE_START_TIME: MQLONG = 3145;
pub const MQCACF_SYSP_OFFLINE_RBA: MQLONG = 3146;
pub const MQCACF_SYSP_ARCHIVE_PFX2: MQLONG = 3147;
pub const MQCACF_SYSP_ARCHIVE_UNIT2: MQLONG = 3148;
pub const MQCACF_TO_TOPIC_NAME: MQLONG = 3149;
pub const MQCACF_FROM_TOPIC_NAME: MQLONG = 3150;
pub const MQCACF_TOPIC_NAMES: MQLONG = 3151;
pub const MQCACF_SUB_NAME: MQLONG = 3152;
pub const MQCACF_DESTINATION_Q_MGR: MQLONG = 3153;
pub const MQCACF_DESTINATION: MQLONG = 3154;
pub const MQCACF_SUB_USER_ID: MQLONG = 3156;
pub const MQCACF_SUB_USER_DATA: MQLONG = 3159;
pub const MQCACF_SUB_SELECTOR: MQLONG = 3160;
pub const MQCACF_LAST_PUB_DATE: MQLONG = 3161;
pub const MQCACF_LAST_PUB_TIME: MQLONG = 3162;
pub const MQCACF_FROM_SUB_NAME: MQLONG = 3163;
pub const MQCACF_TO_SUB_NAME: MQLONG = 3164;
pub const MQCACF_LAST_MSG_TIME: MQLONG = 3167;
pub const MQCACF_LAST_MSG_DATE: MQLONG = 3168;
pub const MQCACF_SUBSCRIPTION_POINT: MQLONG = 3169;
pub const MQCACF_FILTER: MQLONG = 3170;
pub const MQCACF_NONE: MQLONG = 3171;
pub const MQCACF_ADMIN_TOPIC_NAMES: MQLONG = 3172;
pub const MQCACF_ROUTING_FINGER_PRINT: MQLONG = 3173;
pub const MQCACF_APPL_DESC: MQLONG = 3174;
pub const MQCACF_Q_MGR_START_DATE: MQLONG = 3175;
pub const MQCACF_Q_MGR_START_TIME: MQLONG = 3176;
pub const MQCACF_FROM_COMM_INFO_NAME: MQLONG = 3177;
pub const MQCACF_TO_COMM_INFO_NAME: MQLONG = 3178;
pub const MQCACF_CF_OFFLOAD_SIZE1: MQLONG = 3179;
pub const MQCACF_CF_OFFLOAD_SIZE2: MQLONG = 3180;
pub const MQCACF_CF_OFFLOAD_SIZE3: MQLONG = 3181;
pub const MQCACF_CF_SMDS_GENERIC_NAME: MQLONG = 3182;
pub const MQCACF_CF_SMDS: MQLONG = 3183;
pub const MQCACF_RECOVERY_DATE: MQLONG = 3184;
pub const MQCACF_RECOVERY_TIME: MQLONG = 3185;
pub const MQCACF_CF_SMDSCONN: MQLONG = 3186;
pub const MQCACF_CF_STRUC_NAME: MQLONG = 3187;
pub const MQCACF_ALTERNATE_USERID: MQLONG = 3188;
pub const MQCACF_CHAR_ATTRS: MQLONG = 3189;
pub const MQCACF_DYNAMIC_Q_NAME: MQLONG = 3190;
pub const MQCACF_HOST_NAME: MQLONG = 3191;
pub const MQCACF_MQCB_NAME: MQLONG = 3192;
pub const MQCACF_OBJECT_STRING: MQLONG = 3193;
pub const MQCACF_RESOLVED_LOCAL_Q_MGR: MQLONG = 3194;
pub const MQCACF_RESOLVED_LOCAL_Q_NAME: MQLONG = 3195;
pub const MQCACF_RESOLVED_OBJECT_STRING: MQLONG = 3196;
pub const MQCACF_RESOLVED_Q_MGR: MQLONG = 3197;
pub const MQCACF_SELECTION_STRING: MQLONG = 3198;
pub const MQCACF_XA_INFO: MQLONG = 3199;
pub const MQCACF_APPL_FUNCTION: MQLONG = 3200;
pub const MQCACF_XQH_REMOTE_Q_NAME: MQLONG = 3201;
pub const MQCACF_XQH_REMOTE_Q_MGR: MQLONG = 3202;
pub const MQCACF_XQH_PUT_TIME: MQLONG = 3203;
pub const MQCACF_XQH_PUT_DATE: MQLONG = 3204;
pub const MQCACF_EXCL_OPERATOR_MESSAGES: MQLONG = 3205;
pub const MQCACF_CSP_USER_IDENTIFIER: MQLONG = 3206;
pub const MQCACF_AMQP_CLIENT_ID: MQLONG = 3207;
pub const MQCACF_ARCHIVE_LOG_EXTENT_NAME: MQLONG = 3208;
pub const MQCACF_APPL_IMMOVABLE_DATE: MQLONG = 3209;
pub const MQCACF_APPL_IMMOVABLE_TIME: MQLONG = 3210;
pub const MQCACF_NHA_INSTANCE_NAME: MQLONG = 3211;
pub const MQCACF_Q_MGR_DATA_PATH: MQLONG = 3212;
pub const MQCACF_UNIFORM_CLUSTER_NAME: MQLONG = 3213;
pub const MQCACF_LOG_START_DATE: MQLONG = 3214;
pub const MQCACF_LOG_START_LSN: MQLONG = 3215;
pub const MQCACF_LOG_START_TIME: MQLONG = 3216;
pub const MQCACF_NHA_GROUP_INITIAL_DATE: MQLONG = 3217;
pub const MQCACF_NHA_GROUP_INITIAL_LSN: MQLONG = 3218;
pub const MQCACF_NHA_GROUP_INITIAL_TIME: MQLONG = 3219;
pub const MQCACF_NHA_REPL_ADDRESS: MQLONG = 3220;
pub const MQCACF_LAST_USED: MQLONG = 3220;
pub const MQCACH_FIRST: MQLONG = 3501;
pub const MQCACH_CHANNEL_NAME: MQLONG = 3501;
pub const MQCACH_DESC: MQLONG = 3502;
pub const MQCACH_MODE_NAME: MQLONG = 3503;
pub const MQCACH_TP_NAME: MQLONG = 3504;
pub const MQCACH_XMIT_Q_NAME: MQLONG = 3505;
pub const MQCACH_CONNECTION_NAME: MQLONG = 3506;
pub const MQCACH_MCA_NAME: MQLONG = 3507;
pub const MQCACH_SEC_EXIT_NAME: MQLONG = 3508;
pub const MQCACH_MSG_EXIT_NAME: MQLONG = 3509;
pub const MQCACH_SEND_EXIT_NAME: MQLONG = 3510;
pub const MQCACH_RCV_EXIT_NAME: MQLONG = 3511;
pub const MQCACH_CHANNEL_NAMES: MQLONG = 3512;
pub const MQCACH_SEC_EXIT_USER_DATA: MQLONG = 3513;
pub const MQCACH_MSG_EXIT_USER_DATA: MQLONG = 3514;
pub const MQCACH_SEND_EXIT_USER_DATA: MQLONG = 3515;
pub const MQCACH_RCV_EXIT_USER_DATA: MQLONG = 3516;
pub const MQCACH_USER_ID: MQLONG = 3517;
pub const MQCACH_PASSWORD: MQLONG = 3518;
pub const MQCACH_LOCAL_ADDRESS: MQLONG = 3520;
pub const MQCACH_LOCAL_NAME: MQLONG = 3521;
pub const MQCACH_LAST_MSG_TIME: MQLONG = 3524;
pub const MQCACH_LAST_MSG_DATE: MQLONG = 3525;
pub const MQCACH_MCA_USER_ID: MQLONG = 3527;
pub const MQCACH_CHANNEL_START_TIME: MQLONG = 3528;
pub const MQCACH_CHANNEL_START_DATE: MQLONG = 3529;
pub const MQCACH_MCA_JOB_NAME: MQLONG = 3530;
pub const MQCACH_LAST_LUWID: MQLONG = 3531;
pub const MQCACH_CURRENT_LUWID: MQLONG = 3532;
pub const MQCACH_FORMAT_NAME: MQLONG = 3533;
pub const MQCACH_MR_EXIT_NAME: MQLONG = 3534;
pub const MQCACH_MR_EXIT_USER_DATA: MQLONG = 3535;
pub const MQCACH_SSL_CIPHER_SPEC: MQLONG = 3544;
pub const MQCACH_SSL_PEER_NAME: MQLONG = 3545;
pub const MQCACH_SSL_HANDSHAKE_STAGE: MQLONG = 3546;
pub const MQCACH_SSL_SHORT_PEER_NAME: MQLONG = 3547;
pub const MQCACH_REMOTE_APPL_TAG: MQLONG = 3548;
pub const MQCACH_SSL_CERT_USER_ID: MQLONG = 3549;
pub const MQCACH_SSL_CERT_ISSUER_NAME: MQLONG = 3550;
pub const MQCACH_LU_NAME: MQLONG = 3551;
pub const MQCACH_IP_ADDRESS: MQLONG = 3552;
pub const MQCACH_TCP_NAME: MQLONG = 3553;
pub const MQCACH_LISTENER_NAME: MQLONG = 3554;
pub const MQCACH_LISTENER_DESC: MQLONG = 3555;
pub const MQCACH_LISTENER_START_DATE: MQLONG = 3556;
pub const MQCACH_LISTENER_START_TIME: MQLONG = 3557;
pub const MQCACH_SSL_KEY_RESET_DATE: MQLONG = 3558;
pub const MQCACH_SSL_KEY_RESET_TIME: MQLONG = 3559;
pub const MQCACH_REMOTE_VERSION: MQLONG = 3560;
pub const MQCACH_REMOTE_PRODUCT: MQLONG = 3561;
pub const MQCACH_GROUP_ADDRESS: MQLONG = 3562;
pub const MQCACH_JAAS_CONFIG: MQLONG = 3563;
pub const MQCACH_CLIENT_ID: MQLONG = 3564;
pub const MQCACH_SSL_KEY_PASSPHRASE: MQLONG = 3565;
pub const MQCACH_CONNECTION_NAME_LIST: MQLONG = 3566;
pub const MQCACH_CLIENT_USER_ID: MQLONG = 3567;
pub const MQCACH_MCA_USER_ID_LIST: MQLONG = 3568;
pub const MQCACH_SSL_CIPHER_SUITE: MQLONG = 3569;
pub const MQCACH_WEBCONTENT_PATH: MQLONG = 3570;
pub const MQCACH_TOPIC_ROOT: MQLONG = 3571;
pub const MQCACH_TEMPORARY_MODEL_Q: MQLONG = 3572;
pub const MQCACH_TEMPORARY_Q_PREFIX: MQLONG = 3573;
pub const MQCACH_LAST_USED: MQLONG = 3573;
pub const MQGACF_FIRST: MQLONG = 8001;
pub const MQGACF_COMMAND_CONTEXT: MQLONG = 8001;
pub const MQGACF_COMMAND_DATA: MQLONG = 8002;
pub const MQGACF_TRACE_ROUTE: MQLONG = 8003;
pub const MQGACF_OPERATION: MQLONG = 8004;
pub const MQGACF_ACTIVITY: MQLONG = 8005;
pub const MQGACF_EMBEDDED_MQMD: MQLONG = 8006;
pub const MQGACF_MESSAGE: MQLONG = 8007;
pub const MQGACF_MQMD: MQLONG = 8008;
pub const MQGACF_VALUE_NAMING: MQLONG = 8009;
pub const MQGACF_Q_ACCOUNTING_DATA: MQLONG = 8010;
pub const MQGACF_Q_STATISTICS_DATA: MQLONG = 8011;
pub const MQGACF_CHL_STATISTICS_DATA: MQLONG = 8012;
pub const MQGACF_ACTIVITY_TRACE: MQLONG = 8013;
pub const MQGACF_APP_DIST_LIST: MQLONG = 8014;
pub const MQGACF_MONITOR_CLASS: MQLONG = 8015;
pub const MQGACF_MONITOR_TYPE: MQLONG = 8016;
pub const MQGACF_MONITOR_ELEMENT: MQLONG = 8017;
pub const MQGACF_APPL_STATUS: MQLONG = 8018;
pub const MQGACF_CHANGED_APPLS: MQLONG = 8019;
pub const MQGACF_ALL_APPLS: MQLONG = 8020;
pub const MQGACF_APPL_BALANCE: MQLONG = 8021;
pub const MQGACF_LAST_USED: MQLONG = 8021;
pub const MQACT_FORCE_REMOVE: MQLONG = 1;
pub const MQACT_ADVANCE_LOG: MQLONG = 2;
pub const MQACT_COLLECT_STATISTICS: MQLONG = 3;
pub const MQACT_PUBSUB: MQLONG = 4;
pub const MQACT_ADD: MQLONG = 5;
pub const MQACT_REPLACE: MQLONG = 6;
pub const MQACT_REMOVE: MQLONG = 7;
pub const MQACT_REMOVEALL: MQLONG = 8;
pub const MQACT_FAIL: MQLONG = 9;
pub const MQACT_REDUCE_LOG: MQLONG = 10;
pub const MQACT_ARCHIVE_LOG: MQLONG = 11;
pub const MQIS_NO: MQLONG = 0;
pub const MQIS_YES: MQLONG = 1;
pub const MQAPPL_IMMOVABLE: MQLONG = 0;
pub const MQAPPL_MOVABLE: MQLONG = 1;
pub const MQACTIVE_NO: MQLONG = 0;
pub const MQACTIVE_YES: MQLONG = 1;
pub const MQBALANCED_NO: MQLONG = 0;
pub const MQBALANCED_YES: MQLONG = 1;
pub const MQBALANCED_NOT_APPLICABLE: MQLONG = 2;
pub const MQBALANCED_UNKNOWN: MQLONG = 3;
pub const MQBALSTATE_NOT_APPLICABLE: MQLONG = 0;
pub const MQBALSTATE_LOW: MQLONG = 1;
pub const MQBALSTATE_OK: MQLONG = 2;
pub const MQBALSTATE_HIGH: MQLONG = 3;
pub const MQBALSTATE_UNKNOWN: MQLONG = 4;
pub const MQIMMREASON_NONE: MQLONG = 0;
pub const MQIMMREASON_NOT_CLIENT: MQLONG = 1;
pub const MQIMMREASON_NOT_RECONNECTABLE: MQLONG = 2;
pub const MQIMMREASON_MOVING: MQLONG = 3;
pub const MQIMMREASON_APPLNAME_CHANGED: MQLONG = 4;
pub const MQIMMREASON_IN_TRANSACTION: MQLONG = 5;
pub const MQIMMREASON_AWAITS_REPLY: MQLONG = 6;
pub const MQIMMREASON_NO_REDIRECT: MQLONG = 7;
pub const MQAS_NONE: MQLONG = 0;
pub const MQAS_STARTED: MQLONG = 1;
pub const MQAS_START_WAIT: MQLONG = 2;
pub const MQAS_STOPPED: MQLONG = 3;
pub const MQAS_SUSPENDED: MQLONG = 4;
pub const MQAS_SUSPENDED_TEMPORARY: MQLONG = 5;
pub const MQAS_ACTIVE: MQLONG = 6;
pub const MQAS_INACTIVE: MQLONG = 7;
pub const MQAUTH_NONE: MQLONG = 0;
pub const MQAUTH_ALT_USER_AUTHORITY: MQLONG = 1;
pub const MQAUTH_BROWSE: MQLONG = 2;
pub const MQAUTH_CHANGE: MQLONG = 3;
pub const MQAUTH_CLEAR: MQLONG = 4;
pub const MQAUTH_CONNECT: MQLONG = 5;
pub const MQAUTH_CREATE: MQLONG = 6;
pub const MQAUTH_DELETE: MQLONG = 7;
pub const MQAUTH_DISPLAY: MQLONG = 8;
pub const MQAUTH_INPUT: MQLONG = 9;
pub const MQAUTH_INQUIRE: MQLONG = 10;
pub const MQAUTH_OUTPUT: MQLONG = 11;
pub const MQAUTH_PASS_ALL_CONTEXT: MQLONG = 12;
pub const MQAUTH_PASS_IDENTITY_CONTEXT: MQLONG = 13;
pub const MQAUTH_SET: MQLONG = 14;
pub const MQAUTH_SET_ALL_CONTEXT: MQLONG = 15;
pub const MQAUTH_SET_IDENTITY_CONTEXT: MQLONG = 16;
pub const MQAUTH_CONTROL: MQLONG = 17;
pub const MQAUTH_CONTROL_EXTENDED: MQLONG = 18;
pub const MQAUTH_PUBLISH: MQLONG = 19;
pub const MQAUTH_SUBSCRIBE: MQLONG = 20;
pub const MQAUTH_RESUME: MQLONG = 21;
pub const MQAUTH_SYSTEM: MQLONG = 22;
pub const MQAUTH_ALL: MQLONG = -1;
pub const MQAUTH_ALL_ADMIN: MQLONG = -2;
pub const MQAUTH_ALL_MQI: MQLONG = -3;
pub const MQAUTHOPT_ENTITY_EXPLICIT: MQLONG = 1;
pub const MQAUTHOPT_ENTITY_SET: MQLONG = 2;
pub const MQAUTHOPT_NAME_EXPLICIT: MQLONG = 16;
pub const MQAUTHOPT_NAME_ALL_MATCHING: MQLONG = 32;
pub const MQAUTHOPT_NAME_AS_WILDCARD: MQLONG = 64;
pub const MQAUTHOPT_CUMULATIVE: MQLONG = 256;
pub const MQAUTHOPT_EXCLUDE_TEMP: MQLONG = 512;
pub const MQBT_OTMA: MQLONG = 1;
pub const MQCFO_REFRESH_REPOSITORY_YES: MQLONG = 1;
pub const MQCFO_REFRESH_REPOSITORY_NO: MQLONG = 0;
pub const MQCFO_REMOVE_QUEUES_YES: MQLONG = 1;
pub const MQCFO_REMOVE_QUEUES_NO: MQLONG = 0;
pub const MQCAUT_ALL: MQLONG = 0;
pub const MQCAUT_BLOCKUSER: MQLONG = 1;
pub const MQCAUT_BLOCKADDR: MQLONG = 2;
pub const MQCAUT_SSLPEERMAP: MQLONG = 3;
pub const MQCAUT_ADDRESSMAP: MQLONG = 4;
pub const MQCAUT_USERMAP: MQLONG = 5;
pub const MQCAUT_QMGRMAP: MQLONG = 6;
pub const MQCFSTATUS_NOT_FOUND: MQLONG = 0;
pub const MQCFSTATUS_ACTIVE: MQLONG = 1;
pub const MQCFSTATUS_IN_RECOVER: MQLONG = 2;
pub const MQCFSTATUS_IN_BACKUP: MQLONG = 3;
pub const MQCFSTATUS_FAILED: MQLONG = 4;
pub const MQCFSTATUS_NONE: MQLONG = 5;
pub const MQCFSTATUS_UNKNOWN: MQLONG = 6;
pub const MQCFSTATUS_RECOVERED: MQLONG = 7;
pub const MQCFSTATUS_EMPTY: MQLONG = 8;
pub const MQCFSTATUS_NEW: MQLONG = 9;
pub const MQCFSTATUS_ADMIN_INCOMPLETE: MQLONG = 20;
pub const MQCFSTATUS_NEVER_USED: MQLONG = 21;
pub const MQCFSTATUS_NO_BACKUP: MQLONG = 22;
pub const MQCFSTATUS_NOT_FAILED: MQLONG = 23;
pub const MQCFSTATUS_NOT_RECOVERABLE: MQLONG = 24;
pub const MQCFSTATUS_XES_ERROR: MQLONG = 25;
pub const MQCFTYPE_APPL: MQLONG = 0;
pub const MQCFTYPE_ADMIN: MQLONG = 1;
pub const MQCHIDS_NOT_INDOUBT: MQLONG = 0;
pub const MQCHIDS_INDOUBT: MQLONG = 1;
pub const MQCHLD_ALL: MQLONG = -1;
pub const MQCHLD_DEFAULT: MQLONG = 1;
pub const MQCHLD_SHARED: MQLONG = 2;
pub const MQCHLD_PRIVATE: MQLONG = 4;
pub const MQCHLD_FIXSHARED: MQLONG = 5;
pub const MQUCI_YES: MQLONG = 1;
pub const MQUCI_NO: MQLONG = 0;
pub const MQCHS_INACTIVE: MQLONG = 0;
pub const MQCHS_BINDING: MQLONG = 1;
pub const MQCHS_STARTING: MQLONG = 2;
pub const MQCHS_RUNNING: MQLONG = 3;
pub const MQCHS_STOPPING: MQLONG = 4;
pub const MQCHS_RETRYING: MQLONG = 5;
pub const MQCHS_STOPPED: MQLONG = 6;
pub const MQCHS_REQUESTING: MQLONG = 7;
pub const MQCHS_PAUSED: MQLONG = 8;
pub const MQCHS_DISCONNECTED: MQLONG = 9;
pub const MQCHS_INITIALIZING: MQLONG = 13;
pub const MQCHS_SWITCHING: MQLONG = 14;
pub const MQCHSSTATE_OTHER: MQLONG = 0;
pub const MQCHSSTATE_END_OF_BATCH: MQLONG = 100;
pub const MQCHSSTATE_SENDING: MQLONG = 200;
pub const MQCHSSTATE_RECEIVING: MQLONG = 300;
pub const MQCHSSTATE_SERIALIZING: MQLONG = 400;
pub const MQCHSSTATE_RESYNCHING: MQLONG = 500;
pub const MQCHSSTATE_HEARTBEATING: MQLONG = 600;
pub const MQCHSSTATE_IN_SCYEXIT: MQLONG = 700;
pub const MQCHSSTATE_IN_RCVEXIT: MQLONG = 800;
pub const MQCHSSTATE_IN_SENDEXIT: MQLONG = 900;
pub const MQCHSSTATE_IN_MSGEXIT: MQLONG = 1000;
pub const MQCHSSTATE_IN_MREXIT: MQLONG = 1100;
pub const MQCHSSTATE_IN_CHADEXIT: MQLONG = 1200;
pub const MQCHSSTATE_NET_CONNECTING: MQLONG = 1250;
pub const MQCHSSTATE_SSL_HANDSHAKING: MQLONG = 1300;
pub const MQCHSSTATE_NAME_SERVER: MQLONG = 1400;
pub const MQCHSSTATE_IN_MQPUT: MQLONG = 1500;
pub const MQCHSSTATE_IN_MQGET: MQLONG = 1600;
pub const MQCHSSTATE_IN_MQI_CALL: MQLONG = 1700;
pub const MQCHSSTATE_COMPRESSING: MQLONG = 1800;
pub const MQCHSH_RESTART_NO: MQLONG = 0;
pub const MQCHSH_RESTART_YES: MQLONG = 1;
pub const MQCHSR_STOP_NOT_REQUESTED: MQLONG = 0;
pub const MQCHSR_STOP_REQUESTED: MQLONG = 1;
pub const MQCHRR_RESET_NOT_REQUESTED: MQLONG = 0;
pub const MQCHTAB_Q_MGR: MQLONG = 1;
pub const MQCHTAB_CLNTCONN: MQLONG = 2;
pub const MQCLRS_LOCAL: MQLONG = 1;
pub const MQCLRS_GLOBAL: MQLONG = 2;
pub const MQCLRT_RETAINED: MQLONG = 1;
pub const MQCMDI_CMDSCOPE_ACCEPTED: MQLONG = 1;
pub const MQCMDI_CMDSCOPE_GENERATED: MQLONG = 2;
pub const MQCMDI_CMDSCOPE_COMPLETED: MQLONG = 3;
pub const MQCMDI_QSG_DISP_COMPLETED: MQLONG = 4;
pub const MQCMDI_COMMAND_ACCEPTED: MQLONG = 5;
pub const MQCMDI_CLUSTER_REQUEST_QUEUED: MQLONG = 6;
pub const MQCMDI_CHANNEL_INIT_STARTED: MQLONG = 7;
pub const MQCMDI_RECOVER_STARTED: MQLONG = 11;
pub const MQCMDI_BACKUP_STARTED: MQLONG = 12;
pub const MQCMDI_RECOVER_COMPLETED: MQLONG = 13;
pub const MQCMDI_SEC_TIMER_ZERO: MQLONG = 14;
pub const MQCMDI_REFRESH_CONFIGURATION: MQLONG = 16;
pub const MQCMDI_SEC_SIGNOFF_ERROR: MQLONG = 17;
pub const MQCMDI_IMS_BRIDGE_SUSPENDED: MQLONG = 18;
pub const MQCMDI_DB2_SUSPENDED: MQLONG = 19;
pub const MQCMDI_DB2_OBSOLETE_MSGS: MQLONG = 20;
pub const MQCMDI_SEC_UPPERCASE: MQLONG = 21;
pub const MQCMDI_SEC_MIXEDCASE: MQLONG = 22;
pub const MQDISCONNECT_NORMAL: MQLONG = 0;
pub const MQDISCONNECT_IMPLICIT: MQLONG = 1;
pub const MQDISCONNECT_Q_MGR: MQLONG = 2;
pub const MQET_MQSC: MQLONG = 1;
pub const MQEVO_OTHER: MQLONG = 0;
pub const MQEVO_CONSOLE: MQLONG = 1;
pub const MQEVO_INIT: MQLONG = 2;
pub const MQEVO_MSG: MQLONG = 3;
pub const MQEVO_MQSET: MQLONG = 4;
pub const MQEVO_INTERNAL: MQLONG = 5;
pub const MQEVO_MQSUB: MQLONG = 6;
pub const MQEVO_CTLMSG: MQLONG = 7;
pub const MQEVO_REST: MQLONG = 8;
pub const MQEVR_DISABLED: MQLONG = 0;
pub const MQEVR_ENABLED: MQLONG = 1;
pub const MQEVR_EXCEPTION: MQLONG = 2;
pub const MQEVR_NO_DISPLAY: MQLONG = 3;
pub const MQEVR_API_ONLY: MQLONG = 4;
pub const MQEVR_ADMIN_ONLY: MQLONG = 5;
pub const MQEVR_USER_ONLY: MQLONG = 6;
pub const MQFC_YES: MQLONG = 1;
pub const MQFC_NO: MQLONG = 0;
pub const MQHSTATE_INACTIVE: MQLONG = 0;
pub const MQHSTATE_ACTIVE: MQLONG = 1;
pub const MQINBD_Q_MGR: MQLONG = 0;
pub const MQINBD_GROUP: MQLONG = 3;
pub const MQIDO_COMMIT: MQLONG = 1;
pub const MQIDO_BACKOUT: MQLONG = 2;
pub const MQMATCH_GENERIC: MQLONG = 0;
pub const MQMATCH_RUNCHECK: MQLONG = 1;
pub const MQMATCH_EXACT: MQLONG = 2;
pub const MQMATCH_ALL: MQLONG = 3;
pub const MQMCAS_STOPPED: MQLONG = 0;
pub const MQMCAS_RUNNING: MQLONG = 3;
pub const MQMODE_FORCE: MQLONG = 0;
pub const MQMODE_QUIESCE: MQLONG = 1;
pub const MQMODE_TERMINATE: MQLONG = 2;
pub const MQMLP_TOLERATE_UNPROTECTED_NO: MQLONG = 0;
pub const MQMLP_TOLERATE_UNPROTECTED_YES: MQLONG = 1;
pub const MQMLP_ENCRYPTION_ALG_NONE: MQLONG = 0;
pub const MQMLP_ENCRYPTION_ALG_RC2: MQLONG = 1;
pub const MQMLP_ENCRYPTION_ALG_DES: MQLONG = 2;
pub const MQMLP_ENCRYPTION_ALG_3DES: MQLONG = 3;
pub const MQMLP_ENCRYPTION_ALG_AES128: MQLONG = 4;
pub const MQMLP_ENCRYPTION_ALG_AES256: MQLONG = 5;
pub const MQMLP_SIGN_ALG_NONE: MQLONG = 0;
pub const MQMLP_SIGN_ALG_MD5: MQLONG = 1;
pub const MQMLP_SIGN_ALG_SHA1: MQLONG = 2;
pub const MQMLP_SIGN_ALG_SHA224: MQLONG = 3;
pub const MQMLP_SIGN_ALG_SHA256: MQLONG = 4;
pub const MQMLP_SIGN_ALG_SHA384: MQLONG = 5;
pub const MQMLP_SIGN_ALG_SHA512: MQLONG = 6;
pub const MQPO_YES: MQLONG = 1;
pub const MQPO_NO: MQLONG = 0;
pub const MQPSCT_NONE: MQLONG = -1;
pub const MQPSST_ALL: MQLONG = 0;
pub const MQPSST_LOCAL: MQLONG = 1;
pub const MQPSST_PARENT: MQLONG = 2;
pub const MQPSST_CHILD: MQLONG = 3;
pub const MQPS_STATUS_INACTIVE: MQLONG = 0;
pub const MQPS_STATUS_STARTING: MQLONG = 1;
pub const MQPS_STATUS_STOPPING: MQLONG = 2;
pub const MQPS_STATUS_ACTIVE: MQLONG = 3;
pub const MQPS_STATUS_COMPAT: MQLONG = 4;
pub const MQPS_STATUS_ERROR: MQLONG = 5;
pub const MQPS_STATUS_REFUSED: MQLONG = 6;
pub const MQQMDT_EXPLICIT_CLUSTER_SENDER: MQLONG = 1;
pub const MQQMDT_AUTO_CLUSTER_SENDER: MQLONG = 2;
pub const MQQMDT_AUTO_EXP_CLUSTER_SENDER: MQLONG = 4;
pub const MQQMDT_CLUSTER_RECEIVER: MQLONG = 3;
pub const MQQMFAC_IMS_BRIDGE: MQLONG = 1;
pub const MQQMFAC_DB2: MQLONG = 2;
pub const MQQMSTA_STARTING: MQLONG = 1;
pub const MQQMSTA_RUNNING: MQLONG = 2;
pub const MQQMSTA_QUIESCING: MQLONG = 3;
pub const MQQMSTA_STANDBY: MQLONG = 4;
pub const MQQMT_NORMAL: MQLONG = 0;
pub const MQQMT_REPOSITORY: MQLONG = 1;
pub const MQQO_YES: MQLONG = 1;
pub const MQQO_NO: MQLONG = 0;
pub const MQQSIE_NONE: MQLONG = 0;
pub const MQQSIE_HIGH: MQLONG = 1;
pub const MQQSIE_OK: MQLONG = 2;
pub const MQQSOT_ALL: MQLONG = 1;
pub const MQQSOT_INPUT: MQLONG = 2;
pub const MQQSOT_OUTPUT: MQLONG = 3;
pub const MQQSGS_UNKNOWN: MQLONG = 0;
pub const MQQSGS_CREATED: MQLONG = 1;
pub const MQQSGS_ACTIVE: MQLONG = 2;
pub const MQQSGS_INACTIVE: MQLONG = 3;
pub const MQQSGS_FAILED: MQLONG = 4;
pub const MQQSGS_PENDING: MQLONG = 5;
pub const MQQSO_NO: MQLONG = 0;
pub const MQQSO_YES: MQLONG = 1;
pub const MQQSO_SHARED: MQLONG = 1;
pub const MQQSO_EXCLUSIVE: MQLONG = 2;
pub const MQQSUM_YES: MQLONG = 1;
pub const MQQSUM_NO: MQLONG = 0;
pub const MQRAR_YES: MQLONG = 1;
pub const MQRAR_NO: MQLONG = 0;
pub const MQRP_YES: MQLONG = 1;
pub const MQRP_NO: MQLONG = 0;
pub const MQRQ_CONN_NOT_AUTHORIZED: MQLONG = 1;
pub const MQRQ_OPEN_NOT_AUTHORIZED: MQLONG = 2;
pub const MQRQ_CLOSE_NOT_AUTHORIZED: MQLONG = 3;
pub const MQRQ_CMD_NOT_AUTHORIZED: MQLONG = 4;
pub const MQRQ_Q_MGR_STOPPING: MQLONG = 5;
pub const MQRQ_Q_MGR_QUIESCING: MQLONG = 6;
pub const MQRQ_CHANNEL_STOPPED_OK: MQLONG = 7;
pub const MQRQ_CHANNEL_STOPPED_ERROR: MQLONG = 8;
pub const MQRQ_CHANNEL_STOPPED_RETRY: MQLONG = 9;
pub const MQRQ_CHANNEL_STOPPED_DISABLED: MQLONG = 10;
pub const MQRQ_BRIDGE_STOPPED_OK: MQLONG = 11;
pub const MQRQ_BRIDGE_STOPPED_ERROR: MQLONG = 12;
pub const MQRQ_SSL_HANDSHAKE_ERROR: MQLONG = 13;
pub const MQRQ_SSL_CIPHER_SPEC_ERROR: MQLONG = 14;
pub const MQRQ_SSL_CLIENT_AUTH_ERROR: MQLONG = 15;
pub const MQRQ_SSL_PEER_NAME_ERROR: MQLONG = 16;
pub const MQRQ_SUB_NOT_AUTHORIZED: MQLONG = 17;
pub const MQRQ_SUB_DEST_NOT_AUTHORIZED: MQLONG = 18;
pub const MQRQ_SSL_UNKNOWN_REVOCATION: MQLONG = 19;
pub const MQRQ_SYS_CONN_NOT_AUTHORIZED: MQLONG = 20;
pub const MQRQ_CHANNEL_BLOCKED_ADDRESS: MQLONG = 21;
pub const MQRQ_CHANNEL_BLOCKED_USERID: MQLONG = 22;
pub const MQRQ_CHANNEL_BLOCKED_NOACCESS: MQLONG = 23;
pub const MQRQ_MAX_ACTIVE_CHANNELS: MQLONG = 24;
pub const MQRQ_MAX_CHANNELS: MQLONG = 25;
pub const MQRQ_SVRCONN_INST_LIMIT: MQLONG = 26;
pub const MQRQ_CLIENT_INST_LIMIT: MQLONG = 27;
pub const MQRQ_CAF_NOT_INSTALLED: MQLONG = 28;
pub const MQRQ_CSP_NOT_AUTHORIZED: MQLONG = 29;
pub const MQRQ_FAILOVER_PERMITTED: MQLONG = 30;
pub const MQRQ_FAILOVER_NOT_PERMITTED: MQLONG = 31;
pub const MQRQ_STANDBY_ACTIVATED: MQLONG = 32;
pub const MQRQ_REPLICA_ACTIVATED: MQLONG = 33;
pub const MQRT_CONFIGURATION: MQLONG = 1;
pub const MQRT_EXPIRY: MQLONG = 2;
pub const MQRT_NSPROC: MQLONG = 3;
pub const MQRT_PROXYSUB: MQLONG = 4;
pub const MQRT_SUB_CONFIGURATION: MQLONG = 5;
pub const MQSCO_Q_MGR: MQLONG = 1;
pub const MQSCO_CELL: MQLONG = 2;
pub const MQSECITEM_ALL: MQLONG = 0;
pub const MQSECITEM_MQADMIN: MQLONG = 1;
pub const MQSECITEM_MQNLIST: MQLONG = 2;
pub const MQSECITEM_MQPROC: MQLONG = 3;
pub const MQSECITEM_MQQUEUE: MQLONG = 4;
pub const MQSECITEM_MQCONN: MQLONG = 5;
pub const MQSECITEM_MQCMDS: MQLONG = 6;
pub const MQSECITEM_MXADMIN: MQLONG = 7;
pub const MQSECITEM_MXNLIST: MQLONG = 8;
pub const MQSECITEM_MXPROC: MQLONG = 9;
pub const MQSECITEM_MXQUEUE: MQLONG = 10;
pub const MQSECITEM_MXTOPIC: MQLONG = 11;
pub const MQSECSW_PROCESS: MQLONG = 1;
pub const MQSECSW_NAMELIST: MQLONG = 2;
pub const MQSECSW_Q: MQLONG = 3;
pub const MQSECSW_TOPIC: MQLONG = 4;
pub const MQSECSW_CONTEXT: MQLONG = 6;
pub const MQSECSW_ALTERNATE_USER: MQLONG = 7;
pub const MQSECSW_COMMAND: MQLONG = 8;
pub const MQSECSW_CONNECTION: MQLONG = 9;
pub const MQSECSW_SUBSYSTEM: MQLONG = 10;
pub const MQSECSW_COMMAND_RESOURCES: MQLONG = 11;
pub const MQSECSW_Q_MGR: MQLONG = 15;
pub const MQSECSW_QSG: MQLONG = 16;
pub const MQSECSW_OFF_FOUND: MQLONG = 21;
pub const MQSECSW_ON_FOUND: MQLONG = 22;
pub const MQSECSW_OFF_NOT_FOUND: MQLONG = 23;
pub const MQSECSW_ON_NOT_FOUND: MQLONG = 24;
pub const MQSECSW_OFF_ERROR: MQLONG = 25;
pub const MQSECSW_ON_OVERRIDDEN: MQLONG = 26;
pub const MQSECTYPE_AUTHSERV: MQLONG = 1;
pub const MQSECTYPE_SSL: MQLONG = 2;
pub const MQSECTYPE_CLASSES: MQLONG = 3;
pub const MQSECTYPE_CONNAUTH: MQLONG = 4;
pub const MQCHK_OPTIONAL: MQLONG = 0;
pub const MQCHK_NONE: MQLONG = 1;
pub const MQCHK_REQUIRED_ADMIN: MQLONG = 2;
pub const MQCHK_REQUIRED: MQLONG = 3;
pub const MQCHK_AS_Q_MGR: MQLONG = 4;
pub const MQADPCTX_NO: MQLONG = 0;
pub const MQADPCTX_YES: MQLONG = 1;
pub const MQSECCOMM_NO: MQLONG = 0;
pub const MQSECCOMM_YES: MQLONG = 1;
pub const MQSECCOMM_ANON: MQLONG = 2;
pub const MQLDAP_AUTHORMD_OS: MQLONG = 0;
pub const MQLDAP_AUTHORMD_SEARCHGRP: MQLONG = 1;
pub const MQLDAP_AUTHORMD_SEARCHUSR: MQLONG = 2;
pub const MQLDAP_AUTHORMD_SRCHGRPSN: MQLONG = 3;
pub const MQLDAP_NESTGRP_NO: MQLONG = 0;
pub const MQLDAP_NESTGRP_YES: MQLONG = 1;
pub const MQAUTHENTICATE_OS: MQLONG = 0;
pub const MQAUTHENTICATE_PAM: MQLONG = 1;
pub const MQLDAPC_INACTIVE: MQLONG = 0;
pub const MQLDAPC_CONNECTED: MQLONG = 1;
pub const MQLDAPC_ERROR: MQLONG = 2;
pub const MQSELTYPE_NONE: MQLONG = 0;
pub const MQSELTYPE_STANDARD: MQLONG = 1;
pub const MQSELTYPE_EXTENDED: MQLONG = 2;
pub const MQCHLA_DISABLED: MQLONG = 0;
pub const MQCHLA_ENABLED: MQLONG = 1;
pub const MQRDNS_ENABLED: MQLONG = 0;
pub const MQRDNS_DISABLED: MQLONG = 1;
pub const MQCLROUTE_DIRECT: MQLONG = 0;
pub const MQCLROUTE_TOPIC_HOST: MQLONG = 1;
pub const MQCLROUTE_NONE: MQLONG = 2;
pub const MQCLST_ACTIVE: MQLONG = 0;
pub const MQCLST_PENDING: MQLONG = 1;
pub const MQCLST_INVALID: MQLONG = 2;
pub const MQCLST_ERROR: MQLONG = 3;
pub const MQCLXQ_SCTQ: MQLONG = 0;
pub const MQCLXQ_CHANNEL: MQLONG = 1;
pub const MQSUS_YES: MQLONG = 1;
pub const MQSUS_NO: MQLONG = 0;
pub const MQSYNCPOINT_YES: MQLONG = 0;
pub const MQSYNCPOINT_IFPER: MQLONG = 1;
pub const MQSYSP_NO: MQLONG = 0;
pub const MQSYSP_YES: MQLONG = 1;
pub const MQSYSP_EXTENDED: MQLONG = 2;
pub const MQSYSP_TYPE_INITIAL: MQLONG = 10;
pub const MQSYSP_TYPE_SET: MQLONG = 11;
pub const MQSYSP_TYPE_LOG_COPY: MQLONG = 12;
pub const MQSYSP_TYPE_LOG_STATUS: MQLONG = 13;
pub const MQSYSP_TYPE_ARCHIVE_TAPE: MQLONG = 14;
pub const MQSYSP_ALLOC_BLK: MQLONG = 20;
pub const MQSYSP_ALLOC_TRK: MQLONG = 21;
pub const MQSYSP_ALLOC_CYL: MQLONG = 22;
pub const MQSYSP_STATUS_BUSY: MQLONG = 30;
pub const MQSYSP_STATUS_PREMOUNT: MQLONG = 31;
pub const MQSYSP_STATUS_AVAILABLE: MQLONG = 32;
pub const MQSYSP_STATUS_UNKNOWN: MQLONG = 33;
pub const MQSYSP_STATUS_ALLOC_ARCHIVE: MQLONG = 34;
pub const MQSYSP_STATUS_COPYING_BSDS: MQLONG = 35;
pub const MQSYSP_STATUS_COPYING_LOG: MQLONG = 36;
pub const MQEXT_ALL: MQLONG = 0;
pub const MQEXT_OBJECT: MQLONG = 1;
pub const MQEXT_AUTHORITY: MQLONG = 2;
pub const MQEXTATTRS_ALL: MQLONG = 0;
pub const MQEXTATTRS_NONDEF: MQLONG = 1;
pub const MQSYSOBJ_YES: MQLONG = 0;
pub const MQSYSOBJ_NO: MQLONG = 1;
pub const MQSUBTYPE_API: MQLONG = 1;
pub const MQSUBTYPE_ADMIN: MQLONG = 2;
pub const MQSUBTYPE_PROXY: MQLONG = 3;
pub const MQSUBTYPE_ALL: MQLONG = -1;
pub const MQSUBTYPE_USER: MQLONG = -2;
pub const MQDOPT_RESOLVED: MQLONG = 0;
pub const MQDOPT_DEFINED: MQLONG = 1;
pub const MQTIME_UNIT_MINS: MQLONG = 0;
pub const MQTIME_UNIT_SECS: MQLONG = 1;
pub const MQUIDSUPP_NO: MQLONG = 0;
pub const MQUIDSUPP_YES: MQLONG = 1;
pub const MQUNDELIVERED_NORMAL: MQLONG = 0;
pub const MQUNDELIVERED_SAFE: MQLONG = 1;
pub const MQUNDELIVERED_DISCARD: MQLONG = 2;
pub const MQUNDELIVERED_KEEP: MQLONG = 3;
pub const MQUOWST_NONE: MQLONG = 0;
pub const MQUOWST_ACTIVE: MQLONG = 1;
pub const MQUOWST_PREPARED: MQLONG = 2;
pub const MQUOWST_UNRESOLVED: MQLONG = 3;
pub const MQUOWT_Q_MGR: MQLONG = 0;
pub const MQUOWT_CICS: MQLONG = 1;
pub const MQUOWT_RRS: MQLONG = 2;
pub const MQUOWT_IMS: MQLONG = 3;
pub const MQUOWT_XA: MQLONG = 4;
pub const MQUSAGE_PS_AVAILABLE: MQLONG = 0;
pub const MQUSAGE_PS_DEFINED: MQLONG = 1;
pub const MQUSAGE_PS_OFFLINE: MQLONG = 2;
pub const MQUSAGE_PS_NOT_DEFINED: MQLONG = 3;
pub const MQUSAGE_PS_SUSPENDED: MQLONG = 4;
pub const MQUSAGE_EXPAND_USER: MQLONG = 1;
pub const MQUSAGE_EXPAND_SYSTEM: MQLONG = 2;
pub const MQUSAGE_EXPAND_NONE: MQLONG = 3;
pub const MQUSAGE_DS_OLDEST_ACTIVE_UOW: MQLONG = 10;
pub const MQUSAGE_DS_OLDEST_PS_RECOVERY: MQLONG = 11;
pub const MQUSAGE_DS_OLDEST_CF_RECOVERY: MQLONG = 12;
pub const MQMCP_REPLY: MQLONG = 2;
pub const MQMCP_USER: MQLONG = 1;
pub const MQMCP_NONE: MQLONG = 0;
pub const MQMCP_ALL: MQLONG = -1;
pub const MQMCP_COMPAT: MQLONG = -2;
pub const MQNSH_NONE: MQLONG = 0;
pub const MQNSH_ALL: MQLONG = -1;
pub const MQLR_ONE: MQLONG = 1;
pub const MQLR_AUTO: MQLONG = -1;
pub const MQLR_MAX: MQLONG = -2;
pub const MQAUTOCLUS_TYPE_NONE: MQLONG = 0;
pub const MQAUTOCLUS_TYPE_UNIFORM: MQLONG = 1;
pub const MQFS_SHARED: MQLONG = -1;
pub const MQFSENC_NO: MQLONG = 0;
pub const MQFSENC_YES: MQLONG = 1;
pub const MQFSENC_UNKNOWN: MQLONG = 2;
pub const MQLOGTYPE_CIRCULAR: MQLONG = 0;
pub const MQLOGTYPE_LINEAR: MQLONG = 1;
pub const MQLOGTYPE_REPLICATED: MQLONG = 2;
pub const MQNHACONNACTV_NO: MQLONG = 0;
pub const MQNHACONNACTV_YES: MQLONG = 1;
pub const MQNHABACKLOG_UNKNOWN: MQLONG = -1;
pub const MQNHAROLE_UNKNOWN: MQLONG = 0;
pub const MQNHAROLE_ACTIVE: MQLONG = 1;
pub const MQNHAROLE_REPLICA: MQLONG = 2;
pub const MQNHAINSYNC_NO: MQLONG = 0;
pub const MQNHAINSYNC_YES: MQLONG = 1;
pub const MQOPER_SYSTEM_FIRST: MQLONG = 0;
pub const MQOPER_UNKNOWN: MQLONG = 0;
pub const MQOPER_BROWSE: MQLONG = 1;
pub const MQOPER_DISCARD: MQLONG = 2;
pub const MQOPER_GET: MQLONG = 3;
pub const MQOPER_PUT: MQLONG = 4;
pub const MQOPER_PUT_REPLY: MQLONG = 5;
pub const MQOPER_PUT_REPORT: MQLONG = 6;
pub const MQOPER_RECEIVE: MQLONG = 7;
pub const MQOPER_SEND: MQLONG = 8;
pub const MQOPER_TRANSFORM: MQLONG = 9;
pub const MQOPER_PUBLISH: MQLONG = 10;
pub const MQOPER_EXCLUDED_PUBLISH: MQLONG = 11;
pub const MQOPER_DISCARDED_PUBLISH: MQLONG = 12;
pub const MQOPER_SYSTEM_LAST: MQLONG = 65535;
pub const MQOPER_APPL_FIRST: MQLONG = 65536;
pub const MQOPER_APPL_LAST: MQLONG = 999999999;
pub const MQROUTE_UNLIMITED_ACTIVITIES: MQLONG = 0;
pub const MQROUTE_DETAIL_LOW: MQLONG = 2;
pub const MQROUTE_DETAIL_MEDIUM: MQLONG = 8;
pub const MQROUTE_DETAIL_HIGH: MQLONG = 32;
pub const MQROUTE_FORWARD_ALL: MQLONG = 256;
pub const MQROUTE_FORWARD_IF_SUPPORTED: MQLONG = 512;
pub const MQROUTE_FORWARD_REJ_UNSUP_MASK: u32 = 4294901760;
pub const MQROUTE_DELIVER_YES: MQLONG = 4096;
pub const MQROUTE_DELIVER_NO: MQLONG = 8192;
pub const MQROUTE_DELIVER_REJ_UNSUP_MASK: u32 = 4294901760;
pub const MQROUTE_ACCUMULATE_NONE: MQLONG = 65539;
pub const MQROUTE_ACCUMULATE_IN_MSG: MQLONG = 65540;
pub const MQROUTE_ACCUMULATE_AND_REPLY: MQLONG = 65541;
pub const MQDELO_NONE: MQLONG = 0;
pub const MQDELO_LOCAL: MQLONG = 4;
pub const MQPUBO_NONE: MQLONG = 0;
pub const MQPUBO_CORREL_ID_AS_IDENTITY: MQLONG = 1;
pub const MQPUBO_RETAIN_PUBLICATION: MQLONG = 2;
pub const MQPUBO_OTHER_SUBSCRIBERS_ONLY: MQLONG = 4;
pub const MQPUBO_NO_REGISTRATION: MQLONG = 8;
pub const MQPUBO_IS_RETAINED_PUBLICATION: MQLONG = 16;
pub const MQREGO_NONE: MQLONG = 0;
pub const MQREGO_CORREL_ID_AS_IDENTITY: MQLONG = 1;
pub const MQREGO_ANONYMOUS: MQLONG = 2;
pub const MQREGO_LOCAL: MQLONG = 4;
pub const MQREGO_DIRECT_REQUESTS: MQLONG = 8;
pub const MQREGO_NEW_PUBLICATIONS_ONLY: MQLONG = 16;
pub const MQREGO_PUBLISH_ON_REQUEST_ONLY: MQLONG = 32;
pub const MQREGO_DEREGISTER_ALL: MQLONG = 64;
pub const MQREGO_INCLUDE_STREAM_NAME: MQLONG = 128;
pub const MQREGO_INFORM_IF_RETAINED: MQLONG = 256;
pub const MQREGO_DUPLICATES_OK: MQLONG = 512;
pub const MQREGO_NON_PERSISTENT: MQLONG = 1024;
pub const MQREGO_PERSISTENT: MQLONG = 2048;
pub const MQREGO_PERSISTENT_AS_PUBLISH: MQLONG = 4096;
pub const MQREGO_PERSISTENT_AS_Q: MQLONG = 8192;
pub const MQREGO_ADD_NAME: MQLONG = 16384;
pub const MQREGO_NO_ALTERATION: MQLONG = 32768;
pub const MQREGO_FULL_RESPONSE: MQLONG = 65536;
pub const MQREGO_JOIN_SHARED: MQLONG = 131072;
pub const MQREGO_JOIN_EXCLUSIVE: MQLONG = 262144;
pub const MQREGO_LEAVE_ONLY: MQLONG = 524288;
pub const MQREGO_VARIABLE_USER_ID: MQLONG = 1048576;
pub const MQREGO_LOCKED: MQLONG = 2097152;
pub const MQUA_FIRST: MQLONG = 65536;
pub const MQUA_LAST: MQLONG = 999999999;
pub const MQGUR_DISABLED: MQLONG = 0;
pub const MQGUR_ENABLED: MQLONG = 1;
pub const MQMULC_STANDARD: MQLONG = 0;
pub const MQMULC_REFINED: MQLONG = 1;
pub const MQSTDBY_NOT_PERMITTED: MQLONG = 0;
pub const MQSTDBY_PERMITTED: MQLONG = 1;
#[allow(unsafe_code)]
pub const MQZED_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"ZED \0") };
pub const MQZED_VERSION_1: MQLONG = 1;
pub const MQZED_VERSION_2: MQLONG = 2;
pub const MQZED_CURRENT_VERSION: MQLONG = 2;
pub const MQZED_LENGTH_1: usize = 64;
pub const MQZED_LENGTH_2: usize = 72;
pub const MQZED_CURRENT_LENGTH: usize = 72;
#[allow(unsafe_code)]
pub const MQZAC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"ZAC \0") };
pub const MQZAC_VERSION_1: MQLONG = 1;
pub const MQZAC_CURRENT_VERSION: MQLONG = 1;
pub const MQZAC_LENGTH_1: usize = 84;
pub const MQZAC_CURRENT_LENGTH: usize = 84;
pub const MQZAT_INITIAL_CONTEXT: MQLONG = 0;
pub const MQZAT_CHANGE_CONTEXT: MQLONG = 1;
#[allow(unsafe_code)]
pub const MQZAD_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"ZAD \0") };
pub const MQZAD_VERSION_1: MQLONG = 1;
pub const MQZAD_VERSION_2: MQLONG = 2;
pub const MQZAD_CURRENT_VERSION: MQLONG = 2;
pub const MQZAD_LENGTH_1: usize = 80;
pub const MQZAD_LENGTH_2: usize = 80;
pub const MQZAD_CURRENT_LENGTH: usize = 80;
#[allow(unsafe_code)]
pub const MQZFP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"ZFP \0") };
pub const MQZFP_VERSION_1: MQLONG = 1;
pub const MQZFP_CURRENT_VERSION: MQLONG = 1;
pub const MQZFP_LENGTH_1: usize = 24;
pub const MQZFP_CURRENT_LENGTH: usize = 24;
#[allow(unsafe_code)]
pub const MQZIC_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"ZIC \0") };
pub const MQZIC_VERSION_1: MQLONG = 1;
pub const MQZIC_CURRENT_VERSION: MQLONG = 1;
pub const MQZIC_LENGTH_1: usize = 84;
pub const MQZIC_CURRENT_LENGTH: usize = 84;
pub const MQZIO_PRIMARY: MQLONG = 0;
pub const MQZIO_SECONDARY: MQLONG = 1;
pub const MQZTO_PRIMARY: MQLONG = 0;
pub const MQZTO_SECONDARY: MQLONG = 1;
pub const MQZCI_DEFAULT: MQLONG = 0;
pub const MQZCI_CONTINUE: MQLONG = 0;
pub const MQZCI_STOP: MQLONG = 1;
pub const MQZAS_VERSION_1: MQLONG = 1;
pub const MQZAS_VERSION_2: MQLONG = 2;
pub const MQZAS_VERSION_3: MQLONG = 3;
pub const MQZAS_VERSION_4: MQLONG = 4;
pub const MQZAS_VERSION_5: MQLONG = 5;
pub const MQZAS_VERSION_6: MQLONG = 6;
pub const MQZAO_CONNECT: MQLONG = 1;
pub const MQZAO_BROWSE: MQLONG = 2;
pub const MQZAO_INPUT: MQLONG = 4;
pub const MQZAO_OUTPUT: MQLONG = 8;
pub const MQZAO_INQUIRE: MQLONG = 16;
pub const MQZAO_SET: MQLONG = 32;
pub const MQZAO_PASS_IDENTITY_CONTEXT: MQLONG = 64;
pub const MQZAO_PASS_ALL_CONTEXT: MQLONG = 128;
pub const MQZAO_SET_IDENTITY_CONTEXT: MQLONG = 256;
pub const MQZAO_SET_ALL_CONTEXT: MQLONG = 512;
pub const MQZAO_ALTERNATE_USER_AUTHORITY: MQLONG = 1024;
pub const MQZAO_PUBLISH: MQLONG = 2048;
pub const MQZAO_SUBSCRIBE: MQLONG = 4096;
pub const MQZAO_RESUME: MQLONG = 8192;
pub const MQZAO_ALL_MQI: MQLONG = 16383;
pub const MQZAO_CREATE: MQLONG = 65536;
pub const MQZAO_DELETE: MQLONG = 131072;
pub const MQZAO_DISPLAY: MQLONG = 262144;
pub const MQZAO_CHANGE: MQLONG = 524288;
pub const MQZAO_CLEAR: MQLONG = 1048576;
pub const MQZAO_CONTROL: MQLONG = 2097152;
pub const MQZAO_CONTROL_EXTENDED: MQLONG = 4194304;
pub const MQZAO_AUTHORIZE: MQLONG = 8388608;
pub const MQZAO_ALL_ADMIN: MQLONG = 16646144;
pub const MQZAO_SYSTEM: MQLONG = 33554432;
pub const MQZAO_ALL: MQLONG = 50216959;
pub const MQZAO_REMOVE: MQLONG = 16777216;
pub const MQZAO_NONE: MQLONG = 0;
pub const MQZAO_CREATE_ONLY: MQLONG = 67108864;
pub const MQZAET_NONE: MQLONG = 0;
pub const MQZAET_PRINCIPAL: MQLONG = 1;
pub const MQZAET_GROUP: MQLONG = 2;
pub const MQZAET_UNKNOWN: MQLONG = 3;
pub const MQZSE_START: MQLONG = 1;
pub const MQZSE_CONTINUE: MQLONG = 0;
pub const MQZSL_NOT_RETURNED: MQLONG = 0;
pub const MQZSL_RETURNED: MQLONG = 1;
pub const MQZNS_VERSION_1: MQLONG = 1;
pub const MQZUS_VERSION_1: MQLONG = 1;
pub const MQZID_INIT: MQLONG = 0;
pub const MQZID_TERM: MQLONG = 1;
pub const MQZID_INIT_AUTHORITY: MQLONG = 0;
pub const MQZID_TERM_AUTHORITY: MQLONG = 1;
pub const MQZID_CHECK_AUTHORITY: MQLONG = 2;
pub const MQZID_COPY_ALL_AUTHORITY: MQLONG = 3;
pub const MQZID_DELETE_AUTHORITY: MQLONG = 4;
pub const MQZID_SET_AUTHORITY: MQLONG = 5;
pub const MQZID_GET_AUTHORITY: MQLONG = 6;
pub const MQZID_GET_EXPLICIT_AUTHORITY: MQLONG = 7;
pub const MQZID_REFRESH_CACHE: MQLONG = 8;
pub const MQZID_ENUMERATE_AUTHORITY_DATA: MQLONG = 9;
pub const MQZID_AUTHENTICATE_USER: MQLONG = 10;
pub const MQZID_FREE_USER: MQLONG = 11;
pub const MQZID_INQUIRE: MQLONG = 12;
pub const MQZID_CHECK_PRIVILEGED: MQLONG = 13;
pub const MQZID_INIT_NAME: MQLONG = 0;
pub const MQZID_TERM_NAME: MQLONG = 1;
pub const MQZID_LOOKUP_NAME: MQLONG = 2;
pub const MQZID_INSERT_NAME: MQLONG = 3;
pub const MQZID_DELETE_NAME: MQLONG = 4;
pub const MQZID_INIT_USERID: MQLONG = 0;
pub const MQZID_TERM_USERID: MQLONG = 1;
pub const MQZID_FIND_USERID: MQLONG = 2;
#[allow(unsafe_code)]
pub const MQIEP_STRUC_ID: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"IEP \0") };
pub const MQIEP_VERSION_1: MQLONG = 1;
pub const MQIEP_CURRENT_VERSION: MQLONG = 1;
pub const MQIEP_LENGTH_1: usize = 264;
pub const MQIEP_CURRENT_LENGTH: usize = 264;
pub const MQIEPF_NONE: MQLONG = 0;
pub const MQIEPF_NON_THREADED_LIBRARY: MQLONG = 0;
pub const MQIEPF_THREADED_LIBRARY: MQLONG = 1;
pub const MQIEPF_CLIENT_LIBRARY: MQLONG = 0;
pub const MQIEPF_LOCAL_LIBRARY: MQLONG = 2;
pub type MQBYTE = ::std::os::raw::c_uchar;
pub type PMQBYTE = *mut MQBYTE;
pub type MQBYTE4 = [MQBYTE; 4usize];
pub type MQBYTE8 = [MQBYTE; 8usize];
pub type MQBYTE16 = [MQBYTE; 16usize];
pub type MQBYTE24 = [MQBYTE; 24usize];
pub type MQBYTE32 = [MQBYTE; 32usize];
pub type MQBYTE40 = [MQBYTE; 40usize];
pub type MQBYTE48 = [MQBYTE; 48usize];
pub type MQBYTE128 = [MQBYTE; 128usize];
pub type MQCHAR = ::std::os::raw::c_char;
pub type PMQCHAR = *mut MQCHAR;
pub type MQCHAR4 = [MQCHAR; 4usize];
pub type MQCHAR8 = [MQCHAR; 8usize];
pub type MQCHAR12 = [MQCHAR; 12usize];
pub type MQCHAR28 = [MQCHAR; 28usize];
pub type MQCHAR32 = [MQCHAR; 32usize];
pub type MQCHAR48 = [MQCHAR; 48usize];
pub type MQCHAR64 = [MQCHAR; 64usize];
pub type MQCHAR128 = [MQCHAR; 128usize];
pub type MQCHAR256 = [MQCHAR; 256usize];
pub type MQLONG = ::std::os::raw::c_int;
pub type MQINT64 = ::std::os::raw::c_long;
pub type PMQLONG = *mut MQLONG;
pub type PMQINT64 = *mut MQINT64;
pub type MQIEP = tagMQIEP;
pub type PMQIEP = *mut MQIEP;
pub type MQHCONFIG = PMQIEP;
pub type MQHCONN = MQLONG;
pub type PMQHCONN = *mut MQHCONN;
pub type MQHOBJ = MQLONG;
pub type PMQHOBJ = *mut MQHOBJ;
pub type MQPTR = *mut ::std::os::raw::c_void;
pub type PMQPTR = *mut MQPTR;
pub type PMQFUNC = *mut ::std::os::raw::c_void;
pub type PMQVOID = *mut ::std::os::raw::c_void;
pub type MQBOOL = MQLONG;
pub type MQHMSG = MQINT64;
pub type PMQHMSG = *mut MQHMSG;
pub type MQPID = MQLONG;
pub type MQTID = MQLONG;
pub type MQAIR = tagMQAIR;
pub type PMQAIR = *mut MQAIR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQAIR {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub AuthInfoType: MQLONG,
    pub AuthInfoConnName: [MQCHAR; 264usize],
    pub LDAPUserNamePtr: PMQCHAR,
    pub LDAPUserNameOffset: MQLONG,
    pub LDAPUserNameLength: MQLONG,
    pub LDAPPassword: MQCHAR32,
    pub OCSPResponderURL: MQCHAR256,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQAIR"][::std::mem::size_of::<tagMQAIR>() - 584usize];
    ["Alignment of tagMQAIR"][::std::mem::align_of::<tagMQAIR>() - 8usize];
    ["Offset of field: tagMQAIR::StrucId"][::std::mem::offset_of!(tagMQAIR, StrucId) - 0usize];
    ["Offset of field: tagMQAIR::Version"][::std::mem::offset_of!(tagMQAIR, Version) - 4usize];
    ["Offset of field: tagMQAIR::AuthInfoType"][::std::mem::offset_of!(tagMQAIR, AuthInfoType) - 8usize];
    ["Offset of field: tagMQAIR::AuthInfoConnName"][::std::mem::offset_of!(tagMQAIR, AuthInfoConnName) - 12usize];
    ["Offset of field: tagMQAIR::LDAPUserNamePtr"][::std::mem::offset_of!(tagMQAIR, LDAPUserNamePtr) - 280usize];
    ["Offset of field: tagMQAIR::LDAPUserNameOffset"][::std::mem::offset_of!(tagMQAIR, LDAPUserNameOffset) - 288usize];
    ["Offset of field: tagMQAIR::LDAPUserNameLength"][::std::mem::offset_of!(tagMQAIR, LDAPUserNameLength) - 292usize];
    ["Offset of field: tagMQAIR::LDAPPassword"][::std::mem::offset_of!(tagMQAIR, LDAPPassword) - 296usize];
    ["Offset of field: tagMQAIR::OCSPResponderURL"][::std::mem::offset_of!(tagMQAIR, OCSPResponderURL) - 328usize];
};
pub type MQBNO = tagMQBNO;
pub type PMQBNO = *mut MQBNO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQBNO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ApplType: MQLONG,
    pub Timeout: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQBNO"][::std::mem::size_of::<tagMQBNO>() - 20usize];
    ["Alignment of tagMQBNO"][::std::mem::align_of::<tagMQBNO>() - 4usize];
    ["Offset of field: tagMQBNO::StrucId"][::std::mem::offset_of!(tagMQBNO, StrucId) - 0usize];
    ["Offset of field: tagMQBNO::Version"][::std::mem::offset_of!(tagMQBNO, Version) - 4usize];
    ["Offset of field: tagMQBNO::ApplType"][::std::mem::offset_of!(tagMQBNO, ApplType) - 8usize];
    ["Offset of field: tagMQBNO::Timeout"][::std::mem::offset_of!(tagMQBNO, Timeout) - 12usize];
    ["Offset of field: tagMQBNO::Options"][::std::mem::offset_of!(tagMQBNO, Options) - 16usize];
};
pub type MQBMHO = tagMQBMHO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQBMHO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQBMHO"][::std::mem::size_of::<tagMQBMHO>() - 12usize];
    ["Alignment of tagMQBMHO"][::std::mem::align_of::<tagMQBMHO>() - 4usize];
    ["Offset of field: tagMQBMHO::StrucId"][::std::mem::offset_of!(tagMQBMHO, StrucId) - 0usize];
    ["Offset of field: tagMQBMHO::Version"][::std::mem::offset_of!(tagMQBMHO, Version) - 4usize];
    ["Offset of field: tagMQBMHO::Options"][::std::mem::offset_of!(tagMQBMHO, Options) - 8usize];
};
pub type MQBO = tagMQBO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQBO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQBO"][::std::mem::size_of::<tagMQBO>() - 12usize];
    ["Alignment of tagMQBO"][::std::mem::align_of::<tagMQBO>() - 4usize];
    ["Offset of field: tagMQBO::StrucId"][::std::mem::offset_of!(tagMQBO, StrucId) - 0usize];
    ["Offset of field: tagMQBO::Version"][::std::mem::offset_of!(tagMQBO, Version) - 4usize];
    ["Offset of field: tagMQBO::Options"][::std::mem::offset_of!(tagMQBO, Options) - 8usize];
};
pub type MQCBC = tagMQCBC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCBC {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub CallType: MQLONG,
    pub Hobj: MQHOBJ,
    pub CallbackArea: MQPTR,
    pub ConnectionArea: MQPTR,
    pub CompCode: MQLONG,
    pub Reason: MQLONG,
    pub State: MQLONG,
    pub DataLength: MQLONG,
    pub BufferLength: MQLONG,
    pub Flags: MQLONG,
    pub ReconnectDelay: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCBC"][::std::mem::size_of::<tagMQCBC>() - 64usize];
    ["Alignment of tagMQCBC"][::std::mem::align_of::<tagMQCBC>() - 8usize];
    ["Offset of field: tagMQCBC::StrucId"][::std::mem::offset_of!(tagMQCBC, StrucId) - 0usize];
    ["Offset of field: tagMQCBC::Version"][::std::mem::offset_of!(tagMQCBC, Version) - 4usize];
    ["Offset of field: tagMQCBC::CallType"][::std::mem::offset_of!(tagMQCBC, CallType) - 8usize];
    ["Offset of field: tagMQCBC::Hobj"][::std::mem::offset_of!(tagMQCBC, Hobj) - 12usize];
    ["Offset of field: tagMQCBC::CallbackArea"][::std::mem::offset_of!(tagMQCBC, CallbackArea) - 16usize];
    ["Offset of field: tagMQCBC::ConnectionArea"][::std::mem::offset_of!(tagMQCBC, ConnectionArea) - 24usize];
    ["Offset of field: tagMQCBC::CompCode"][::std::mem::offset_of!(tagMQCBC, CompCode) - 32usize];
    ["Offset of field: tagMQCBC::Reason"][::std::mem::offset_of!(tagMQCBC, Reason) - 36usize];
    ["Offset of field: tagMQCBC::State"][::std::mem::offset_of!(tagMQCBC, State) - 40usize];
    ["Offset of field: tagMQCBC::DataLength"][::std::mem::offset_of!(tagMQCBC, DataLength) - 44usize];
    ["Offset of field: tagMQCBC::BufferLength"][::std::mem::offset_of!(tagMQCBC, BufferLength) - 48usize];
    ["Offset of field: tagMQCBC::Flags"][::std::mem::offset_of!(tagMQCBC, Flags) - 52usize];
    ["Offset of field: tagMQCBC::ReconnectDelay"][::std::mem::offset_of!(tagMQCBC, ReconnectDelay) - 56usize];
};
pub type MQCBD = tagMQCBD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCBD {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub CallbackType: MQLONG,
    pub Options: MQLONG,
    pub CallbackArea: MQPTR,
    pub CallbackFunction: MQPTR,
    pub CallbackName: MQCHAR128,
    pub MaxMsgLength: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCBD"][::std::mem::size_of::<tagMQCBD>() - 168usize];
    ["Alignment of tagMQCBD"][::std::mem::align_of::<tagMQCBD>() - 8usize];
    ["Offset of field: tagMQCBD::StrucId"][::std::mem::offset_of!(tagMQCBD, StrucId) - 0usize];
    ["Offset of field: tagMQCBD::Version"][::std::mem::offset_of!(tagMQCBD, Version) - 4usize];
    ["Offset of field: tagMQCBD::CallbackType"][::std::mem::offset_of!(tagMQCBD, CallbackType) - 8usize];
    ["Offset of field: tagMQCBD::Options"][::std::mem::offset_of!(tagMQCBD, Options) - 12usize];
    ["Offset of field: tagMQCBD::CallbackArea"][::std::mem::offset_of!(tagMQCBD, CallbackArea) - 16usize];
    ["Offset of field: tagMQCBD::CallbackFunction"][::std::mem::offset_of!(tagMQCBD, CallbackFunction) - 24usize];
    ["Offset of field: tagMQCBD::CallbackName"][::std::mem::offset_of!(tagMQCBD, CallbackName) - 32usize];
    ["Offset of field: tagMQCBD::MaxMsgLength"][::std::mem::offset_of!(tagMQCBD, MaxMsgLength) - 160usize];
};
pub type MQCHARV = tagMQCHARV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCHARV {
    pub VSPtr: MQPTR,
    pub VSOffset: MQLONG,
    pub VSBufSize: MQLONG,
    pub VSLength: MQLONG,
    pub VSCCSID: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCHARV"][::std::mem::size_of::<tagMQCHARV>() - 24usize];
    ["Alignment of tagMQCHARV"][::std::mem::align_of::<tagMQCHARV>() - 8usize];
    ["Offset of field: tagMQCHARV::VSPtr"][::std::mem::offset_of!(tagMQCHARV, VSPtr) - 0usize];
    ["Offset of field: tagMQCHARV::VSOffset"][::std::mem::offset_of!(tagMQCHARV, VSOffset) - 8usize];
    ["Offset of field: tagMQCHARV::VSBufSize"][::std::mem::offset_of!(tagMQCHARV, VSBufSize) - 12usize];
    ["Offset of field: tagMQCHARV::VSLength"][::std::mem::offset_of!(tagMQCHARV, VSLength) - 16usize];
    ["Offset of field: tagMQCHARV::VSCCSID"][::std::mem::offset_of!(tagMQCHARV, VSCCSID) - 20usize];
};
pub type MQCIH = tagMQCIH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCIH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub ReturnCode: MQLONG,
    pub CompCode: MQLONG,
    pub Reason: MQLONG,
    pub UOWControl: MQLONG,
    pub GetWaitInterval: MQLONG,
    pub LinkType: MQLONG,
    pub OutputDataLength: MQLONG,
    pub FacilityKeepTime: MQLONG,
    pub ADSDescriptor: MQLONG,
    pub ConversationalTask: MQLONG,
    pub TaskEndStatus: MQLONG,
    pub Facility: MQBYTE8,
    pub Function: MQCHAR4,
    pub AbendCode: MQCHAR4,
    pub Authenticator: MQCHAR8,
    pub Reserved1: MQCHAR8,
    pub ReplyToFormat: MQCHAR8,
    pub RemoteSysId: MQCHAR4,
    pub RemoteTransId: MQCHAR4,
    pub TransactionId: MQCHAR4,
    pub FacilityLike: MQCHAR4,
    pub AttentionId: MQCHAR4,
    pub StartCode: MQCHAR4,
    pub CancelCode: MQCHAR4,
    pub NextTransactionId: MQCHAR4,
    pub Reserved2: MQCHAR8,
    pub Reserved3: MQCHAR8,
    pub CursorPosition: MQLONG,
    pub ErrorOffset: MQLONG,
    pub InputItem: MQLONG,
    pub Reserved4: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCIH"][::std::mem::size_of::<tagMQCIH>() - 180usize];
    ["Alignment of tagMQCIH"][::std::mem::align_of::<tagMQCIH>() - 4usize];
    ["Offset of field: tagMQCIH::StrucId"][::std::mem::offset_of!(tagMQCIH, StrucId) - 0usize];
    ["Offset of field: tagMQCIH::Version"][::std::mem::offset_of!(tagMQCIH, Version) - 4usize];
    ["Offset of field: tagMQCIH::StrucLength"][::std::mem::offset_of!(tagMQCIH, StrucLength) - 8usize];
    ["Offset of field: tagMQCIH::Encoding"][::std::mem::offset_of!(tagMQCIH, Encoding) - 12usize];
    ["Offset of field: tagMQCIH::CodedCharSetId"][::std::mem::offset_of!(tagMQCIH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQCIH::Format"][::std::mem::offset_of!(tagMQCIH, Format) - 20usize];
    ["Offset of field: tagMQCIH::Flags"][::std::mem::offset_of!(tagMQCIH, Flags) - 28usize];
    ["Offset of field: tagMQCIH::ReturnCode"][::std::mem::offset_of!(tagMQCIH, ReturnCode) - 32usize];
    ["Offset of field: tagMQCIH::CompCode"][::std::mem::offset_of!(tagMQCIH, CompCode) - 36usize];
    ["Offset of field: tagMQCIH::Reason"][::std::mem::offset_of!(tagMQCIH, Reason) - 40usize];
    ["Offset of field: tagMQCIH::UOWControl"][::std::mem::offset_of!(tagMQCIH, UOWControl) - 44usize];
    ["Offset of field: tagMQCIH::GetWaitInterval"][::std::mem::offset_of!(tagMQCIH, GetWaitInterval) - 48usize];
    ["Offset of field: tagMQCIH::LinkType"][::std::mem::offset_of!(tagMQCIH, LinkType) - 52usize];
    ["Offset of field: tagMQCIH::OutputDataLength"][::std::mem::offset_of!(tagMQCIH, OutputDataLength) - 56usize];
    ["Offset of field: tagMQCIH::FacilityKeepTime"][::std::mem::offset_of!(tagMQCIH, FacilityKeepTime) - 60usize];
    ["Offset of field: tagMQCIH::ADSDescriptor"][::std::mem::offset_of!(tagMQCIH, ADSDescriptor) - 64usize];
    ["Offset of field: tagMQCIH::ConversationalTask"][::std::mem::offset_of!(tagMQCIH, ConversationalTask) - 68usize];
    ["Offset of field: tagMQCIH::TaskEndStatus"][::std::mem::offset_of!(tagMQCIH, TaskEndStatus) - 72usize];
    ["Offset of field: tagMQCIH::Facility"][::std::mem::offset_of!(tagMQCIH, Facility) - 76usize];
    ["Offset of field: tagMQCIH::Function"][::std::mem::offset_of!(tagMQCIH, Function) - 84usize];
    ["Offset of field: tagMQCIH::AbendCode"][::std::mem::offset_of!(tagMQCIH, AbendCode) - 88usize];
    ["Offset of field: tagMQCIH::Authenticator"][::std::mem::offset_of!(tagMQCIH, Authenticator) - 92usize];
    ["Offset of field: tagMQCIH::Reserved1"][::std::mem::offset_of!(tagMQCIH, Reserved1) - 100usize];
    ["Offset of field: tagMQCIH::ReplyToFormat"][::std::mem::offset_of!(tagMQCIH, ReplyToFormat) - 108usize];
    ["Offset of field: tagMQCIH::RemoteSysId"][::std::mem::offset_of!(tagMQCIH, RemoteSysId) - 116usize];
    ["Offset of field: tagMQCIH::RemoteTransId"][::std::mem::offset_of!(tagMQCIH, RemoteTransId) - 120usize];
    ["Offset of field: tagMQCIH::TransactionId"][::std::mem::offset_of!(tagMQCIH, TransactionId) - 124usize];
    ["Offset of field: tagMQCIH::FacilityLike"][::std::mem::offset_of!(tagMQCIH, FacilityLike) - 128usize];
    ["Offset of field: tagMQCIH::AttentionId"][::std::mem::offset_of!(tagMQCIH, AttentionId) - 132usize];
    ["Offset of field: tagMQCIH::StartCode"][::std::mem::offset_of!(tagMQCIH, StartCode) - 136usize];
    ["Offset of field: tagMQCIH::CancelCode"][::std::mem::offset_of!(tagMQCIH, CancelCode) - 140usize];
    ["Offset of field: tagMQCIH::NextTransactionId"][::std::mem::offset_of!(tagMQCIH, NextTransactionId) - 144usize];
    ["Offset of field: tagMQCIH::Reserved2"][::std::mem::offset_of!(tagMQCIH, Reserved2) - 148usize];
    ["Offset of field: tagMQCIH::Reserved3"][::std::mem::offset_of!(tagMQCIH, Reserved3) - 156usize];
    ["Offset of field: tagMQCIH::CursorPosition"][::std::mem::offset_of!(tagMQCIH, CursorPosition) - 164usize];
    ["Offset of field: tagMQCIH::ErrorOffset"][::std::mem::offset_of!(tagMQCIH, ErrorOffset) - 168usize];
    ["Offset of field: tagMQCIH::InputItem"][::std::mem::offset_of!(tagMQCIH, InputItem) - 172usize];
    ["Offset of field: tagMQCIH::Reserved4"][::std::mem::offset_of!(tagMQCIH, Reserved4) - 176usize];
};
pub type MQCMHO = tagMQCMHO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCMHO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCMHO"][::std::mem::size_of::<tagMQCMHO>() - 12usize];
    ["Alignment of tagMQCMHO"][::std::mem::align_of::<tagMQCMHO>() - 4usize];
    ["Offset of field: tagMQCMHO::StrucId"][::std::mem::offset_of!(tagMQCMHO, StrucId) - 0usize];
    ["Offset of field: tagMQCMHO::Version"][::std::mem::offset_of!(tagMQCMHO, Version) - 4usize];
    ["Offset of field: tagMQCMHO::Options"][::std::mem::offset_of!(tagMQCMHO, Options) - 8usize];
};
pub type MQCTLO = tagMQCTLO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCTLO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub Reserved: MQLONG,
    pub ConnectionArea: MQPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCTLO"][::std::mem::size_of::<tagMQCTLO>() - 24usize];
    ["Alignment of tagMQCTLO"][::std::mem::align_of::<tagMQCTLO>() - 8usize];
    ["Offset of field: tagMQCTLO::StrucId"][::std::mem::offset_of!(tagMQCTLO, StrucId) - 0usize];
    ["Offset of field: tagMQCTLO::Version"][::std::mem::offset_of!(tagMQCTLO, Version) - 4usize];
    ["Offset of field: tagMQCTLO::Options"][::std::mem::offset_of!(tagMQCTLO, Options) - 8usize];
    ["Offset of field: tagMQCTLO::Reserved"][::std::mem::offset_of!(tagMQCTLO, Reserved) - 12usize];
    ["Offset of field: tagMQCTLO::ConnectionArea"][::std::mem::offset_of!(tagMQCTLO, ConnectionArea) - 16usize];
};
pub type MQSCO = tagMQSCO;
pub type PMQSCO = *mut MQSCO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQSCO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub KeyRepository: MQCHAR256,
    pub CryptoHardware: MQCHAR256,
    pub AuthInfoRecCount: MQLONG,
    pub AuthInfoRecOffset: MQLONG,
    pub AuthInfoRecPtr: PMQAIR,
    pub KeyResetCount: MQLONG,
    pub FipsRequired: MQLONG,
    pub EncryptionPolicySuiteB: [MQLONG; 4usize],
    pub CertificateValPolicy: MQLONG,
    pub CertificateLabel: MQCHAR64,
    pub KeyRepoPasswordPtr: MQPTR,
    pub KeyRepoPasswordOffset: MQLONG,
    pub KeyRepoPasswordLength: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQSCO"][::std::mem::size_of::<tagMQSCO>() - 648usize];
    ["Alignment of tagMQSCO"][::std::mem::align_of::<tagMQSCO>() - 8usize];
    ["Offset of field: tagMQSCO::StrucId"][::std::mem::offset_of!(tagMQSCO, StrucId) - 0usize];
    ["Offset of field: tagMQSCO::Version"][::std::mem::offset_of!(tagMQSCO, Version) - 4usize];
    ["Offset of field: tagMQSCO::KeyRepository"][::std::mem::offset_of!(tagMQSCO, KeyRepository) - 8usize];
    ["Offset of field: tagMQSCO::CryptoHardware"][::std::mem::offset_of!(tagMQSCO, CryptoHardware) - 264usize];
    ["Offset of field: tagMQSCO::AuthInfoRecCount"][::std::mem::offset_of!(tagMQSCO, AuthInfoRecCount) - 520usize];
    ["Offset of field: tagMQSCO::AuthInfoRecOffset"][::std::mem::offset_of!(tagMQSCO, AuthInfoRecOffset) - 524usize];
    ["Offset of field: tagMQSCO::AuthInfoRecPtr"][::std::mem::offset_of!(tagMQSCO, AuthInfoRecPtr) - 528usize];
    ["Offset of field: tagMQSCO::KeyResetCount"][::std::mem::offset_of!(tagMQSCO, KeyResetCount) - 536usize];
    ["Offset of field: tagMQSCO::FipsRequired"][::std::mem::offset_of!(tagMQSCO, FipsRequired) - 540usize];
    ["Offset of field: tagMQSCO::EncryptionPolicySuiteB"][::std::mem::offset_of!(tagMQSCO, EncryptionPolicySuiteB) - 544usize];
    ["Offset of field: tagMQSCO::CertificateValPolicy"][::std::mem::offset_of!(tagMQSCO, CertificateValPolicy) - 560usize];
    ["Offset of field: tagMQSCO::CertificateLabel"][::std::mem::offset_of!(tagMQSCO, CertificateLabel) - 564usize];
    ["Offset of field: tagMQSCO::KeyRepoPasswordPtr"][::std::mem::offset_of!(tagMQSCO, KeyRepoPasswordPtr) - 632usize];
    ["Offset of field: tagMQSCO::KeyRepoPasswordOffset"][::std::mem::offset_of!(tagMQSCO, KeyRepoPasswordOffset) - 640usize];
    ["Offset of field: tagMQSCO::KeyRepoPasswordLength"][::std::mem::offset_of!(tagMQSCO, KeyRepoPasswordLength) - 644usize];
};
pub type MQCSP = tagMQCSP;
pub type PMQCSP = *mut MQCSP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCSP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub AuthenticationType: MQLONG,
    pub Reserved1: MQBYTE4,
    pub CSPUserIdPtr: MQPTR,
    pub CSPUserIdOffset: MQLONG,
    pub CSPUserIdLength: MQLONG,
    pub Reserved2: MQBYTE8,
    pub CSPPasswordPtr: MQPTR,
    pub CSPPasswordOffset: MQLONG,
    pub CSPPasswordLength: MQLONG,
    pub Reserved3: MQBYTE8,
    pub InitialKeyPtr: MQPTR,
    pub InitialKeyOffset: MQLONG,
    pub InitialKeyLength: MQLONG,
    pub Reserved4: MQBYTE8,
    pub TokenPtr: MQPTR,
    pub TokenOffset: MQLONG,
    pub TokenLength: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCSP"][::std::mem::size_of::<tagMQCSP>() - 104usize];
    ["Alignment of tagMQCSP"][::std::mem::align_of::<tagMQCSP>() - 8usize];
    ["Offset of field: tagMQCSP::StrucId"][::std::mem::offset_of!(tagMQCSP, StrucId) - 0usize];
    ["Offset of field: tagMQCSP::Version"][::std::mem::offset_of!(tagMQCSP, Version) - 4usize];
    ["Offset of field: tagMQCSP::AuthenticationType"][::std::mem::offset_of!(tagMQCSP, AuthenticationType) - 8usize];
    ["Offset of field: tagMQCSP::Reserved1"][::std::mem::offset_of!(tagMQCSP, Reserved1) - 12usize];
    ["Offset of field: tagMQCSP::CSPUserIdPtr"][::std::mem::offset_of!(tagMQCSP, CSPUserIdPtr) - 16usize];
    ["Offset of field: tagMQCSP::CSPUserIdOffset"][::std::mem::offset_of!(tagMQCSP, CSPUserIdOffset) - 24usize];
    ["Offset of field: tagMQCSP::CSPUserIdLength"][::std::mem::offset_of!(tagMQCSP, CSPUserIdLength) - 28usize];
    ["Offset of field: tagMQCSP::Reserved2"][::std::mem::offset_of!(tagMQCSP, Reserved2) - 32usize];
    ["Offset of field: tagMQCSP::CSPPasswordPtr"][::std::mem::offset_of!(tagMQCSP, CSPPasswordPtr) - 40usize];
    ["Offset of field: tagMQCSP::CSPPasswordOffset"][::std::mem::offset_of!(tagMQCSP, CSPPasswordOffset) - 48usize];
    ["Offset of field: tagMQCSP::CSPPasswordLength"][::std::mem::offset_of!(tagMQCSP, CSPPasswordLength) - 52usize];
    ["Offset of field: tagMQCSP::Reserved3"][::std::mem::offset_of!(tagMQCSP, Reserved3) - 56usize];
    ["Offset of field: tagMQCSP::InitialKeyPtr"][::std::mem::offset_of!(tagMQCSP, InitialKeyPtr) - 64usize];
    ["Offset of field: tagMQCSP::InitialKeyOffset"][::std::mem::offset_of!(tagMQCSP, InitialKeyOffset) - 72usize];
    ["Offset of field: tagMQCSP::InitialKeyLength"][::std::mem::offset_of!(tagMQCSP, InitialKeyLength) - 76usize];
    ["Offset of field: tagMQCSP::Reserved4"][::std::mem::offset_of!(tagMQCSP, Reserved4) - 80usize];
    ["Offset of field: tagMQCSP::TokenPtr"][::std::mem::offset_of!(tagMQCSP, TokenPtr) - 88usize];
    ["Offset of field: tagMQCSP::TokenOffset"][::std::mem::offset_of!(tagMQCSP, TokenOffset) - 96usize];
    ["Offset of field: tagMQCSP::TokenLength"][::std::mem::offset_of!(tagMQCSP, TokenLength) - 100usize];
};
pub type MQCNO = tagMQCNO;
pub type PMQCNO = *mut MQCNO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCNO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub ClientConnOffset: MQLONG,
    pub ClientConnPtr: MQPTR,
    pub ConnTag: MQBYTE128,
    pub SSLConfigPtr: PMQSCO,
    pub SSLConfigOffset: MQLONG,
    pub ConnectionId: MQBYTE24,
    pub SecurityParmsOffset: MQLONG,
    pub SecurityParmsPtr: PMQCSP,
    pub CCDTUrlPtr: PMQCHAR,
    pub CCDTUrlOffset: MQLONG,
    pub CCDTUrlLength: MQLONG,
    pub Reserved: MQBYTE8,
    pub ApplName: MQCHAR28,
    pub Reserved2: MQBYTE4,
    pub BalanceParmsPtr: PMQBNO,
    pub BalanceParmsOffset: MQLONG,
    pub Reserved3: MQBYTE4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCNO"][::std::mem::size_of::<tagMQCNO>() - 272usize];
    ["Alignment of tagMQCNO"][::std::mem::align_of::<tagMQCNO>() - 8usize];
    ["Offset of field: tagMQCNO::StrucId"][::std::mem::offset_of!(tagMQCNO, StrucId) - 0usize];
    ["Offset of field: tagMQCNO::Version"][::std::mem::offset_of!(tagMQCNO, Version) - 4usize];
    ["Offset of field: tagMQCNO::Options"][::std::mem::offset_of!(tagMQCNO, Options) - 8usize];
    ["Offset of field: tagMQCNO::ClientConnOffset"][::std::mem::offset_of!(tagMQCNO, ClientConnOffset) - 12usize];
    ["Offset of field: tagMQCNO::ClientConnPtr"][::std::mem::offset_of!(tagMQCNO, ClientConnPtr) - 16usize];
    ["Offset of field: tagMQCNO::ConnTag"][::std::mem::offset_of!(tagMQCNO, ConnTag) - 24usize];
    ["Offset of field: tagMQCNO::SSLConfigPtr"][::std::mem::offset_of!(tagMQCNO, SSLConfigPtr) - 152usize];
    ["Offset of field: tagMQCNO::SSLConfigOffset"][::std::mem::offset_of!(tagMQCNO, SSLConfigOffset) - 160usize];
    ["Offset of field: tagMQCNO::ConnectionId"][::std::mem::offset_of!(tagMQCNO, ConnectionId) - 164usize];
    ["Offset of field: tagMQCNO::SecurityParmsOffset"][::std::mem::offset_of!(tagMQCNO, SecurityParmsOffset) - 188usize];
    ["Offset of field: tagMQCNO::SecurityParmsPtr"][::std::mem::offset_of!(tagMQCNO, SecurityParmsPtr) - 192usize];
    ["Offset of field: tagMQCNO::CCDTUrlPtr"][::std::mem::offset_of!(tagMQCNO, CCDTUrlPtr) - 200usize];
    ["Offset of field: tagMQCNO::CCDTUrlOffset"][::std::mem::offset_of!(tagMQCNO, CCDTUrlOffset) - 208usize];
    ["Offset of field: tagMQCNO::CCDTUrlLength"][::std::mem::offset_of!(tagMQCNO, CCDTUrlLength) - 212usize];
    ["Offset of field: tagMQCNO::Reserved"][::std::mem::offset_of!(tagMQCNO, Reserved) - 216usize];
    ["Offset of field: tagMQCNO::ApplName"][::std::mem::offset_of!(tagMQCNO, ApplName) - 224usize];
    ["Offset of field: tagMQCNO::Reserved2"][::std::mem::offset_of!(tagMQCNO, Reserved2) - 252usize];
    ["Offset of field: tagMQCNO::BalanceParmsPtr"][::std::mem::offset_of!(tagMQCNO, BalanceParmsPtr) - 256usize];
    ["Offset of field: tagMQCNO::BalanceParmsOffset"][::std::mem::offset_of!(tagMQCNO, BalanceParmsOffset) - 264usize];
    ["Offset of field: tagMQCNO::Reserved3"][::std::mem::offset_of!(tagMQCNO, Reserved3) - 268usize];
};
pub type MQDH = tagMQDH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQDH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub PutMsgRecFields: MQLONG,
    pub RecsPresent: MQLONG,
    pub ObjectRecOffset: MQLONG,
    pub PutMsgRecOffset: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQDH"][::std::mem::size_of::<tagMQDH>() - 48usize];
    ["Alignment of tagMQDH"][::std::mem::align_of::<tagMQDH>() - 4usize];
    ["Offset of field: tagMQDH::StrucId"][::std::mem::offset_of!(tagMQDH, StrucId) - 0usize];
    ["Offset of field: tagMQDH::Version"][::std::mem::offset_of!(tagMQDH, Version) - 4usize];
    ["Offset of field: tagMQDH::StrucLength"][::std::mem::offset_of!(tagMQDH, StrucLength) - 8usize];
    ["Offset of field: tagMQDH::Encoding"][::std::mem::offset_of!(tagMQDH, Encoding) - 12usize];
    ["Offset of field: tagMQDH::CodedCharSetId"][::std::mem::offset_of!(tagMQDH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQDH::Format"][::std::mem::offset_of!(tagMQDH, Format) - 20usize];
    ["Offset of field: tagMQDH::Flags"][::std::mem::offset_of!(tagMQDH, Flags) - 28usize];
    ["Offset of field: tagMQDH::PutMsgRecFields"][::std::mem::offset_of!(tagMQDH, PutMsgRecFields) - 32usize];
    ["Offset of field: tagMQDH::RecsPresent"][::std::mem::offset_of!(tagMQDH, RecsPresent) - 36usize];
    ["Offset of field: tagMQDH::ObjectRecOffset"][::std::mem::offset_of!(tagMQDH, ObjectRecOffset) - 40usize];
    ["Offset of field: tagMQDH::PutMsgRecOffset"][::std::mem::offset_of!(tagMQDH, PutMsgRecOffset) - 44usize];
};
pub type MQDLH = tagMQDLH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQDLH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Reason: MQLONG,
    pub DestQName: MQCHAR48,
    pub DestQMgrName: MQCHAR48,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub PutApplType: MQLONG,
    pub PutApplName: MQCHAR28,
    pub PutDate: MQCHAR8,
    pub PutTime: MQCHAR8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQDLH"][::std::mem::size_of::<tagMQDLH>() - 172usize];
    ["Alignment of tagMQDLH"][::std::mem::align_of::<tagMQDLH>() - 4usize];
    ["Offset of field: tagMQDLH::StrucId"][::std::mem::offset_of!(tagMQDLH, StrucId) - 0usize];
    ["Offset of field: tagMQDLH::Version"][::std::mem::offset_of!(tagMQDLH, Version) - 4usize];
    ["Offset of field: tagMQDLH::Reason"][::std::mem::offset_of!(tagMQDLH, Reason) - 8usize];
    ["Offset of field: tagMQDLH::DestQName"][::std::mem::offset_of!(tagMQDLH, DestQName) - 12usize];
    ["Offset of field: tagMQDLH::DestQMgrName"][::std::mem::offset_of!(tagMQDLH, DestQMgrName) - 60usize];
    ["Offset of field: tagMQDLH::Encoding"][::std::mem::offset_of!(tagMQDLH, Encoding) - 108usize];
    ["Offset of field: tagMQDLH::CodedCharSetId"][::std::mem::offset_of!(tagMQDLH, CodedCharSetId) - 112usize];
    ["Offset of field: tagMQDLH::Format"][::std::mem::offset_of!(tagMQDLH, Format) - 116usize];
    ["Offset of field: tagMQDLH::PutApplType"][::std::mem::offset_of!(tagMQDLH, PutApplType) - 124usize];
    ["Offset of field: tagMQDLH::PutApplName"][::std::mem::offset_of!(tagMQDLH, PutApplName) - 128usize];
    ["Offset of field: tagMQDLH::PutDate"][::std::mem::offset_of!(tagMQDLH, PutDate) - 156usize];
    ["Offset of field: tagMQDLH::PutTime"][::std::mem::offset_of!(tagMQDLH, PutTime) - 164usize];
};
pub type MQDMHO = tagMQDMHO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQDMHO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQDMHO"][::std::mem::size_of::<tagMQDMHO>() - 12usize];
    ["Alignment of tagMQDMHO"][::std::mem::align_of::<tagMQDMHO>() - 4usize];
    ["Offset of field: tagMQDMHO::StrucId"][::std::mem::offset_of!(tagMQDMHO, StrucId) - 0usize];
    ["Offset of field: tagMQDMHO::Version"][::std::mem::offset_of!(tagMQDMHO, Version) - 4usize];
    ["Offset of field: tagMQDMHO::Options"][::std::mem::offset_of!(tagMQDMHO, Options) - 8usize];
};
pub type MQDMPO = tagMQDMPO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQDMPO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQDMPO"][::std::mem::size_of::<tagMQDMPO>() - 12usize];
    ["Alignment of tagMQDMPO"][::std::mem::align_of::<tagMQDMPO>() - 4usize];
    ["Offset of field: tagMQDMPO::StrucId"][::std::mem::offset_of!(tagMQDMPO, StrucId) - 0usize];
    ["Offset of field: tagMQDMPO::Version"][::std::mem::offset_of!(tagMQDMPO, Version) - 4usize];
    ["Offset of field: tagMQDMPO::Options"][::std::mem::offset_of!(tagMQDMPO, Options) - 8usize];
};
pub type MQGMO = tagMQGMO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQGMO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub WaitInterval: MQLONG,
    pub Signal1: MQLONG,
    pub Signal2: MQLONG,
    pub ResolvedQName: MQCHAR48,
    pub MatchOptions: MQLONG,
    pub GroupStatus: MQCHAR,
    pub SegmentStatus: MQCHAR,
    pub Segmentation: MQCHAR,
    pub Reserved1: MQCHAR,
    pub MsgToken: MQBYTE16,
    pub ReturnedLength: MQLONG,
    pub Reserved2: MQLONG,
    pub MsgHandle: MQHMSG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQGMO"][::std::mem::size_of::<tagMQGMO>() - 112usize];
    ["Alignment of tagMQGMO"][::std::mem::align_of::<tagMQGMO>() - 8usize];
    ["Offset of field: tagMQGMO::StrucId"][::std::mem::offset_of!(tagMQGMO, StrucId) - 0usize];
    ["Offset of field: tagMQGMO::Version"][::std::mem::offset_of!(tagMQGMO, Version) - 4usize];
    ["Offset of field: tagMQGMO::Options"][::std::mem::offset_of!(tagMQGMO, Options) - 8usize];
    ["Offset of field: tagMQGMO::WaitInterval"][::std::mem::offset_of!(tagMQGMO, WaitInterval) - 12usize];
    ["Offset of field: tagMQGMO::Signal1"][::std::mem::offset_of!(tagMQGMO, Signal1) - 16usize];
    ["Offset of field: tagMQGMO::Signal2"][::std::mem::offset_of!(tagMQGMO, Signal2) - 20usize];
    ["Offset of field: tagMQGMO::ResolvedQName"][::std::mem::offset_of!(tagMQGMO, ResolvedQName) - 24usize];
    ["Offset of field: tagMQGMO::MatchOptions"][::std::mem::offset_of!(tagMQGMO, MatchOptions) - 72usize];
    ["Offset of field: tagMQGMO::GroupStatus"][::std::mem::offset_of!(tagMQGMO, GroupStatus) - 76usize];
    ["Offset of field: tagMQGMO::SegmentStatus"][::std::mem::offset_of!(tagMQGMO, SegmentStatus) - 77usize];
    ["Offset of field: tagMQGMO::Segmentation"][::std::mem::offset_of!(tagMQGMO, Segmentation) - 78usize];
    ["Offset of field: tagMQGMO::Reserved1"][::std::mem::offset_of!(tagMQGMO, Reserved1) - 79usize];
    ["Offset of field: tagMQGMO::MsgToken"][::std::mem::offset_of!(tagMQGMO, MsgToken) - 80usize];
    ["Offset of field: tagMQGMO::ReturnedLength"][::std::mem::offset_of!(tagMQGMO, ReturnedLength) - 96usize];
    ["Offset of field: tagMQGMO::Reserved2"][::std::mem::offset_of!(tagMQGMO, Reserved2) - 100usize];
    ["Offset of field: tagMQGMO::MsgHandle"][::std::mem::offset_of!(tagMQGMO, MsgHandle) - 104usize];
};
pub type MQIIH = tagMQIIH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQIIH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub LTermOverride: MQCHAR8,
    pub MFSMapName: MQCHAR8,
    pub ReplyToFormat: MQCHAR8,
    pub Authenticator: MQCHAR8,
    pub TranInstanceId: MQBYTE16,
    pub TranState: MQCHAR,
    pub CommitMode: MQCHAR,
    pub SecurityScope: MQCHAR,
    pub Reserved: MQCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQIIH"][::std::mem::size_of::<tagMQIIH>() - 84usize];
    ["Alignment of tagMQIIH"][::std::mem::align_of::<tagMQIIH>() - 4usize];
    ["Offset of field: tagMQIIH::StrucId"][::std::mem::offset_of!(tagMQIIH, StrucId) - 0usize];
    ["Offset of field: tagMQIIH::Version"][::std::mem::offset_of!(tagMQIIH, Version) - 4usize];
    ["Offset of field: tagMQIIH::StrucLength"][::std::mem::offset_of!(tagMQIIH, StrucLength) - 8usize];
    ["Offset of field: tagMQIIH::Encoding"][::std::mem::offset_of!(tagMQIIH, Encoding) - 12usize];
    ["Offset of field: tagMQIIH::CodedCharSetId"][::std::mem::offset_of!(tagMQIIH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQIIH::Format"][::std::mem::offset_of!(tagMQIIH, Format) - 20usize];
    ["Offset of field: tagMQIIH::Flags"][::std::mem::offset_of!(tagMQIIH, Flags) - 28usize];
    ["Offset of field: tagMQIIH::LTermOverride"][::std::mem::offset_of!(tagMQIIH, LTermOverride) - 32usize];
    ["Offset of field: tagMQIIH::MFSMapName"][::std::mem::offset_of!(tagMQIIH, MFSMapName) - 40usize];
    ["Offset of field: tagMQIIH::ReplyToFormat"][::std::mem::offset_of!(tagMQIIH, ReplyToFormat) - 48usize];
    ["Offset of field: tagMQIIH::Authenticator"][::std::mem::offset_of!(tagMQIIH, Authenticator) - 56usize];
    ["Offset of field: tagMQIIH::TranInstanceId"][::std::mem::offset_of!(tagMQIIH, TranInstanceId) - 64usize];
    ["Offset of field: tagMQIIH::TranState"][::std::mem::offset_of!(tagMQIIH, TranState) - 80usize];
    ["Offset of field: tagMQIIH::CommitMode"][::std::mem::offset_of!(tagMQIIH, CommitMode) - 81usize];
    ["Offset of field: tagMQIIH::SecurityScope"][::std::mem::offset_of!(tagMQIIH, SecurityScope) - 82usize];
    ["Offset of field: tagMQIIH::Reserved"][::std::mem::offset_of!(tagMQIIH, Reserved) - 83usize];
};
pub type MQIMPO = tagMQIMPO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQIMPO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub RequestedEncoding: MQLONG,
    pub RequestedCCSID: MQLONG,
    pub ReturnedEncoding: MQLONG,
    pub ReturnedCCSID: MQLONG,
    pub Reserved1: MQLONG,
    pub ReturnedName: MQCHARV,
    pub TypeString: MQCHAR8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQIMPO"][::std::mem::size_of::<tagMQIMPO>() - 64usize];
    ["Alignment of tagMQIMPO"][::std::mem::align_of::<tagMQIMPO>() - 8usize];
    ["Offset of field: tagMQIMPO::StrucId"][::std::mem::offset_of!(tagMQIMPO, StrucId) - 0usize];
    ["Offset of field: tagMQIMPO::Version"][::std::mem::offset_of!(tagMQIMPO, Version) - 4usize];
    ["Offset of field: tagMQIMPO::Options"][::std::mem::offset_of!(tagMQIMPO, Options) - 8usize];
    ["Offset of field: tagMQIMPO::RequestedEncoding"][::std::mem::offset_of!(tagMQIMPO, RequestedEncoding) - 12usize];
    ["Offset of field: tagMQIMPO::RequestedCCSID"][::std::mem::offset_of!(tagMQIMPO, RequestedCCSID) - 16usize];
    ["Offset of field: tagMQIMPO::ReturnedEncoding"][::std::mem::offset_of!(tagMQIMPO, ReturnedEncoding) - 20usize];
    ["Offset of field: tagMQIMPO::ReturnedCCSID"][::std::mem::offset_of!(tagMQIMPO, ReturnedCCSID) - 24usize];
    ["Offset of field: tagMQIMPO::Reserved1"][::std::mem::offset_of!(tagMQIMPO, Reserved1) - 28usize];
    ["Offset of field: tagMQIMPO::ReturnedName"][::std::mem::offset_of!(tagMQIMPO, ReturnedName) - 32usize];
    ["Offset of field: tagMQIMPO::TypeString"][::std::mem::offset_of!(tagMQIMPO, TypeString) - 56usize];
};
pub type MQMD = tagMQMD;
pub type PMQMD = *mut MQMD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQMD {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Report: MQLONG,
    pub MsgType: MQLONG,
    pub Expiry: MQLONG,
    pub Feedback: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Priority: MQLONG,
    pub Persistence: MQLONG,
    pub MsgId: MQBYTE24,
    pub CorrelId: MQBYTE24,
    pub BackoutCount: MQLONG,
    pub ReplyToQ: MQCHAR48,
    pub ReplyToQMgr: MQCHAR48,
    pub UserIdentifier: MQCHAR12,
    pub AccountingToken: MQBYTE32,
    pub ApplIdentityData: MQCHAR32,
    pub PutApplType: MQLONG,
    pub PutApplName: MQCHAR28,
    pub PutDate: MQCHAR8,
    pub PutTime: MQCHAR8,
    pub ApplOriginData: MQCHAR4,
    pub GroupId: MQBYTE24,
    pub MsgSeqNumber: MQLONG,
    pub Offset: MQLONG,
    pub MsgFlags: MQLONG,
    pub OriginalLength: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQMD"][::std::mem::size_of::<tagMQMD>() - 364usize];
    ["Alignment of tagMQMD"][::std::mem::align_of::<tagMQMD>() - 4usize];
    ["Offset of field: tagMQMD::StrucId"][::std::mem::offset_of!(tagMQMD, StrucId) - 0usize];
    ["Offset of field: tagMQMD::Version"][::std::mem::offset_of!(tagMQMD, Version) - 4usize];
    ["Offset of field: tagMQMD::Report"][::std::mem::offset_of!(tagMQMD, Report) - 8usize];
    ["Offset of field: tagMQMD::MsgType"][::std::mem::offset_of!(tagMQMD, MsgType) - 12usize];
    ["Offset of field: tagMQMD::Expiry"][::std::mem::offset_of!(tagMQMD, Expiry) - 16usize];
    ["Offset of field: tagMQMD::Feedback"][::std::mem::offset_of!(tagMQMD, Feedback) - 20usize];
    ["Offset of field: tagMQMD::Encoding"][::std::mem::offset_of!(tagMQMD, Encoding) - 24usize];
    ["Offset of field: tagMQMD::CodedCharSetId"][::std::mem::offset_of!(tagMQMD, CodedCharSetId) - 28usize];
    ["Offset of field: tagMQMD::Format"][::std::mem::offset_of!(tagMQMD, Format) - 32usize];
    ["Offset of field: tagMQMD::Priority"][::std::mem::offset_of!(tagMQMD, Priority) - 40usize];
    ["Offset of field: tagMQMD::Persistence"][::std::mem::offset_of!(tagMQMD, Persistence) - 44usize];
    ["Offset of field: tagMQMD::MsgId"][::std::mem::offset_of!(tagMQMD, MsgId) - 48usize];
    ["Offset of field: tagMQMD::CorrelId"][::std::mem::offset_of!(tagMQMD, CorrelId) - 72usize];
    ["Offset of field: tagMQMD::BackoutCount"][::std::mem::offset_of!(tagMQMD, BackoutCount) - 96usize];
    ["Offset of field: tagMQMD::ReplyToQ"][::std::mem::offset_of!(tagMQMD, ReplyToQ) - 100usize];
    ["Offset of field: tagMQMD::ReplyToQMgr"][::std::mem::offset_of!(tagMQMD, ReplyToQMgr) - 148usize];
    ["Offset of field: tagMQMD::UserIdentifier"][::std::mem::offset_of!(tagMQMD, UserIdentifier) - 196usize];
    ["Offset of field: tagMQMD::AccountingToken"][::std::mem::offset_of!(tagMQMD, AccountingToken) - 208usize];
    ["Offset of field: tagMQMD::ApplIdentityData"][::std::mem::offset_of!(tagMQMD, ApplIdentityData) - 240usize];
    ["Offset of field: tagMQMD::PutApplType"][::std::mem::offset_of!(tagMQMD, PutApplType) - 272usize];
    ["Offset of field: tagMQMD::PutApplName"][::std::mem::offset_of!(tagMQMD, PutApplName) - 276usize];
    ["Offset of field: tagMQMD::PutDate"][::std::mem::offset_of!(tagMQMD, PutDate) - 304usize];
    ["Offset of field: tagMQMD::PutTime"][::std::mem::offset_of!(tagMQMD, PutTime) - 312usize];
    ["Offset of field: tagMQMD::ApplOriginData"][::std::mem::offset_of!(tagMQMD, ApplOriginData) - 320usize];
    ["Offset of field: tagMQMD::GroupId"][::std::mem::offset_of!(tagMQMD, GroupId) - 324usize];
    ["Offset of field: tagMQMD::MsgSeqNumber"][::std::mem::offset_of!(tagMQMD, MsgSeqNumber) - 348usize];
    ["Offset of field: tagMQMD::Offset"][::std::mem::offset_of!(tagMQMD, Offset) - 352usize];
    ["Offset of field: tagMQMD::MsgFlags"][::std::mem::offset_of!(tagMQMD, MsgFlags) - 356usize];
    ["Offset of field: tagMQMD::OriginalLength"][::std::mem::offset_of!(tagMQMD, OriginalLength) - 360usize];
};
pub type MQMDE = tagMQMDE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQMDE {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub GroupId: MQBYTE24,
    pub MsgSeqNumber: MQLONG,
    pub Offset: MQLONG,
    pub MsgFlags: MQLONG,
    pub OriginalLength: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQMDE"][::std::mem::size_of::<tagMQMDE>() - 72usize];
    ["Alignment of tagMQMDE"][::std::mem::align_of::<tagMQMDE>() - 4usize];
    ["Offset of field: tagMQMDE::StrucId"][::std::mem::offset_of!(tagMQMDE, StrucId) - 0usize];
    ["Offset of field: tagMQMDE::Version"][::std::mem::offset_of!(tagMQMDE, Version) - 4usize];
    ["Offset of field: tagMQMDE::StrucLength"][::std::mem::offset_of!(tagMQMDE, StrucLength) - 8usize];
    ["Offset of field: tagMQMDE::Encoding"][::std::mem::offset_of!(tagMQMDE, Encoding) - 12usize];
    ["Offset of field: tagMQMDE::CodedCharSetId"][::std::mem::offset_of!(tagMQMDE, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQMDE::Format"][::std::mem::offset_of!(tagMQMDE, Format) - 20usize];
    ["Offset of field: tagMQMDE::Flags"][::std::mem::offset_of!(tagMQMDE, Flags) - 28usize];
    ["Offset of field: tagMQMDE::GroupId"][::std::mem::offset_of!(tagMQMDE, GroupId) - 32usize];
    ["Offset of field: tagMQMDE::MsgSeqNumber"][::std::mem::offset_of!(tagMQMDE, MsgSeqNumber) - 56usize];
    ["Offset of field: tagMQMDE::Offset"][::std::mem::offset_of!(tagMQMDE, Offset) - 60usize];
    ["Offset of field: tagMQMDE::MsgFlags"][::std::mem::offset_of!(tagMQMDE, MsgFlags) - 64usize];
    ["Offset of field: tagMQMDE::OriginalLength"][::std::mem::offset_of!(tagMQMDE, OriginalLength) - 68usize];
};
pub type MQMD1 = tagMQMD1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQMD1 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Report: MQLONG,
    pub MsgType: MQLONG,
    pub Expiry: MQLONG,
    pub Feedback: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Priority: MQLONG,
    pub Persistence: MQLONG,
    pub MsgId: MQBYTE24,
    pub CorrelId: MQBYTE24,
    pub BackoutCount: MQLONG,
    pub ReplyToQ: MQCHAR48,
    pub ReplyToQMgr: MQCHAR48,
    pub UserIdentifier: MQCHAR12,
    pub AccountingToken: MQBYTE32,
    pub ApplIdentityData: MQCHAR32,
    pub PutApplType: MQLONG,
    pub PutApplName: MQCHAR28,
    pub PutDate: MQCHAR8,
    pub PutTime: MQCHAR8,
    pub ApplOriginData: MQCHAR4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQMD1"][::std::mem::size_of::<tagMQMD1>() - 324usize];
    ["Alignment of tagMQMD1"][::std::mem::align_of::<tagMQMD1>() - 4usize];
    ["Offset of field: tagMQMD1::StrucId"][::std::mem::offset_of!(tagMQMD1, StrucId) - 0usize];
    ["Offset of field: tagMQMD1::Version"][::std::mem::offset_of!(tagMQMD1, Version) - 4usize];
    ["Offset of field: tagMQMD1::Report"][::std::mem::offset_of!(tagMQMD1, Report) - 8usize];
    ["Offset of field: tagMQMD1::MsgType"][::std::mem::offset_of!(tagMQMD1, MsgType) - 12usize];
    ["Offset of field: tagMQMD1::Expiry"][::std::mem::offset_of!(tagMQMD1, Expiry) - 16usize];
    ["Offset of field: tagMQMD1::Feedback"][::std::mem::offset_of!(tagMQMD1, Feedback) - 20usize];
    ["Offset of field: tagMQMD1::Encoding"][::std::mem::offset_of!(tagMQMD1, Encoding) - 24usize];
    ["Offset of field: tagMQMD1::CodedCharSetId"][::std::mem::offset_of!(tagMQMD1, CodedCharSetId) - 28usize];
    ["Offset of field: tagMQMD1::Format"][::std::mem::offset_of!(tagMQMD1, Format) - 32usize];
    ["Offset of field: tagMQMD1::Priority"][::std::mem::offset_of!(tagMQMD1, Priority) - 40usize];
    ["Offset of field: tagMQMD1::Persistence"][::std::mem::offset_of!(tagMQMD1, Persistence) - 44usize];
    ["Offset of field: tagMQMD1::MsgId"][::std::mem::offset_of!(tagMQMD1, MsgId) - 48usize];
    ["Offset of field: tagMQMD1::CorrelId"][::std::mem::offset_of!(tagMQMD1, CorrelId) - 72usize];
    ["Offset of field: tagMQMD1::BackoutCount"][::std::mem::offset_of!(tagMQMD1, BackoutCount) - 96usize];
    ["Offset of field: tagMQMD1::ReplyToQ"][::std::mem::offset_of!(tagMQMD1, ReplyToQ) - 100usize];
    ["Offset of field: tagMQMD1::ReplyToQMgr"][::std::mem::offset_of!(tagMQMD1, ReplyToQMgr) - 148usize];
    ["Offset of field: tagMQMD1::UserIdentifier"][::std::mem::offset_of!(tagMQMD1, UserIdentifier) - 196usize];
    ["Offset of field: tagMQMD1::AccountingToken"][::std::mem::offset_of!(tagMQMD1, AccountingToken) - 208usize];
    ["Offset of field: tagMQMD1::ApplIdentityData"][::std::mem::offset_of!(tagMQMD1, ApplIdentityData) - 240usize];
    ["Offset of field: tagMQMD1::PutApplType"][::std::mem::offset_of!(tagMQMD1, PutApplType) - 272usize];
    ["Offset of field: tagMQMD1::PutApplName"][::std::mem::offset_of!(tagMQMD1, PutApplName) - 276usize];
    ["Offset of field: tagMQMD1::PutDate"][::std::mem::offset_of!(tagMQMD1, PutDate) - 304usize];
    ["Offset of field: tagMQMD1::PutTime"][::std::mem::offset_of!(tagMQMD1, PutTime) - 312usize];
    ["Offset of field: tagMQMD1::ApplOriginData"][::std::mem::offset_of!(tagMQMD1, ApplOriginData) - 320usize];
};
pub type MQMD2 = tagMQMD2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQMD2 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Report: MQLONG,
    pub MsgType: MQLONG,
    pub Expiry: MQLONG,
    pub Feedback: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Priority: MQLONG,
    pub Persistence: MQLONG,
    pub MsgId: MQBYTE24,
    pub CorrelId: MQBYTE24,
    pub BackoutCount: MQLONG,
    pub ReplyToQ: MQCHAR48,
    pub ReplyToQMgr: MQCHAR48,
    pub UserIdentifier: MQCHAR12,
    pub AccountingToken: MQBYTE32,
    pub ApplIdentityData: MQCHAR32,
    pub PutApplType: MQLONG,
    pub PutApplName: MQCHAR28,
    pub PutDate: MQCHAR8,
    pub PutTime: MQCHAR8,
    pub ApplOriginData: MQCHAR4,
    pub GroupId: MQBYTE24,
    pub MsgSeqNumber: MQLONG,
    pub Offset: MQLONG,
    pub MsgFlags: MQLONG,
    pub OriginalLength: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQMD2"][::std::mem::size_of::<tagMQMD2>() - 364usize];
    ["Alignment of tagMQMD2"][::std::mem::align_of::<tagMQMD2>() - 4usize];
    ["Offset of field: tagMQMD2::StrucId"][::std::mem::offset_of!(tagMQMD2, StrucId) - 0usize];
    ["Offset of field: tagMQMD2::Version"][::std::mem::offset_of!(tagMQMD2, Version) - 4usize];
    ["Offset of field: tagMQMD2::Report"][::std::mem::offset_of!(tagMQMD2, Report) - 8usize];
    ["Offset of field: tagMQMD2::MsgType"][::std::mem::offset_of!(tagMQMD2, MsgType) - 12usize];
    ["Offset of field: tagMQMD2::Expiry"][::std::mem::offset_of!(tagMQMD2, Expiry) - 16usize];
    ["Offset of field: tagMQMD2::Feedback"][::std::mem::offset_of!(tagMQMD2, Feedback) - 20usize];
    ["Offset of field: tagMQMD2::Encoding"][::std::mem::offset_of!(tagMQMD2, Encoding) - 24usize];
    ["Offset of field: tagMQMD2::CodedCharSetId"][::std::mem::offset_of!(tagMQMD2, CodedCharSetId) - 28usize];
    ["Offset of field: tagMQMD2::Format"][::std::mem::offset_of!(tagMQMD2, Format) - 32usize];
    ["Offset of field: tagMQMD2::Priority"][::std::mem::offset_of!(tagMQMD2, Priority) - 40usize];
    ["Offset of field: tagMQMD2::Persistence"][::std::mem::offset_of!(tagMQMD2, Persistence) - 44usize];
    ["Offset of field: tagMQMD2::MsgId"][::std::mem::offset_of!(tagMQMD2, MsgId) - 48usize];
    ["Offset of field: tagMQMD2::CorrelId"][::std::mem::offset_of!(tagMQMD2, CorrelId) - 72usize];
    ["Offset of field: tagMQMD2::BackoutCount"][::std::mem::offset_of!(tagMQMD2, BackoutCount) - 96usize];
    ["Offset of field: tagMQMD2::ReplyToQ"][::std::mem::offset_of!(tagMQMD2, ReplyToQ) - 100usize];
    ["Offset of field: tagMQMD2::ReplyToQMgr"][::std::mem::offset_of!(tagMQMD2, ReplyToQMgr) - 148usize];
    ["Offset of field: tagMQMD2::UserIdentifier"][::std::mem::offset_of!(tagMQMD2, UserIdentifier) - 196usize];
    ["Offset of field: tagMQMD2::AccountingToken"][::std::mem::offset_of!(tagMQMD2, AccountingToken) - 208usize];
    ["Offset of field: tagMQMD2::ApplIdentityData"][::std::mem::offset_of!(tagMQMD2, ApplIdentityData) - 240usize];
    ["Offset of field: tagMQMD2::PutApplType"][::std::mem::offset_of!(tagMQMD2, PutApplType) - 272usize];
    ["Offset of field: tagMQMD2::PutApplName"][::std::mem::offset_of!(tagMQMD2, PutApplName) - 276usize];
    ["Offset of field: tagMQMD2::PutDate"][::std::mem::offset_of!(tagMQMD2, PutDate) - 304usize];
    ["Offset of field: tagMQMD2::PutTime"][::std::mem::offset_of!(tagMQMD2, PutTime) - 312usize];
    ["Offset of field: tagMQMD2::ApplOriginData"][::std::mem::offset_of!(tagMQMD2, ApplOriginData) - 320usize];
    ["Offset of field: tagMQMD2::GroupId"][::std::mem::offset_of!(tagMQMD2, GroupId) - 324usize];
    ["Offset of field: tagMQMD2::MsgSeqNumber"][::std::mem::offset_of!(tagMQMD2, MsgSeqNumber) - 348usize];
    ["Offset of field: tagMQMD2::Offset"][::std::mem::offset_of!(tagMQMD2, Offset) - 352usize];
    ["Offset of field: tagMQMD2::MsgFlags"][::std::mem::offset_of!(tagMQMD2, MsgFlags) - 356usize];
    ["Offset of field: tagMQMD2::OriginalLength"][::std::mem::offset_of!(tagMQMD2, OriginalLength) - 360usize];
};
pub type MQMHBO = tagMQMHBO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQMHBO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQMHBO"][::std::mem::size_of::<tagMQMHBO>() - 12usize];
    ["Alignment of tagMQMHBO"][::std::mem::align_of::<tagMQMHBO>() - 4usize];
    ["Offset of field: tagMQMHBO::StrucId"][::std::mem::offset_of!(tagMQMHBO, StrucId) - 0usize];
    ["Offset of field: tagMQMHBO::Version"][::std::mem::offset_of!(tagMQMHBO, Version) - 4usize];
    ["Offset of field: tagMQMHBO::Options"][::std::mem::offset_of!(tagMQMHBO, Options) - 8usize];
};
pub type MQOD = tagMQOD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQOD {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ObjectType: MQLONG,
    pub ObjectName: MQCHAR48,
    pub ObjectQMgrName: MQCHAR48,
    pub DynamicQName: MQCHAR48,
    pub AlternateUserId: MQCHAR12,
    pub RecsPresent: MQLONG,
    pub KnownDestCount: MQLONG,
    pub UnknownDestCount: MQLONG,
    pub InvalidDestCount: MQLONG,
    pub ObjectRecOffset: MQLONG,
    pub ResponseRecOffset: MQLONG,
    pub ObjectRecPtr: MQPTR,
    pub ResponseRecPtr: MQPTR,
    pub AlternateSecurityId: MQBYTE40,
    pub ResolvedQName: MQCHAR48,
    pub ResolvedQMgrName: MQCHAR48,
    pub ObjectString: MQCHARV,
    pub SelectionString: MQCHARV,
    pub ResObjectString: MQCHARV,
    pub ResolvedType: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQOD"][::std::mem::size_of::<tagMQOD>() - 424usize];
    ["Alignment of tagMQOD"][::std::mem::align_of::<tagMQOD>() - 8usize];
    ["Offset of field: tagMQOD::StrucId"][::std::mem::offset_of!(tagMQOD, StrucId) - 0usize];
    ["Offset of field: tagMQOD::Version"][::std::mem::offset_of!(tagMQOD, Version) - 4usize];
    ["Offset of field: tagMQOD::ObjectType"][::std::mem::offset_of!(tagMQOD, ObjectType) - 8usize];
    ["Offset of field: tagMQOD::ObjectName"][::std::mem::offset_of!(tagMQOD, ObjectName) - 12usize];
    ["Offset of field: tagMQOD::ObjectQMgrName"][::std::mem::offset_of!(tagMQOD, ObjectQMgrName) - 60usize];
    ["Offset of field: tagMQOD::DynamicQName"][::std::mem::offset_of!(tagMQOD, DynamicQName) - 108usize];
    ["Offset of field: tagMQOD::AlternateUserId"][::std::mem::offset_of!(tagMQOD, AlternateUserId) - 156usize];
    ["Offset of field: tagMQOD::RecsPresent"][::std::mem::offset_of!(tagMQOD, RecsPresent) - 168usize];
    ["Offset of field: tagMQOD::KnownDestCount"][::std::mem::offset_of!(tagMQOD, KnownDestCount) - 172usize];
    ["Offset of field: tagMQOD::UnknownDestCount"][::std::mem::offset_of!(tagMQOD, UnknownDestCount) - 176usize];
    ["Offset of field: tagMQOD::InvalidDestCount"][::std::mem::offset_of!(tagMQOD, InvalidDestCount) - 180usize];
    ["Offset of field: tagMQOD::ObjectRecOffset"][::std::mem::offset_of!(tagMQOD, ObjectRecOffset) - 184usize];
    ["Offset of field: tagMQOD::ResponseRecOffset"][::std::mem::offset_of!(tagMQOD, ResponseRecOffset) - 188usize];
    ["Offset of field: tagMQOD::ObjectRecPtr"][::std::mem::offset_of!(tagMQOD, ObjectRecPtr) - 192usize];
    ["Offset of field: tagMQOD::ResponseRecPtr"][::std::mem::offset_of!(tagMQOD, ResponseRecPtr) - 200usize];
    ["Offset of field: tagMQOD::AlternateSecurityId"][::std::mem::offset_of!(tagMQOD, AlternateSecurityId) - 208usize];
    ["Offset of field: tagMQOD::ResolvedQName"][::std::mem::offset_of!(tagMQOD, ResolvedQName) - 248usize];
    ["Offset of field: tagMQOD::ResolvedQMgrName"][::std::mem::offset_of!(tagMQOD, ResolvedQMgrName) - 296usize];
    ["Offset of field: tagMQOD::ObjectString"][::std::mem::offset_of!(tagMQOD, ObjectString) - 344usize];
    ["Offset of field: tagMQOD::SelectionString"][::std::mem::offset_of!(tagMQOD, SelectionString) - 368usize];
    ["Offset of field: tagMQOD::ResObjectString"][::std::mem::offset_of!(tagMQOD, ResObjectString) - 392usize];
    ["Offset of field: tagMQOD::ResolvedType"][::std::mem::offset_of!(tagMQOD, ResolvedType) - 416usize];
};
pub type MQOR = tagMQOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQOR {
    pub ObjectName: MQCHAR48,
    pub ObjectQMgrName: MQCHAR48,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQOR"][::std::mem::size_of::<tagMQOR>() - 96usize];
    ["Alignment of tagMQOR"][::std::mem::align_of::<tagMQOR>() - 1usize];
    ["Offset of field: tagMQOR::ObjectName"][::std::mem::offset_of!(tagMQOR, ObjectName) - 0usize];
    ["Offset of field: tagMQOR::ObjectQMgrName"][::std::mem::offset_of!(tagMQOR, ObjectQMgrName) - 48usize];
};
pub type MQPD = tagMQPD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQPD {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub Support: MQLONG,
    pub Context: MQLONG,
    pub CopyOptions: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQPD"][::std::mem::size_of::<tagMQPD>() - 24usize];
    ["Alignment of tagMQPD"][::std::mem::align_of::<tagMQPD>() - 4usize];
    ["Offset of field: tagMQPD::StrucId"][::std::mem::offset_of!(tagMQPD, StrucId) - 0usize];
    ["Offset of field: tagMQPD::Version"][::std::mem::offset_of!(tagMQPD, Version) - 4usize];
    ["Offset of field: tagMQPD::Options"][::std::mem::offset_of!(tagMQPD, Options) - 8usize];
    ["Offset of field: tagMQPD::Support"][::std::mem::offset_of!(tagMQPD, Support) - 12usize];
    ["Offset of field: tagMQPD::Context"][::std::mem::offset_of!(tagMQPD, Context) - 16usize];
    ["Offset of field: tagMQPD::CopyOptions"][::std::mem::offset_of!(tagMQPD, CopyOptions) - 20usize];
};
pub type MQPMO = tagMQPMO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQPMO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub Timeout: MQLONG,
    pub Context: MQHOBJ,
    pub KnownDestCount: MQLONG,
    pub UnknownDestCount: MQLONG,
    pub InvalidDestCount: MQLONG,
    pub ResolvedQName: MQCHAR48,
    pub ResolvedQMgrName: MQCHAR48,
    pub RecsPresent: MQLONG,
    pub PutMsgRecFields: MQLONG,
    pub PutMsgRecOffset: MQLONG,
    pub ResponseRecOffset: MQLONG,
    pub PutMsgRecPtr: MQPTR,
    pub ResponseRecPtr: MQPTR,
    pub OriginalMsgHandle: MQHMSG,
    pub NewMsgHandle: MQHMSG,
    pub Action: MQLONG,
    pub PubLevel: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQPMO"][::std::mem::size_of::<tagMQPMO>() - 184usize];
    ["Alignment of tagMQPMO"][::std::mem::align_of::<tagMQPMO>() - 8usize];
    ["Offset of field: tagMQPMO::StrucId"][::std::mem::offset_of!(tagMQPMO, StrucId) - 0usize];
    ["Offset of field: tagMQPMO::Version"][::std::mem::offset_of!(tagMQPMO, Version) - 4usize];
    ["Offset of field: tagMQPMO::Options"][::std::mem::offset_of!(tagMQPMO, Options) - 8usize];
    ["Offset of field: tagMQPMO::Timeout"][::std::mem::offset_of!(tagMQPMO, Timeout) - 12usize];
    ["Offset of field: tagMQPMO::Context"][::std::mem::offset_of!(tagMQPMO, Context) - 16usize];
    ["Offset of field: tagMQPMO::KnownDestCount"][::std::mem::offset_of!(tagMQPMO, KnownDestCount) - 20usize];
    ["Offset of field: tagMQPMO::UnknownDestCount"][::std::mem::offset_of!(tagMQPMO, UnknownDestCount) - 24usize];
    ["Offset of field: tagMQPMO::InvalidDestCount"][::std::mem::offset_of!(tagMQPMO, InvalidDestCount) - 28usize];
    ["Offset of field: tagMQPMO::ResolvedQName"][::std::mem::offset_of!(tagMQPMO, ResolvedQName) - 32usize];
    ["Offset of field: tagMQPMO::ResolvedQMgrName"][::std::mem::offset_of!(tagMQPMO, ResolvedQMgrName) - 80usize];
    ["Offset of field: tagMQPMO::RecsPresent"][::std::mem::offset_of!(tagMQPMO, RecsPresent) - 128usize];
    ["Offset of field: tagMQPMO::PutMsgRecFields"][::std::mem::offset_of!(tagMQPMO, PutMsgRecFields) - 132usize];
    ["Offset of field: tagMQPMO::PutMsgRecOffset"][::std::mem::offset_of!(tagMQPMO, PutMsgRecOffset) - 136usize];
    ["Offset of field: tagMQPMO::ResponseRecOffset"][::std::mem::offset_of!(tagMQPMO, ResponseRecOffset) - 140usize];
    ["Offset of field: tagMQPMO::PutMsgRecPtr"][::std::mem::offset_of!(tagMQPMO, PutMsgRecPtr) - 144usize];
    ["Offset of field: tagMQPMO::ResponseRecPtr"][::std::mem::offset_of!(tagMQPMO, ResponseRecPtr) - 152usize];
    ["Offset of field: tagMQPMO::OriginalMsgHandle"][::std::mem::offset_of!(tagMQPMO, OriginalMsgHandle) - 160usize];
    ["Offset of field: tagMQPMO::NewMsgHandle"][::std::mem::offset_of!(tagMQPMO, NewMsgHandle) - 168usize];
    ["Offset of field: tagMQPMO::Action"][::std::mem::offset_of!(tagMQPMO, Action) - 176usize];
    ["Offset of field: tagMQPMO::PubLevel"][::std::mem::offset_of!(tagMQPMO, PubLevel) - 180usize];
};
pub type MQRFH = tagMQRFH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQRFH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQRFH"][::std::mem::size_of::<tagMQRFH>() - 32usize];
    ["Alignment of tagMQRFH"][::std::mem::align_of::<tagMQRFH>() - 4usize];
    ["Offset of field: tagMQRFH::StrucId"][::std::mem::offset_of!(tagMQRFH, StrucId) - 0usize];
    ["Offset of field: tagMQRFH::Version"][::std::mem::offset_of!(tagMQRFH, Version) - 4usize];
    ["Offset of field: tagMQRFH::StrucLength"][::std::mem::offset_of!(tagMQRFH, StrucLength) - 8usize];
    ["Offset of field: tagMQRFH::Encoding"][::std::mem::offset_of!(tagMQRFH, Encoding) - 12usize];
    ["Offset of field: tagMQRFH::CodedCharSetId"][::std::mem::offset_of!(tagMQRFH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQRFH::Format"][::std::mem::offset_of!(tagMQRFH, Format) - 20usize];
    ["Offset of field: tagMQRFH::Flags"][::std::mem::offset_of!(tagMQRFH, Flags) - 28usize];
};
pub type MQRFH2 = tagMQRFH2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQRFH2 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub NameValueCCSID: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQRFH2"][::std::mem::size_of::<tagMQRFH2>() - 36usize];
    ["Alignment of tagMQRFH2"][::std::mem::align_of::<tagMQRFH2>() - 4usize];
    ["Offset of field: tagMQRFH2::StrucId"][::std::mem::offset_of!(tagMQRFH2, StrucId) - 0usize];
    ["Offset of field: tagMQRFH2::Version"][::std::mem::offset_of!(tagMQRFH2, Version) - 4usize];
    ["Offset of field: tagMQRFH2::StrucLength"][::std::mem::offset_of!(tagMQRFH2, StrucLength) - 8usize];
    ["Offset of field: tagMQRFH2::Encoding"][::std::mem::offset_of!(tagMQRFH2, Encoding) - 12usize];
    ["Offset of field: tagMQRFH2::CodedCharSetId"][::std::mem::offset_of!(tagMQRFH2, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQRFH2::Format"][::std::mem::offset_of!(tagMQRFH2, Format) - 20usize];
    ["Offset of field: tagMQRFH2::Flags"][::std::mem::offset_of!(tagMQRFH2, Flags) - 28usize];
    ["Offset of field: tagMQRFH2::NameValueCCSID"][::std::mem::offset_of!(tagMQRFH2, NameValueCCSID) - 32usize];
};
pub type MQRMH = tagMQRMH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQRMH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub ObjectType: MQCHAR8,
    pub ObjectInstanceId: MQBYTE24,
    pub SrcEnvLength: MQLONG,
    pub SrcEnvOffset: MQLONG,
    pub SrcNameLength: MQLONG,
    pub SrcNameOffset: MQLONG,
    pub DestEnvLength: MQLONG,
    pub DestEnvOffset: MQLONG,
    pub DestNameLength: MQLONG,
    pub DestNameOffset: MQLONG,
    pub DataLogicalLength: MQLONG,
    pub DataLogicalOffset: MQLONG,
    pub DataLogicalOffset2: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQRMH"][::std::mem::size_of::<tagMQRMH>() - 108usize];
    ["Alignment of tagMQRMH"][::std::mem::align_of::<tagMQRMH>() - 4usize];
    ["Offset of field: tagMQRMH::StrucId"][::std::mem::offset_of!(tagMQRMH, StrucId) - 0usize];
    ["Offset of field: tagMQRMH::Version"][::std::mem::offset_of!(tagMQRMH, Version) - 4usize];
    ["Offset of field: tagMQRMH::StrucLength"][::std::mem::offset_of!(tagMQRMH, StrucLength) - 8usize];
    ["Offset of field: tagMQRMH::Encoding"][::std::mem::offset_of!(tagMQRMH, Encoding) - 12usize];
    ["Offset of field: tagMQRMH::CodedCharSetId"][::std::mem::offset_of!(tagMQRMH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQRMH::Format"][::std::mem::offset_of!(tagMQRMH, Format) - 20usize];
    ["Offset of field: tagMQRMH::Flags"][::std::mem::offset_of!(tagMQRMH, Flags) - 28usize];
    ["Offset of field: tagMQRMH::ObjectType"][::std::mem::offset_of!(tagMQRMH, ObjectType) - 32usize];
    ["Offset of field: tagMQRMH::ObjectInstanceId"][::std::mem::offset_of!(tagMQRMH, ObjectInstanceId) - 40usize];
    ["Offset of field: tagMQRMH::SrcEnvLength"][::std::mem::offset_of!(tagMQRMH, SrcEnvLength) - 64usize];
    ["Offset of field: tagMQRMH::SrcEnvOffset"][::std::mem::offset_of!(tagMQRMH, SrcEnvOffset) - 68usize];
    ["Offset of field: tagMQRMH::SrcNameLength"][::std::mem::offset_of!(tagMQRMH, SrcNameLength) - 72usize];
    ["Offset of field: tagMQRMH::SrcNameOffset"][::std::mem::offset_of!(tagMQRMH, SrcNameOffset) - 76usize];
    ["Offset of field: tagMQRMH::DestEnvLength"][::std::mem::offset_of!(tagMQRMH, DestEnvLength) - 80usize];
    ["Offset of field: tagMQRMH::DestEnvOffset"][::std::mem::offset_of!(tagMQRMH, DestEnvOffset) - 84usize];
    ["Offset of field: tagMQRMH::DestNameLength"][::std::mem::offset_of!(tagMQRMH, DestNameLength) - 88usize];
    ["Offset of field: tagMQRMH::DestNameOffset"][::std::mem::offset_of!(tagMQRMH, DestNameOffset) - 92usize];
    ["Offset of field: tagMQRMH::DataLogicalLength"][::std::mem::offset_of!(tagMQRMH, DataLogicalLength) - 96usize];
    ["Offset of field: tagMQRMH::DataLogicalOffset"][::std::mem::offset_of!(tagMQRMH, DataLogicalOffset) - 100usize];
    ["Offset of field: tagMQRMH::DataLogicalOffset2"][::std::mem::offset_of!(tagMQRMH, DataLogicalOffset2) - 104usize];
};
pub type MQRR = tagMQRR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQRR {
    pub CompCode: MQLONG,
    pub Reason: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQRR"][::std::mem::size_of::<tagMQRR>() - 8usize];
    ["Alignment of tagMQRR"][::std::mem::align_of::<tagMQRR>() - 4usize];
    ["Offset of field: tagMQRR::CompCode"][::std::mem::offset_of!(tagMQRR, CompCode) - 0usize];
    ["Offset of field: tagMQRR::Reason"][::std::mem::offset_of!(tagMQRR, Reason) - 4usize];
};
pub type MQSD = tagMQSD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQSD {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub ObjectName: MQCHAR48,
    pub AlternateUserId: MQCHAR12,
    pub AlternateSecurityId: MQBYTE40,
    pub SubExpiry: MQLONG,
    pub ObjectString: MQCHARV,
    pub SubName: MQCHARV,
    pub SubUserData: MQCHARV,
    pub SubCorrelId: MQBYTE24,
    pub PubPriority: MQLONG,
    pub PubAccountingToken: MQBYTE32,
    pub PubApplIdentityData: MQCHAR32,
    pub SelectionString: MQCHARV,
    pub SubLevel: MQLONG,
    pub ResObjectString: MQCHARV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQSD"][::std::mem::size_of::<tagMQSD>() - 344usize];
    ["Alignment of tagMQSD"][::std::mem::align_of::<tagMQSD>() - 8usize];
    ["Offset of field: tagMQSD::StrucId"][::std::mem::offset_of!(tagMQSD, StrucId) - 0usize];
    ["Offset of field: tagMQSD::Version"][::std::mem::offset_of!(tagMQSD, Version) - 4usize];
    ["Offset of field: tagMQSD::Options"][::std::mem::offset_of!(tagMQSD, Options) - 8usize];
    ["Offset of field: tagMQSD::ObjectName"][::std::mem::offset_of!(tagMQSD, ObjectName) - 12usize];
    ["Offset of field: tagMQSD::AlternateUserId"][::std::mem::offset_of!(tagMQSD, AlternateUserId) - 60usize];
    ["Offset of field: tagMQSD::AlternateSecurityId"][::std::mem::offset_of!(tagMQSD, AlternateSecurityId) - 72usize];
    ["Offset of field: tagMQSD::SubExpiry"][::std::mem::offset_of!(tagMQSD, SubExpiry) - 112usize];
    ["Offset of field: tagMQSD::ObjectString"][::std::mem::offset_of!(tagMQSD, ObjectString) - 120usize];
    ["Offset of field: tagMQSD::SubName"][::std::mem::offset_of!(tagMQSD, SubName) - 144usize];
    ["Offset of field: tagMQSD::SubUserData"][::std::mem::offset_of!(tagMQSD, SubUserData) - 168usize];
    ["Offset of field: tagMQSD::SubCorrelId"][::std::mem::offset_of!(tagMQSD, SubCorrelId) - 192usize];
    ["Offset of field: tagMQSD::PubPriority"][::std::mem::offset_of!(tagMQSD, PubPriority) - 216usize];
    ["Offset of field: tagMQSD::PubAccountingToken"][::std::mem::offset_of!(tagMQSD, PubAccountingToken) - 220usize];
    ["Offset of field: tagMQSD::PubApplIdentityData"][::std::mem::offset_of!(tagMQSD, PubApplIdentityData) - 252usize];
    ["Offset of field: tagMQSD::SelectionString"][::std::mem::offset_of!(tagMQSD, SelectionString) - 288usize];
    ["Offset of field: tagMQSD::SubLevel"][::std::mem::offset_of!(tagMQSD, SubLevel) - 312usize];
    ["Offset of field: tagMQSD::ResObjectString"][::std::mem::offset_of!(tagMQSD, ResObjectString) - 320usize];
};
pub type MQSMPO = tagMQSMPO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQSMPO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub ValueEncoding: MQLONG,
    pub ValueCCSID: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQSMPO"][::std::mem::size_of::<tagMQSMPO>() - 20usize];
    ["Alignment of tagMQSMPO"][::std::mem::align_of::<tagMQSMPO>() - 4usize];
    ["Offset of field: tagMQSMPO::StrucId"][::std::mem::offset_of!(tagMQSMPO, StrucId) - 0usize];
    ["Offset of field: tagMQSMPO::Version"][::std::mem::offset_of!(tagMQSMPO, Version) - 4usize];
    ["Offset of field: tagMQSMPO::Options"][::std::mem::offset_of!(tagMQSMPO, Options) - 8usize];
    ["Offset of field: tagMQSMPO::ValueEncoding"][::std::mem::offset_of!(tagMQSMPO, ValueEncoding) - 12usize];
    ["Offset of field: tagMQSMPO::ValueCCSID"][::std::mem::offset_of!(tagMQSMPO, ValueCCSID) - 16usize];
};
pub type MQSRO = tagMQSRO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQSRO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub NumPubs: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQSRO"][::std::mem::size_of::<tagMQSRO>() - 16usize];
    ["Alignment of tagMQSRO"][::std::mem::align_of::<tagMQSRO>() - 4usize];
    ["Offset of field: tagMQSRO::StrucId"][::std::mem::offset_of!(tagMQSRO, StrucId) - 0usize];
    ["Offset of field: tagMQSRO::Version"][::std::mem::offset_of!(tagMQSRO, Version) - 4usize];
    ["Offset of field: tagMQSRO::Options"][::std::mem::offset_of!(tagMQSRO, Options) - 8usize];
    ["Offset of field: tagMQSRO::NumPubs"][::std::mem::offset_of!(tagMQSRO, NumPubs) - 12usize];
};
pub type MQSTS = tagMQSTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQSTS {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub CompCode: MQLONG,
    pub Reason: MQLONG,
    pub PutSuccessCount: MQLONG,
    pub PutWarningCount: MQLONG,
    pub PutFailureCount: MQLONG,
    pub ObjectType: MQLONG,
    pub ObjectName: MQCHAR48,
    pub ObjectQMgrName: MQCHAR48,
    pub ResolvedObjectName: MQCHAR48,
    pub ResolvedQMgrName: MQCHAR48,
    pub ObjectString: MQCHARV,
    pub SubName: MQCHARV,
    pub OpenOptions: MQLONG,
    pub SubOptions: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQSTS"][::std::mem::size_of::<tagMQSTS>() - 280usize];
    ["Alignment of tagMQSTS"][::std::mem::align_of::<tagMQSTS>() - 8usize];
    ["Offset of field: tagMQSTS::StrucId"][::std::mem::offset_of!(tagMQSTS, StrucId) - 0usize];
    ["Offset of field: tagMQSTS::Version"][::std::mem::offset_of!(tagMQSTS, Version) - 4usize];
    ["Offset of field: tagMQSTS::CompCode"][::std::mem::offset_of!(tagMQSTS, CompCode) - 8usize];
    ["Offset of field: tagMQSTS::Reason"][::std::mem::offset_of!(tagMQSTS, Reason) - 12usize];
    ["Offset of field: tagMQSTS::PutSuccessCount"][::std::mem::offset_of!(tagMQSTS, PutSuccessCount) - 16usize];
    ["Offset of field: tagMQSTS::PutWarningCount"][::std::mem::offset_of!(tagMQSTS, PutWarningCount) - 20usize];
    ["Offset of field: tagMQSTS::PutFailureCount"][::std::mem::offset_of!(tagMQSTS, PutFailureCount) - 24usize];
    ["Offset of field: tagMQSTS::ObjectType"][::std::mem::offset_of!(tagMQSTS, ObjectType) - 28usize];
    ["Offset of field: tagMQSTS::ObjectName"][::std::mem::offset_of!(tagMQSTS, ObjectName) - 32usize];
    ["Offset of field: tagMQSTS::ObjectQMgrName"][::std::mem::offset_of!(tagMQSTS, ObjectQMgrName) - 80usize];
    ["Offset of field: tagMQSTS::ResolvedObjectName"][::std::mem::offset_of!(tagMQSTS, ResolvedObjectName) - 128usize];
    ["Offset of field: tagMQSTS::ResolvedQMgrName"][::std::mem::offset_of!(tagMQSTS, ResolvedQMgrName) - 176usize];
    ["Offset of field: tagMQSTS::ObjectString"][::std::mem::offset_of!(tagMQSTS, ObjectString) - 224usize];
    ["Offset of field: tagMQSTS::SubName"][::std::mem::offset_of!(tagMQSTS, SubName) - 248usize];
    ["Offset of field: tagMQSTS::OpenOptions"][::std::mem::offset_of!(tagMQSTS, OpenOptions) - 272usize];
    ["Offset of field: tagMQSTS::SubOptions"][::std::mem::offset_of!(tagMQSTS, SubOptions) - 276usize];
};
pub type MQTM = tagMQTM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQTM {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub QName: MQCHAR48,
    pub ProcessName: MQCHAR48,
    pub TriggerData: MQCHAR64,
    pub ApplType: MQLONG,
    pub ApplId: MQCHAR256,
    pub EnvData: MQCHAR128,
    pub UserData: MQCHAR128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQTM"][::std::mem::size_of::<tagMQTM>() - 684usize];
    ["Alignment of tagMQTM"][::std::mem::align_of::<tagMQTM>() - 4usize];
    ["Offset of field: tagMQTM::StrucId"][::std::mem::offset_of!(tagMQTM, StrucId) - 0usize];
    ["Offset of field: tagMQTM::Version"][::std::mem::offset_of!(tagMQTM, Version) - 4usize];
    ["Offset of field: tagMQTM::QName"][::std::mem::offset_of!(tagMQTM, QName) - 8usize];
    ["Offset of field: tagMQTM::ProcessName"][::std::mem::offset_of!(tagMQTM, ProcessName) - 56usize];
    ["Offset of field: tagMQTM::TriggerData"][::std::mem::offset_of!(tagMQTM, TriggerData) - 104usize];
    ["Offset of field: tagMQTM::ApplType"][::std::mem::offset_of!(tagMQTM, ApplType) - 168usize];
    ["Offset of field: tagMQTM::ApplId"][::std::mem::offset_of!(tagMQTM, ApplId) - 172usize];
    ["Offset of field: tagMQTM::EnvData"][::std::mem::offset_of!(tagMQTM, EnvData) - 428usize];
    ["Offset of field: tagMQTM::UserData"][::std::mem::offset_of!(tagMQTM, UserData) - 556usize];
};
pub type MQTMC2 = tagMQTMC2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQTMC2 {
    pub StrucId: MQCHAR4,
    pub Version: MQCHAR4,
    pub QName: MQCHAR48,
    pub ProcessName: MQCHAR48,
    pub TriggerData: MQCHAR64,
    pub ApplType: MQCHAR4,
    pub ApplId: MQCHAR256,
    pub EnvData: MQCHAR128,
    pub UserData: MQCHAR128,
    pub QMgrName: MQCHAR48,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQTMC2"][::std::mem::size_of::<tagMQTMC2>() - 732usize];
    ["Alignment of tagMQTMC2"][::std::mem::align_of::<tagMQTMC2>() - 1usize];
    ["Offset of field: tagMQTMC2::StrucId"][::std::mem::offset_of!(tagMQTMC2, StrucId) - 0usize];
    ["Offset of field: tagMQTMC2::Version"][::std::mem::offset_of!(tagMQTMC2, Version) - 4usize];
    ["Offset of field: tagMQTMC2::QName"][::std::mem::offset_of!(tagMQTMC2, QName) - 8usize];
    ["Offset of field: tagMQTMC2::ProcessName"][::std::mem::offset_of!(tagMQTMC2, ProcessName) - 56usize];
    ["Offset of field: tagMQTMC2::TriggerData"][::std::mem::offset_of!(tagMQTMC2, TriggerData) - 104usize];
    ["Offset of field: tagMQTMC2::ApplType"][::std::mem::offset_of!(tagMQTMC2, ApplType) - 168usize];
    ["Offset of field: tagMQTMC2::ApplId"][::std::mem::offset_of!(tagMQTMC2, ApplId) - 172usize];
    ["Offset of field: tagMQTMC2::EnvData"][::std::mem::offset_of!(tagMQTMC2, EnvData) - 428usize];
    ["Offset of field: tagMQTMC2::UserData"][::std::mem::offset_of!(tagMQTMC2, UserData) - 556usize];
    ["Offset of field: tagMQTMC2::QMgrName"][::std::mem::offset_of!(tagMQTMC2, QMgrName) - 684usize];
};
pub type MQWIH = tagMQWIH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWIH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub ServiceName: MQCHAR32,
    pub ServiceStep: MQCHAR8,
    pub MsgToken: MQBYTE16,
    pub Reserved: MQCHAR32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWIH"][::std::mem::size_of::<tagMQWIH>() - 120usize];
    ["Alignment of tagMQWIH"][::std::mem::align_of::<tagMQWIH>() - 4usize];
    ["Offset of field: tagMQWIH::StrucId"][::std::mem::offset_of!(tagMQWIH, StrucId) - 0usize];
    ["Offset of field: tagMQWIH::Version"][::std::mem::offset_of!(tagMQWIH, Version) - 4usize];
    ["Offset of field: tagMQWIH::StrucLength"][::std::mem::offset_of!(tagMQWIH, StrucLength) - 8usize];
    ["Offset of field: tagMQWIH::Encoding"][::std::mem::offset_of!(tagMQWIH, Encoding) - 12usize];
    ["Offset of field: tagMQWIH::CodedCharSetId"][::std::mem::offset_of!(tagMQWIH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQWIH::Format"][::std::mem::offset_of!(tagMQWIH, Format) - 20usize];
    ["Offset of field: tagMQWIH::Flags"][::std::mem::offset_of!(tagMQWIH, Flags) - 28usize];
    ["Offset of field: tagMQWIH::ServiceName"][::std::mem::offset_of!(tagMQWIH, ServiceName) - 32usize];
    ["Offset of field: tagMQWIH::ServiceStep"][::std::mem::offset_of!(tagMQWIH, ServiceStep) - 64usize];
    ["Offset of field: tagMQWIH::MsgToken"][::std::mem::offset_of!(tagMQWIH, MsgToken) - 72usize];
    ["Offset of field: tagMQWIH::Reserved"][::std::mem::offset_of!(tagMQWIH, Reserved) - 88usize];
};
pub type MQXQH = tagMQXQH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQXQH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub RemoteQName: MQCHAR48,
    pub RemoteQMgrName: MQCHAR48,
    pub MsgDesc: MQMD1,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQXQH"][::std::mem::size_of::<tagMQXQH>() - 428usize];
    ["Alignment of tagMQXQH"][::std::mem::align_of::<tagMQXQH>() - 4usize];
    ["Offset of field: tagMQXQH::StrucId"][::std::mem::offset_of!(tagMQXQH, StrucId) - 0usize];
    ["Offset of field: tagMQXQH::Version"][::std::mem::offset_of!(tagMQXQH, Version) - 4usize];
    ["Offset of field: tagMQXQH::RemoteQName"][::std::mem::offset_of!(tagMQXQH, RemoteQName) - 8usize];
    ["Offset of field: tagMQXQH::RemoteQMgrName"][::std::mem::offset_of!(tagMQXQH, RemoteQMgrName) - 56usize];
    ["Offset of field: tagMQXQH::MsgDesc"][::std::mem::offset_of!(tagMQXQH, MsgDesc) - 104usize];
};
extern "C" {
    pub fn MQBACK(Hconn: MQHCONN, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_BACK_CALL = ::std::option::Option<unsafe extern "C" fn(Hconn: MQHCONN, pCompCode: PMQLONG, pReason: PMQLONG)>;
pub type PMQ_BACK_CALL = MQ_BACK_CALL;
extern "C" {
    pub fn MQBEGIN(Hconn: MQHCONN, pBeginOptions: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_BEGIN_CALL =
    ::std::option::Option<unsafe extern "C" fn(Hconn: MQHCONN, pBeginOptions: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG)>;
pub type PMQ_BEGIN_CALL = MQ_BEGIN_CALL;
extern "C" {
    pub fn MQBUFMH(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pBufMsgHOpts: PMQVOID,
        pMsgDesc: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_BUFMH_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pBufMsgHOpts: PMQVOID,
        pMsgDesc: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_BUFMH_CALL = MQ_BUFMH_CALL;
extern "C" {
    pub fn MQCB(
        Hconn: MQHCONN,
        Operation: MQLONG,
        pCallbackDesc: PMQVOID,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pGetMsgOpts: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_CB_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Operation: MQLONG,
        pCallbackDesc: PMQVOID,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pGetMsgOpts: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_CB_CALL = MQ_CB_CALL;
extern "C" {
    pub fn MQCLOSE(Hconn: MQHCONN, pHobj: PMQHOBJ, Options: MQLONG, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_CLOSE_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, pHobj: PMQHOBJ, Options: MQLONG, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_CLOSE_CALL = MQ_CLOSE_CALL;
extern "C" {
    pub fn MQCMIT(Hconn: MQHCONN, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_CMIT_CALL = ::std::option::Option<unsafe extern "C" fn(Hconn: MQHCONN, pCompCode: PMQLONG, pReason: PMQLONG)>;
pub type PMQ_CMIT_CALL = MQ_CMIT_CALL;
extern "C" {
    pub fn MQCONN(pQMgrName: PMQCHAR, pHconn: PMQHCONN, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_CONN_CALL =
    ::std::option::Option<unsafe extern "C" fn(pQMgrName: PMQCHAR, pHconn: PMQHCONN, pCompCode: PMQLONG, pReason: PMQLONG)>;
pub type PMQ_CONN_CALL = MQ_CONN_CALL;
extern "C" {
    pub fn MQCONNX(pQMgrName: PMQCHAR, pConnectOpts: PMQCNO, pHconn: PMQHCONN, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_CONNX_CALL = ::std::option::Option<
    unsafe extern "C" fn(pQMgrName: PMQCHAR, pConnectOpts: PMQCNO, pHconn: PMQHCONN, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_CONNX_CALL = MQ_CONNX_CALL;
extern "C" {
    pub fn MQCRTMH(Hconn: MQHCONN, pCrtMsgHOpts: PMQVOID, pHmsg: PMQHMSG, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_CRTMH_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, pCrtMsgHOpts: PMQVOID, pHmsg: PMQHMSG, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_CRTMH_CALL = MQ_CRTMH_CALL;
extern "C" {
    pub fn MQCTL(Hconn: MQHCONN, Operation: MQLONG, pControlOpts: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_CTL_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, Operation: MQLONG, pControlOpts: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_CTL_CALL = MQ_CTL_CALL;
extern "C" {
    pub fn MQDISC(pHconn: PMQHCONN, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_DISC_CALL = ::std::option::Option<unsafe extern "C" fn(pHconn: PMQHCONN, pCompCode: PMQLONG, pReason: PMQLONG)>;
pub type PMQ_DISC_CALL = MQ_DISC_CALL;
extern "C" {
    pub fn MQDLTMH(Hconn: MQHCONN, pHmsg: PMQHMSG, pDltMsgHOpts: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_DLTMH_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, pHmsg: PMQHMSG, pDltMsgHOpts: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_DLTMH_CALL = MQ_DLTMH_CALL;
extern "C" {
    pub fn MQDLTMP(Hconn: MQHCONN, Hmsg: MQHMSG, pDltPropOpts: PMQVOID, pName: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_DLTMP_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pDltPropOpts: PMQVOID,
        pName: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_DLTMP_CALL = MQ_DLTMP_CALL;
extern "C" {
    pub fn MQGET(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pGetMsgOpts: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_GET_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pGetMsgOpts: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_GET_CALL = MQ_GET_CALL;
extern "C" {
    pub fn MQINQ(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        SelectorCount: MQLONG,
        pSelectors: PMQLONG,
        IntAttrCount: MQLONG,
        pIntAttrs: PMQLONG,
        CharAttrLength: MQLONG,
        pCharAttrs: PMQCHAR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_INQ_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        SelectorCount: MQLONG,
        pSelectors: PMQLONG,
        IntAttrCount: MQLONG,
        pIntAttrs: PMQLONG,
        CharAttrLength: MQLONG,
        pCharAttrs: PMQCHAR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_INQ_CALL = MQ_INQ_CALL;
extern "C" {
    pub fn MQINQMP(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pInqPropOpts: PMQVOID,
        pName: PMQVOID,
        pPropDesc: PMQVOID,
        pType: PMQLONG,
        ValueLength: MQLONG,
        pValue: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_INQMP_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pInqPropOpts: PMQVOID,
        pName: PMQVOID,
        pPropDesc: PMQVOID,
        pType: PMQLONG,
        ValueLength: MQLONG,
        pValue: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_INQMP_CALL = MQ_INQMP_CALL;
extern "C" {
    pub fn MQMHBUF(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pMsgHBufOpts: PMQVOID,
        pName: PMQVOID,
        pMsgDesc: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_MHBUF_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pMsgHBufOpts: PMQVOID,
        pName: PMQVOID,
        pMsgDesc: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_MHBUF_CALL = MQ_MHBUF_CALL;
extern "C" {
    pub fn MQOPEN(Hconn: MQHCONN, pObjDesc: PMQVOID, Options: MQLONG, pHobj: PMQHOBJ, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_OPEN_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        pObjDesc: PMQVOID,
        Options: MQLONG,
        pHobj: PMQHOBJ,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_OPEN_CALL = MQ_OPEN_CALL;
extern "C" {
    pub fn MQPUT(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pPutMsgOpts: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_PUT_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pPutMsgOpts: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_PUT_CALL = MQ_PUT_CALL;
extern "C" {
    pub fn MQPUT1(
        Hconn: MQHCONN,
        pObjDesc: PMQVOID,
        pMsgDesc: PMQVOID,
        pPutMsgOpts: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_PUT1_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        pObjDesc: PMQVOID,
        pMsgDesc: PMQVOID,
        pPutMsgOpts: PMQVOID,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_PUT1_CALL = MQ_PUT1_CALL;
extern "C" {
    pub fn MQSET(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        SelectorCount: MQLONG,
        pSelectors: PMQLONG,
        IntAttrCount: MQLONG,
        pIntAttrs: PMQLONG,
        CharAttrLength: MQLONG,
        pCharAttrs: PMQCHAR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_SET_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        SelectorCount: MQLONG,
        pSelectors: PMQLONG,
        IntAttrCount: MQLONG,
        pIntAttrs: PMQLONG,
        CharAttrLength: MQLONG,
        pCharAttrs: PMQCHAR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_SET_CALL = MQ_SET_CALL;
extern "C" {
    pub fn MQSETMP(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pSetPropOpts: PMQVOID,
        pName: PMQVOID,
        pPropDesc: PMQVOID,
        Type: MQLONG,
        ValueLength: MQLONG,
        pValue: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_SETMP_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Hmsg: MQHMSG,
        pSetPropOpts: PMQVOID,
        pName: PMQVOID,
        pPropDesc: PMQVOID,
        Type: MQLONG,
        ValueLength: MQLONG,
        pValue: PMQVOID,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_SETMP_CALL = MQ_SETMP_CALL;
extern "C" {
    pub fn MQSTAT(Hconn: MQHCONN, Type: MQLONG, pStatus: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_STAT_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, Type: MQLONG, pStatus: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_STAT_CALL = MQ_STAT_CALL;
extern "C" {
    pub fn MQSUB(Hconn: MQHCONN, pSubDesc: PMQVOID, pHobj: PMQHOBJ, pHsub: PMQHOBJ, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_SUB_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, pSubDesc: PMQVOID, pHobj: PMQHOBJ, pHsub: PMQHOBJ, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_SUB_CALL = MQ_SUB_CALL;
extern "C" {
    pub fn MQSUBRQ(Hconn: MQHCONN, Hsub: MQHOBJ, Action: MQLONG, pSubRqOpts: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_SUBRQ_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconn: MQHCONN, Hsub: MQHOBJ, Action: MQLONG, pSubRqOpts: PMQVOID, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_SUBRQ_CALL = MQ_SUBRQ_CALL;
pub type MQCD = tagMQCD;
pub type PMQCD = *mut MQCD;
pub type PPMQCD = *mut PMQCD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCD {
    pub ChannelName: [MQCHAR; 20usize],
    pub Version: MQLONG,
    pub ChannelType: MQLONG,
    pub TransportType: MQLONG,
    pub Desc: [MQCHAR; 64usize],
    pub QMgrName: [MQCHAR; 48usize],
    pub XmitQName: [MQCHAR; 48usize],
    pub ShortConnectionName: [MQCHAR; 20usize],
    pub MCAName: [MQCHAR; 20usize],
    pub ModeName: [MQCHAR; 8usize],
    pub TpName: [MQCHAR; 64usize],
    pub BatchSize: MQLONG,
    pub DiscInterval: MQLONG,
    pub ShortRetryCount: MQLONG,
    pub ShortRetryInterval: MQLONG,
    pub LongRetryCount: MQLONG,
    pub LongRetryInterval: MQLONG,
    pub SecurityExit: [MQCHAR; 128usize],
    pub MsgExit: [MQCHAR; 128usize],
    pub SendExit: [MQCHAR; 128usize],
    pub ReceiveExit: [MQCHAR; 128usize],
    pub SeqNumberWrap: MQLONG,
    pub MaxMsgLength: MQLONG,
    pub PutAuthority: MQLONG,
    pub DataConversion: MQLONG,
    pub SecurityUserData: [MQCHAR; 32usize],
    pub MsgUserData: [MQCHAR; 32usize],
    pub SendUserData: [MQCHAR; 32usize],
    pub ReceiveUserData: [MQCHAR; 32usize],
    pub UserIdentifier: [MQCHAR; 12usize],
    pub Password: [MQCHAR; 12usize],
    pub MCAUserIdentifier: [MQCHAR; 12usize],
    pub MCAType: MQLONG,
    pub ConnectionName: [MQCHAR; 264usize],
    pub RemoteUserIdentifier: [MQCHAR; 12usize],
    pub RemotePassword: [MQCHAR; 12usize],
    pub MsgRetryExit: [MQCHAR; 128usize],
    pub MsgRetryUserData: [MQCHAR; 32usize],
    pub MsgRetryCount: MQLONG,
    pub MsgRetryInterval: MQLONG,
    pub HeartbeatInterval: MQLONG,
    pub BatchInterval: MQLONG,
    pub NonPersistentMsgSpeed: MQLONG,
    pub StrucLength: MQLONG,
    pub ExitNameLength: MQLONG,
    pub ExitDataLength: MQLONG,
    pub MsgExitsDefined: MQLONG,
    pub SendExitsDefined: MQLONG,
    pub ReceiveExitsDefined: MQLONG,
    pub MsgExitPtr: MQPTR,
    pub MsgUserDataPtr: MQPTR,
    pub SendExitPtr: MQPTR,
    pub SendUserDataPtr: MQPTR,
    pub ReceiveExitPtr: MQPTR,
    pub ReceiveUserDataPtr: MQPTR,
    pub ClusterPtr: MQPTR,
    pub ClustersDefined: MQLONG,
    pub NetworkPriority: MQLONG,
    pub LongMCAUserIdLength: MQLONG,
    pub LongRemoteUserIdLength: MQLONG,
    pub LongMCAUserIdPtr: MQPTR,
    pub LongRemoteUserIdPtr: MQPTR,
    pub MCASecurityId: MQBYTE40,
    pub RemoteSecurityId: MQBYTE40,
    pub SSLCipherSpec: [MQCHAR; 32usize],
    pub SSLPeerNamePtr: MQPTR,
    pub SSLPeerNameLength: MQLONG,
    pub SSLClientAuth: MQLONG,
    pub KeepAliveInterval: MQLONG,
    pub LocalAddress: [MQCHAR; 48usize],
    pub BatchHeartbeat: MQLONG,
    pub HdrCompList: [MQLONG; 2usize],
    pub MsgCompList: [MQLONG; 16usize],
    pub CLWLChannelRank: MQLONG,
    pub CLWLChannelPriority: MQLONG,
    pub CLWLChannelWeight: MQLONG,
    pub ChannelMonitoring: MQLONG,
    pub ChannelStatistics: MQLONG,
    pub SharingConversations: MQLONG,
    pub PropertyControl: MQLONG,
    pub MaxInstances: MQLONG,
    pub MaxInstancesPerClient: MQLONG,
    pub ClientChannelWeight: MQLONG,
    pub ConnectionAffinity: MQLONG,
    pub BatchDataLimit: MQLONG,
    pub UseDLQ: MQLONG,
    pub DefReconnect: MQLONG,
    pub CertificateLabel: [MQCHAR; 64usize],
    pub SPLProtection: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCD"][::std::mem::size_of::<tagMQCD>() - 1992usize];
    ["Alignment of tagMQCD"][::std::mem::align_of::<tagMQCD>() - 8usize];
    ["Offset of field: tagMQCD::ChannelName"][::std::mem::offset_of!(tagMQCD, ChannelName) - 0usize];
    ["Offset of field: tagMQCD::Version"][::std::mem::offset_of!(tagMQCD, Version) - 20usize];
    ["Offset of field: tagMQCD::ChannelType"][::std::mem::offset_of!(tagMQCD, ChannelType) - 24usize];
    ["Offset of field: tagMQCD::TransportType"][::std::mem::offset_of!(tagMQCD, TransportType) - 28usize];
    ["Offset of field: tagMQCD::Desc"][::std::mem::offset_of!(tagMQCD, Desc) - 32usize];
    ["Offset of field: tagMQCD::QMgrName"][::std::mem::offset_of!(tagMQCD, QMgrName) - 96usize];
    ["Offset of field: tagMQCD::XmitQName"][::std::mem::offset_of!(tagMQCD, XmitQName) - 144usize];
    ["Offset of field: tagMQCD::ShortConnectionName"][::std::mem::offset_of!(tagMQCD, ShortConnectionName) - 192usize];
    ["Offset of field: tagMQCD::MCAName"][::std::mem::offset_of!(tagMQCD, MCAName) - 212usize];
    ["Offset of field: tagMQCD::ModeName"][::std::mem::offset_of!(tagMQCD, ModeName) - 232usize];
    ["Offset of field: tagMQCD::TpName"][::std::mem::offset_of!(tagMQCD, TpName) - 240usize];
    ["Offset of field: tagMQCD::BatchSize"][::std::mem::offset_of!(tagMQCD, BatchSize) - 304usize];
    ["Offset of field: tagMQCD::DiscInterval"][::std::mem::offset_of!(tagMQCD, DiscInterval) - 308usize];
    ["Offset of field: tagMQCD::ShortRetryCount"][::std::mem::offset_of!(tagMQCD, ShortRetryCount) - 312usize];
    ["Offset of field: tagMQCD::ShortRetryInterval"][::std::mem::offset_of!(tagMQCD, ShortRetryInterval) - 316usize];
    ["Offset of field: tagMQCD::LongRetryCount"][::std::mem::offset_of!(tagMQCD, LongRetryCount) - 320usize];
    ["Offset of field: tagMQCD::LongRetryInterval"][::std::mem::offset_of!(tagMQCD, LongRetryInterval) - 324usize];
    ["Offset of field: tagMQCD::SecurityExit"][::std::mem::offset_of!(tagMQCD, SecurityExit) - 328usize];
    ["Offset of field: tagMQCD::MsgExit"][::std::mem::offset_of!(tagMQCD, MsgExit) - 456usize];
    ["Offset of field: tagMQCD::SendExit"][::std::mem::offset_of!(tagMQCD, SendExit) - 584usize];
    ["Offset of field: tagMQCD::ReceiveExit"][::std::mem::offset_of!(tagMQCD, ReceiveExit) - 712usize];
    ["Offset of field: tagMQCD::SeqNumberWrap"][::std::mem::offset_of!(tagMQCD, SeqNumberWrap) - 840usize];
    ["Offset of field: tagMQCD::MaxMsgLength"][::std::mem::offset_of!(tagMQCD, MaxMsgLength) - 844usize];
    ["Offset of field: tagMQCD::PutAuthority"][::std::mem::offset_of!(tagMQCD, PutAuthority) - 848usize];
    ["Offset of field: tagMQCD::DataConversion"][::std::mem::offset_of!(tagMQCD, DataConversion) - 852usize];
    ["Offset of field: tagMQCD::SecurityUserData"][::std::mem::offset_of!(tagMQCD, SecurityUserData) - 856usize];
    ["Offset of field: tagMQCD::MsgUserData"][::std::mem::offset_of!(tagMQCD, MsgUserData) - 888usize];
    ["Offset of field: tagMQCD::SendUserData"][::std::mem::offset_of!(tagMQCD, SendUserData) - 920usize];
    ["Offset of field: tagMQCD::ReceiveUserData"][::std::mem::offset_of!(tagMQCD, ReceiveUserData) - 952usize];
    ["Offset of field: tagMQCD::UserIdentifier"][::std::mem::offset_of!(tagMQCD, UserIdentifier) - 984usize];
    ["Offset of field: tagMQCD::Password"][::std::mem::offset_of!(tagMQCD, Password) - 996usize];
    ["Offset of field: tagMQCD::MCAUserIdentifier"][::std::mem::offset_of!(tagMQCD, MCAUserIdentifier) - 1008usize];
    ["Offset of field: tagMQCD::MCAType"][::std::mem::offset_of!(tagMQCD, MCAType) - 1020usize];
    ["Offset of field: tagMQCD::ConnectionName"][::std::mem::offset_of!(tagMQCD, ConnectionName) - 1024usize];
    ["Offset of field: tagMQCD::RemoteUserIdentifier"][::std::mem::offset_of!(tagMQCD, RemoteUserIdentifier) - 1288usize];
    ["Offset of field: tagMQCD::RemotePassword"][::std::mem::offset_of!(tagMQCD, RemotePassword) - 1300usize];
    ["Offset of field: tagMQCD::MsgRetryExit"][::std::mem::offset_of!(tagMQCD, MsgRetryExit) - 1312usize];
    ["Offset of field: tagMQCD::MsgRetryUserData"][::std::mem::offset_of!(tagMQCD, MsgRetryUserData) - 1440usize];
    ["Offset of field: tagMQCD::MsgRetryCount"][::std::mem::offset_of!(tagMQCD, MsgRetryCount) - 1472usize];
    ["Offset of field: tagMQCD::MsgRetryInterval"][::std::mem::offset_of!(tagMQCD, MsgRetryInterval) - 1476usize];
    ["Offset of field: tagMQCD::HeartbeatInterval"][::std::mem::offset_of!(tagMQCD, HeartbeatInterval) - 1480usize];
    ["Offset of field: tagMQCD::BatchInterval"][::std::mem::offset_of!(tagMQCD, BatchInterval) - 1484usize];
    ["Offset of field: tagMQCD::NonPersistentMsgSpeed"][::std::mem::offset_of!(tagMQCD, NonPersistentMsgSpeed) - 1488usize];
    ["Offset of field: tagMQCD::StrucLength"][::std::mem::offset_of!(tagMQCD, StrucLength) - 1492usize];
    ["Offset of field: tagMQCD::ExitNameLength"][::std::mem::offset_of!(tagMQCD, ExitNameLength) - 1496usize];
    ["Offset of field: tagMQCD::ExitDataLength"][::std::mem::offset_of!(tagMQCD, ExitDataLength) - 1500usize];
    ["Offset of field: tagMQCD::MsgExitsDefined"][::std::mem::offset_of!(tagMQCD, MsgExitsDefined) - 1504usize];
    ["Offset of field: tagMQCD::SendExitsDefined"][::std::mem::offset_of!(tagMQCD, SendExitsDefined) - 1508usize];
    ["Offset of field: tagMQCD::ReceiveExitsDefined"][::std::mem::offset_of!(tagMQCD, ReceiveExitsDefined) - 1512usize];
    ["Offset of field: tagMQCD::MsgExitPtr"][::std::mem::offset_of!(tagMQCD, MsgExitPtr) - 1520usize];
    ["Offset of field: tagMQCD::MsgUserDataPtr"][::std::mem::offset_of!(tagMQCD, MsgUserDataPtr) - 1528usize];
    ["Offset of field: tagMQCD::SendExitPtr"][::std::mem::offset_of!(tagMQCD, SendExitPtr) - 1536usize];
    ["Offset of field: tagMQCD::SendUserDataPtr"][::std::mem::offset_of!(tagMQCD, SendUserDataPtr) - 1544usize];
    ["Offset of field: tagMQCD::ReceiveExitPtr"][::std::mem::offset_of!(tagMQCD, ReceiveExitPtr) - 1552usize];
    ["Offset of field: tagMQCD::ReceiveUserDataPtr"][::std::mem::offset_of!(tagMQCD, ReceiveUserDataPtr) - 1560usize];
    ["Offset of field: tagMQCD::ClusterPtr"][::std::mem::offset_of!(tagMQCD, ClusterPtr) - 1568usize];
    ["Offset of field: tagMQCD::ClustersDefined"][::std::mem::offset_of!(tagMQCD, ClustersDefined) - 1576usize];
    ["Offset of field: tagMQCD::NetworkPriority"][::std::mem::offset_of!(tagMQCD, NetworkPriority) - 1580usize];
    ["Offset of field: tagMQCD::LongMCAUserIdLength"][::std::mem::offset_of!(tagMQCD, LongMCAUserIdLength) - 1584usize];
    ["Offset of field: tagMQCD::LongRemoteUserIdLength"][::std::mem::offset_of!(tagMQCD, LongRemoteUserIdLength) - 1588usize];
    ["Offset of field: tagMQCD::LongMCAUserIdPtr"][::std::mem::offset_of!(tagMQCD, LongMCAUserIdPtr) - 1592usize];
    ["Offset of field: tagMQCD::LongRemoteUserIdPtr"][::std::mem::offset_of!(tagMQCD, LongRemoteUserIdPtr) - 1600usize];
    ["Offset of field: tagMQCD::MCASecurityId"][::std::mem::offset_of!(tagMQCD, MCASecurityId) - 1608usize];
    ["Offset of field: tagMQCD::RemoteSecurityId"][::std::mem::offset_of!(tagMQCD, RemoteSecurityId) - 1648usize];
    ["Offset of field: tagMQCD::SSLCipherSpec"][::std::mem::offset_of!(tagMQCD, SSLCipherSpec) - 1688usize];
    ["Offset of field: tagMQCD::SSLPeerNamePtr"][::std::mem::offset_of!(tagMQCD, SSLPeerNamePtr) - 1720usize];
    ["Offset of field: tagMQCD::SSLPeerNameLength"][::std::mem::offset_of!(tagMQCD, SSLPeerNameLength) - 1728usize];
    ["Offset of field: tagMQCD::SSLClientAuth"][::std::mem::offset_of!(tagMQCD, SSLClientAuth) - 1732usize];
    ["Offset of field: tagMQCD::KeepAliveInterval"][::std::mem::offset_of!(tagMQCD, KeepAliveInterval) - 1736usize];
    ["Offset of field: tagMQCD::LocalAddress"][::std::mem::offset_of!(tagMQCD, LocalAddress) - 1740usize];
    ["Offset of field: tagMQCD::BatchHeartbeat"][::std::mem::offset_of!(tagMQCD, BatchHeartbeat) - 1788usize];
    ["Offset of field: tagMQCD::HdrCompList"][::std::mem::offset_of!(tagMQCD, HdrCompList) - 1792usize];
    ["Offset of field: tagMQCD::MsgCompList"][::std::mem::offset_of!(tagMQCD, MsgCompList) - 1800usize];
    ["Offset of field: tagMQCD::CLWLChannelRank"][::std::mem::offset_of!(tagMQCD, CLWLChannelRank) - 1864usize];
    ["Offset of field: tagMQCD::CLWLChannelPriority"][::std::mem::offset_of!(tagMQCD, CLWLChannelPriority) - 1868usize];
    ["Offset of field: tagMQCD::CLWLChannelWeight"][::std::mem::offset_of!(tagMQCD, CLWLChannelWeight) - 1872usize];
    ["Offset of field: tagMQCD::ChannelMonitoring"][::std::mem::offset_of!(tagMQCD, ChannelMonitoring) - 1876usize];
    ["Offset of field: tagMQCD::ChannelStatistics"][::std::mem::offset_of!(tagMQCD, ChannelStatistics) - 1880usize];
    ["Offset of field: tagMQCD::SharingConversations"][::std::mem::offset_of!(tagMQCD, SharingConversations) - 1884usize];
    ["Offset of field: tagMQCD::PropertyControl"][::std::mem::offset_of!(tagMQCD, PropertyControl) - 1888usize];
    ["Offset of field: tagMQCD::MaxInstances"][::std::mem::offset_of!(tagMQCD, MaxInstances) - 1892usize];
    ["Offset of field: tagMQCD::MaxInstancesPerClient"][::std::mem::offset_of!(tagMQCD, MaxInstancesPerClient) - 1896usize];
    ["Offset of field: tagMQCD::ClientChannelWeight"][::std::mem::offset_of!(tagMQCD, ClientChannelWeight) - 1900usize];
    ["Offset of field: tagMQCD::ConnectionAffinity"][::std::mem::offset_of!(tagMQCD, ConnectionAffinity) - 1904usize];
    ["Offset of field: tagMQCD::BatchDataLimit"][::std::mem::offset_of!(tagMQCD, BatchDataLimit) - 1908usize];
    ["Offset of field: tagMQCD::UseDLQ"][::std::mem::offset_of!(tagMQCD, UseDLQ) - 1912usize];
    ["Offset of field: tagMQCD::DefReconnect"][::std::mem::offset_of!(tagMQCD, DefReconnect) - 1916usize];
    ["Offset of field: tagMQCD::CertificateLabel"][::std::mem::offset_of!(tagMQCD, CertificateLabel) - 1920usize];
    ["Offset of field: tagMQCD::SPLProtection"][::std::mem::offset_of!(tagMQCD, SPLProtection) - 1984usize];
};
pub type MQACH = tagMQACH;
pub type PMQACH = *mut MQACH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQACH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub ChainAreaLength: MQLONG,
    pub ExitInfoName: MQCHAR48,
    pub NextChainAreaPtr: PMQACH,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQACH"][::std::mem::size_of::<tagMQACH>() - 72usize];
    ["Alignment of tagMQACH"][::std::mem::align_of::<tagMQACH>() - 8usize];
    ["Offset of field: tagMQACH::StrucId"][::std::mem::offset_of!(tagMQACH, StrucId) - 0usize];
    ["Offset of field: tagMQACH::Version"][::std::mem::offset_of!(tagMQACH, Version) - 4usize];
    ["Offset of field: tagMQACH::StrucLength"][::std::mem::offset_of!(tagMQACH, StrucLength) - 8usize];
    ["Offset of field: tagMQACH::ChainAreaLength"][::std::mem::offset_of!(tagMQACH, ChainAreaLength) - 12usize];
    ["Offset of field: tagMQACH::ExitInfoName"][::std::mem::offset_of!(tagMQACH, ExitInfoName) - 16usize];
    ["Offset of field: tagMQACH::NextChainAreaPtr"][::std::mem::offset_of!(tagMQACH, NextChainAreaPtr) - 64usize];
};
pub type MQAXC = tagMQAXC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQAXC {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Environment: MQLONG,
    pub UserId: MQCHAR12,
    pub SecurityId: MQBYTE40,
    pub ConnectionName: [MQCHAR; 264usize],
    pub LongMCAUserIdLength: MQLONG,
    pub LongRemoteUserIdLength: MQLONG,
    pub LongMCAUserIdPtr: MQPTR,
    pub LongRemoteUserIdPtr: MQPTR,
    pub ApplName: MQCHAR28,
    pub ApplType: MQLONG,
    pub ProcessId: MQPID,
    pub ThreadId: MQTID,
    pub ChannelName: [MQCHAR; 20usize],
    pub Reserved1: MQBYTE4,
    pub pChannelDefinition: PMQCD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQAXC"][::std::mem::size_of::<tagMQAXC>() - 424usize];
    ["Alignment of tagMQAXC"][::std::mem::align_of::<tagMQAXC>() - 8usize];
    ["Offset of field: tagMQAXC::StrucId"][::std::mem::offset_of!(tagMQAXC, StrucId) - 0usize];
    ["Offset of field: tagMQAXC::Version"][::std::mem::offset_of!(tagMQAXC, Version) - 4usize];
    ["Offset of field: tagMQAXC::Environment"][::std::mem::offset_of!(tagMQAXC, Environment) - 8usize];
    ["Offset of field: tagMQAXC::UserId"][::std::mem::offset_of!(tagMQAXC, UserId) - 12usize];
    ["Offset of field: tagMQAXC::SecurityId"][::std::mem::offset_of!(tagMQAXC, SecurityId) - 24usize];
    ["Offset of field: tagMQAXC::ConnectionName"][::std::mem::offset_of!(tagMQAXC, ConnectionName) - 64usize];
    ["Offset of field: tagMQAXC::LongMCAUserIdLength"][::std::mem::offset_of!(tagMQAXC, LongMCAUserIdLength) - 328usize];
    ["Offset of field: tagMQAXC::LongRemoteUserIdLength"][::std::mem::offset_of!(tagMQAXC, LongRemoteUserIdLength) - 332usize];
    ["Offset of field: tagMQAXC::LongMCAUserIdPtr"][::std::mem::offset_of!(tagMQAXC, LongMCAUserIdPtr) - 336usize];
    ["Offset of field: tagMQAXC::LongRemoteUserIdPtr"][::std::mem::offset_of!(tagMQAXC, LongRemoteUserIdPtr) - 344usize];
    ["Offset of field: tagMQAXC::ApplName"][::std::mem::offset_of!(tagMQAXC, ApplName) - 352usize];
    ["Offset of field: tagMQAXC::ApplType"][::std::mem::offset_of!(tagMQAXC, ApplType) - 380usize];
    ["Offset of field: tagMQAXC::ProcessId"][::std::mem::offset_of!(tagMQAXC, ProcessId) - 384usize];
    ["Offset of field: tagMQAXC::ThreadId"][::std::mem::offset_of!(tagMQAXC, ThreadId) - 388usize];
    ["Offset of field: tagMQAXC::ChannelName"][::std::mem::offset_of!(tagMQAXC, ChannelName) - 392usize];
    ["Offset of field: tagMQAXC::Reserved1"][::std::mem::offset_of!(tagMQAXC, Reserved1) - 412usize];
    ["Offset of field: tagMQAXC::pChannelDefinition"][::std::mem::offset_of!(tagMQAXC, pChannelDefinition) - 416usize];
};
pub type MQAXP = tagMQAXP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQAXP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub APICallerType: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub ExitInfoName: MQCHAR48,
    pub ExitPDArea: MQBYTE48,
    pub QMgrName: MQCHAR48,
    pub ExitChainAreaPtr: PMQACH,
    pub Hconfig: MQHCONFIG,
    pub Function: MQLONG,
    pub ExitMsgHandle: MQHMSG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQAXP"][::std::mem::size_of::<tagMQAXP>() - 256usize];
    ["Alignment of tagMQAXP"][::std::mem::align_of::<tagMQAXP>() - 8usize];
    ["Offset of field: tagMQAXP::StrucId"][::std::mem::offset_of!(tagMQAXP, StrucId) - 0usize];
    ["Offset of field: tagMQAXP::Version"][::std::mem::offset_of!(tagMQAXP, Version) - 4usize];
    ["Offset of field: tagMQAXP::ExitId"][::std::mem::offset_of!(tagMQAXP, ExitId) - 8usize];
    ["Offset of field: tagMQAXP::ExitReason"][::std::mem::offset_of!(tagMQAXP, ExitReason) - 12usize];
    ["Offset of field: tagMQAXP::ExitResponse"][::std::mem::offset_of!(tagMQAXP, ExitResponse) - 16usize];
    ["Offset of field: tagMQAXP::ExitResponse2"][::std::mem::offset_of!(tagMQAXP, ExitResponse2) - 20usize];
    ["Offset of field: tagMQAXP::Feedback"][::std::mem::offset_of!(tagMQAXP, Feedback) - 24usize];
    ["Offset of field: tagMQAXP::APICallerType"][::std::mem::offset_of!(tagMQAXP, APICallerType) - 28usize];
    ["Offset of field: tagMQAXP::ExitUserArea"][::std::mem::offset_of!(tagMQAXP, ExitUserArea) - 32usize];
    ["Offset of field: tagMQAXP::ExitData"][::std::mem::offset_of!(tagMQAXP, ExitData) - 48usize];
    ["Offset of field: tagMQAXP::ExitInfoName"][::std::mem::offset_of!(tagMQAXP, ExitInfoName) - 80usize];
    ["Offset of field: tagMQAXP::ExitPDArea"][::std::mem::offset_of!(tagMQAXP, ExitPDArea) - 128usize];
    ["Offset of field: tagMQAXP::QMgrName"][::std::mem::offset_of!(tagMQAXP, QMgrName) - 176usize];
    ["Offset of field: tagMQAXP::ExitChainAreaPtr"][::std::mem::offset_of!(tagMQAXP, ExitChainAreaPtr) - 224usize];
    ["Offset of field: tagMQAXP::Hconfig"][::std::mem::offset_of!(tagMQAXP, Hconfig) - 232usize];
    ["Offset of field: tagMQAXP::Function"][::std::mem::offset_of!(tagMQAXP, Function) - 240usize];
    ["Offset of field: tagMQAXP::ExitMsgHandle"][::std::mem::offset_of!(tagMQAXP, ExitMsgHandle) - 248usize];
};
pub type MQCXP = tagMQCXP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCXP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub MaxSegmentLength: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub MsgRetryCount: MQLONG,
    pub MsgRetryInterval: MQLONG,
    pub MsgRetryReason: MQLONG,
    pub HeaderLength: MQLONG,
    pub PartnerName: MQCHAR48,
    pub FAPLevel: MQLONG,
    pub CapabilityFlags: MQLONG,
    pub ExitNumber: MQLONG,
    pub ExitSpace: MQLONG,
    pub SSLCertUserid: MQCHAR12,
    pub SSLRemCertIssNameLength: MQLONG,
    pub SSLRemCertIssNamePtr: MQPTR,
    pub SecurityParms: PMQCSP,
    pub CurHdrCompression: MQLONG,
    pub CurMsgCompression: MQLONG,
    pub Hconn: MQHCONN,
    pub SharingConversations: MQBOOL,
    pub MCAUserSource: MQLONG,
    pub pEntryPoints: PMQIEP,
    pub RemoteProduct: MQCHAR4,
    pub RemoteVersion: MQCHAR8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCXP"][::std::mem::size_of::<tagMQCXP>() - 240usize];
    ["Alignment of tagMQCXP"][::std::mem::align_of::<tagMQCXP>() - 8usize];
    ["Offset of field: tagMQCXP::StrucId"][::std::mem::offset_of!(tagMQCXP, StrucId) - 0usize];
    ["Offset of field: tagMQCXP::Version"][::std::mem::offset_of!(tagMQCXP, Version) - 4usize];
    ["Offset of field: tagMQCXP::ExitId"][::std::mem::offset_of!(tagMQCXP, ExitId) - 8usize];
    ["Offset of field: tagMQCXP::ExitReason"][::std::mem::offset_of!(tagMQCXP, ExitReason) - 12usize];
    ["Offset of field: tagMQCXP::ExitResponse"][::std::mem::offset_of!(tagMQCXP, ExitResponse) - 16usize];
    ["Offset of field: tagMQCXP::ExitResponse2"][::std::mem::offset_of!(tagMQCXP, ExitResponse2) - 20usize];
    ["Offset of field: tagMQCXP::Feedback"][::std::mem::offset_of!(tagMQCXP, Feedback) - 24usize];
    ["Offset of field: tagMQCXP::MaxSegmentLength"][::std::mem::offset_of!(tagMQCXP, MaxSegmentLength) - 28usize];
    ["Offset of field: tagMQCXP::ExitUserArea"][::std::mem::offset_of!(tagMQCXP, ExitUserArea) - 32usize];
    ["Offset of field: tagMQCXP::ExitData"][::std::mem::offset_of!(tagMQCXP, ExitData) - 48usize];
    ["Offset of field: tagMQCXP::MsgRetryCount"][::std::mem::offset_of!(tagMQCXP, MsgRetryCount) - 80usize];
    ["Offset of field: tagMQCXP::MsgRetryInterval"][::std::mem::offset_of!(tagMQCXP, MsgRetryInterval) - 84usize];
    ["Offset of field: tagMQCXP::MsgRetryReason"][::std::mem::offset_of!(tagMQCXP, MsgRetryReason) - 88usize];
    ["Offset of field: tagMQCXP::HeaderLength"][::std::mem::offset_of!(tagMQCXP, HeaderLength) - 92usize];
    ["Offset of field: tagMQCXP::PartnerName"][::std::mem::offset_of!(tagMQCXP, PartnerName) - 96usize];
    ["Offset of field: tagMQCXP::FAPLevel"][::std::mem::offset_of!(tagMQCXP, FAPLevel) - 144usize];
    ["Offset of field: tagMQCXP::CapabilityFlags"][::std::mem::offset_of!(tagMQCXP, CapabilityFlags) - 148usize];
    ["Offset of field: tagMQCXP::ExitNumber"][::std::mem::offset_of!(tagMQCXP, ExitNumber) - 152usize];
    ["Offset of field: tagMQCXP::ExitSpace"][::std::mem::offset_of!(tagMQCXP, ExitSpace) - 156usize];
    ["Offset of field: tagMQCXP::SSLCertUserid"][::std::mem::offset_of!(tagMQCXP, SSLCertUserid) - 160usize];
    ["Offset of field: tagMQCXP::SSLRemCertIssNameLength"][::std::mem::offset_of!(tagMQCXP, SSLRemCertIssNameLength) - 172usize];
    ["Offset of field: tagMQCXP::SSLRemCertIssNamePtr"][::std::mem::offset_of!(tagMQCXP, SSLRemCertIssNamePtr) - 176usize];
    ["Offset of field: tagMQCXP::SecurityParms"][::std::mem::offset_of!(tagMQCXP, SecurityParms) - 184usize];
    ["Offset of field: tagMQCXP::CurHdrCompression"][::std::mem::offset_of!(tagMQCXP, CurHdrCompression) - 192usize];
    ["Offset of field: tagMQCXP::CurMsgCompression"][::std::mem::offset_of!(tagMQCXP, CurMsgCompression) - 196usize];
    ["Offset of field: tagMQCXP::Hconn"][::std::mem::offset_of!(tagMQCXP, Hconn) - 200usize];
    ["Offset of field: tagMQCXP::SharingConversations"][::std::mem::offset_of!(tagMQCXP, SharingConversations) - 204usize];
    ["Offset of field: tagMQCXP::MCAUserSource"][::std::mem::offset_of!(tagMQCXP, MCAUserSource) - 208usize];
    ["Offset of field: tagMQCXP::pEntryPoints"][::std::mem::offset_of!(tagMQCXP, pEntryPoints) - 216usize];
    ["Offset of field: tagMQCXP::RemoteProduct"][::std::mem::offset_of!(tagMQCXP, RemoteProduct) - 224usize];
    ["Offset of field: tagMQCXP::RemoteVersion"][::std::mem::offset_of!(tagMQCXP, RemoteVersion) - 228usize];
};
pub type MQDXP = tagMQDXP;
pub type PMQDXP = *mut MQDXP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQDXP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitOptions: MQLONG,
    pub AppOptions: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub DataLength: MQLONG,
    pub CompCode: MQLONG,
    pub Reason: MQLONG,
    pub ExitResponse: MQLONG,
    pub Hconn: MQHCONN,
    pub pEntryPoints: PMQIEP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQDXP"][::std::mem::size_of::<tagMQDXP>() - 56usize];
    ["Alignment of tagMQDXP"][::std::mem::align_of::<tagMQDXP>() - 8usize];
    ["Offset of field: tagMQDXP::StrucId"][::std::mem::offset_of!(tagMQDXP, StrucId) - 0usize];
    ["Offset of field: tagMQDXP::Version"][::std::mem::offset_of!(tagMQDXP, Version) - 4usize];
    ["Offset of field: tagMQDXP::ExitOptions"][::std::mem::offset_of!(tagMQDXP, ExitOptions) - 8usize];
    ["Offset of field: tagMQDXP::AppOptions"][::std::mem::offset_of!(tagMQDXP, AppOptions) - 12usize];
    ["Offset of field: tagMQDXP::Encoding"][::std::mem::offset_of!(tagMQDXP, Encoding) - 16usize];
    ["Offset of field: tagMQDXP::CodedCharSetId"][::std::mem::offset_of!(tagMQDXP, CodedCharSetId) - 20usize];
    ["Offset of field: tagMQDXP::DataLength"][::std::mem::offset_of!(tagMQDXP, DataLength) - 24usize];
    ["Offset of field: tagMQDXP::CompCode"][::std::mem::offset_of!(tagMQDXP, CompCode) - 28usize];
    ["Offset of field: tagMQDXP::Reason"][::std::mem::offset_of!(tagMQDXP, Reason) - 32usize];
    ["Offset of field: tagMQDXP::ExitResponse"][::std::mem::offset_of!(tagMQDXP, ExitResponse) - 36usize];
    ["Offset of field: tagMQDXP::Hconn"][::std::mem::offset_of!(tagMQDXP, Hconn) - 40usize];
    ["Offset of field: tagMQDXP::pEntryPoints"][::std::mem::offset_of!(tagMQDXP, pEntryPoints) - 48usize];
};
pub type MQNXP = tagMQNXP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQNXP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub ExitDataLength: MQLONG,
    pub pExitDataPtr: PMQCHAR,
    pub pExitUserAreaPtr: MQPTR,
    pub ppMQCDArrayPtr: PPMQCD,
    pub MQCDArrayCount: MQLONG,
    pub MaxMQCDVersion: MQLONG,
    pub pEntryPoints: PMQIEP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQNXP"][::std::mem::size_of::<tagMQNXP>() - 72usize];
    ["Alignment of tagMQNXP"][::std::mem::align_of::<tagMQNXP>() - 8usize];
    ["Offset of field: tagMQNXP::StrucId"][::std::mem::offset_of!(tagMQNXP, StrucId) - 0usize];
    ["Offset of field: tagMQNXP::Version"][::std::mem::offset_of!(tagMQNXP, Version) - 4usize];
    ["Offset of field: tagMQNXP::ExitId"][::std::mem::offset_of!(tagMQNXP, ExitId) - 8usize];
    ["Offset of field: tagMQNXP::ExitReason"][::std::mem::offset_of!(tagMQNXP, ExitReason) - 12usize];
    ["Offset of field: tagMQNXP::ExitResponse"][::std::mem::offset_of!(tagMQNXP, ExitResponse) - 16usize];
    ["Offset of field: tagMQNXP::ExitResponse2"][::std::mem::offset_of!(tagMQNXP, ExitResponse2) - 20usize];
    ["Offset of field: tagMQNXP::Feedback"][::std::mem::offset_of!(tagMQNXP, Feedback) - 24usize];
    ["Offset of field: tagMQNXP::ExitDataLength"][::std::mem::offset_of!(tagMQNXP, ExitDataLength) - 28usize];
    ["Offset of field: tagMQNXP::pExitDataPtr"][::std::mem::offset_of!(tagMQNXP, pExitDataPtr) - 32usize];
    ["Offset of field: tagMQNXP::pExitUserAreaPtr"][::std::mem::offset_of!(tagMQNXP, pExitUserAreaPtr) - 40usize];
    ["Offset of field: tagMQNXP::ppMQCDArrayPtr"][::std::mem::offset_of!(tagMQNXP, ppMQCDArrayPtr) - 48usize];
    ["Offset of field: tagMQNXP::MQCDArrayCount"][::std::mem::offset_of!(tagMQNXP, MQCDArrayCount) - 56usize];
    ["Offset of field: tagMQNXP::MaxMQCDVersion"][::std::mem::offset_of!(tagMQNXP, MaxMQCDVersion) - 60usize];
    ["Offset of field: tagMQNXP::pEntryPoints"][::std::mem::offset_of!(tagMQNXP, pEntryPoints) - 64usize];
};
pub type MQPBC = tagMQPBC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQPBC {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub PubTopicString: MQCHARV,
    pub MsgDescPtr: PMQMD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQPBC"][::std::mem::size_of::<tagMQPBC>() - 40usize];
    ["Alignment of tagMQPBC"][::std::mem::align_of::<tagMQPBC>() - 8usize];
    ["Offset of field: tagMQPBC::StrucId"][::std::mem::offset_of!(tagMQPBC, StrucId) - 0usize];
    ["Offset of field: tagMQPBC::Version"][::std::mem::offset_of!(tagMQPBC, Version) - 4usize];
    ["Offset of field: tagMQPBC::PubTopicString"][::std::mem::offset_of!(tagMQPBC, PubTopicString) - 8usize];
    ["Offset of field: tagMQPBC::MsgDescPtr"][::std::mem::offset_of!(tagMQPBC, MsgDescPtr) - 32usize];
};
pub type MQPSXP = tagMQPSXP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQPSXP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub Hconn: MQHCONN,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub QMgrName: MQCHAR48,
    pub MsgHandle: MQHMSG,
    pub MsgDescPtr: PMQMD,
    pub MsgInPtr: PMQVOID,
    pub MsgInLength: MQLONG,
    pub MsgOutPtr: PMQVOID,
    pub MsgOutLength: MQLONG,
    pub pEntryPoints: PMQIEP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQPSXP"][::std::mem::size_of::<tagMQPSXP>() - 184usize];
    ["Alignment of tagMQPSXP"][::std::mem::align_of::<tagMQPSXP>() - 8usize];
    ["Offset of field: tagMQPSXP::StrucId"][::std::mem::offset_of!(tagMQPSXP, StrucId) - 0usize];
    ["Offset of field: tagMQPSXP::Version"][::std::mem::offset_of!(tagMQPSXP, Version) - 4usize];
    ["Offset of field: tagMQPSXP::ExitId"][::std::mem::offset_of!(tagMQPSXP, ExitId) - 8usize];
    ["Offset of field: tagMQPSXP::ExitReason"][::std::mem::offset_of!(tagMQPSXP, ExitReason) - 12usize];
    ["Offset of field: tagMQPSXP::ExitResponse"][::std::mem::offset_of!(tagMQPSXP, ExitResponse) - 16usize];
    ["Offset of field: tagMQPSXP::ExitResponse2"][::std::mem::offset_of!(tagMQPSXP, ExitResponse2) - 20usize];
    ["Offset of field: tagMQPSXP::Feedback"][::std::mem::offset_of!(tagMQPSXP, Feedback) - 24usize];
    ["Offset of field: tagMQPSXP::Hconn"][::std::mem::offset_of!(tagMQPSXP, Hconn) - 28usize];
    ["Offset of field: tagMQPSXP::ExitUserArea"][::std::mem::offset_of!(tagMQPSXP, ExitUserArea) - 32usize];
    ["Offset of field: tagMQPSXP::ExitData"][::std::mem::offset_of!(tagMQPSXP, ExitData) - 48usize];
    ["Offset of field: tagMQPSXP::QMgrName"][::std::mem::offset_of!(tagMQPSXP, QMgrName) - 80usize];
    ["Offset of field: tagMQPSXP::MsgHandle"][::std::mem::offset_of!(tagMQPSXP, MsgHandle) - 128usize];
    ["Offset of field: tagMQPSXP::MsgDescPtr"][::std::mem::offset_of!(tagMQPSXP, MsgDescPtr) - 136usize];
    ["Offset of field: tagMQPSXP::MsgInPtr"][::std::mem::offset_of!(tagMQPSXP, MsgInPtr) - 144usize];
    ["Offset of field: tagMQPSXP::MsgInLength"][::std::mem::offset_of!(tagMQPSXP, MsgInLength) - 152usize];
    ["Offset of field: tagMQPSXP::MsgOutPtr"][::std::mem::offset_of!(tagMQPSXP, MsgOutPtr) - 160usize];
    ["Offset of field: tagMQPSXP::MsgOutLength"][::std::mem::offset_of!(tagMQPSXP, MsgOutLength) - 168usize];
    ["Offset of field: tagMQPSXP::pEntryPoints"][::std::mem::offset_of!(tagMQPSXP, pEntryPoints) - 176usize];
};
pub type MQSBC = tagMQSBC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQSBC {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub DestinationQMgrName: MQCHAR48,
    pub DestinationQName: MQCHAR48,
    pub SubType: MQLONG,
    pub SubOptions: MQLONG,
    pub ObjectName: MQCHAR48,
    pub ObjectString: MQCHARV,
    pub SubTopicString: MQCHARV,
    pub SubName: MQCHARV,
    pub SubId: MQBYTE24,
    pub SelectionString: MQCHARV,
    pub SubLevel: MQLONG,
    pub PSProperties: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQSBC"][::std::mem::size_of::<tagMQSBC>() - 288usize];
    ["Alignment of tagMQSBC"][::std::mem::align_of::<tagMQSBC>() - 8usize];
    ["Offset of field: tagMQSBC::StrucId"][::std::mem::offset_of!(tagMQSBC, StrucId) - 0usize];
    ["Offset of field: tagMQSBC::Version"][::std::mem::offset_of!(tagMQSBC, Version) - 4usize];
    ["Offset of field: tagMQSBC::DestinationQMgrName"][::std::mem::offset_of!(tagMQSBC, DestinationQMgrName) - 8usize];
    ["Offset of field: tagMQSBC::DestinationQName"][::std::mem::offset_of!(tagMQSBC, DestinationQName) - 56usize];
    ["Offset of field: tagMQSBC::SubType"][::std::mem::offset_of!(tagMQSBC, SubType) - 104usize];
    ["Offset of field: tagMQSBC::SubOptions"][::std::mem::offset_of!(tagMQSBC, SubOptions) - 108usize];
    ["Offset of field: tagMQSBC::ObjectName"][::std::mem::offset_of!(tagMQSBC, ObjectName) - 112usize];
    ["Offset of field: tagMQSBC::ObjectString"][::std::mem::offset_of!(tagMQSBC, ObjectString) - 160usize];
    ["Offset of field: tagMQSBC::SubTopicString"][::std::mem::offset_of!(tagMQSBC, SubTopicString) - 184usize];
    ["Offset of field: tagMQSBC::SubName"][::std::mem::offset_of!(tagMQSBC, SubName) - 208usize];
    ["Offset of field: tagMQSBC::SubId"][::std::mem::offset_of!(tagMQSBC, SubId) - 232usize];
    ["Offset of field: tagMQSBC::SelectionString"][::std::mem::offset_of!(tagMQSBC, SelectionString) - 256usize];
    ["Offset of field: tagMQSBC::SubLevel"][::std::mem::offset_of!(tagMQSBC, SubLevel) - 280usize];
    ["Offset of field: tagMQSBC::PSProperties"][::std::mem::offset_of!(tagMQSBC, PSProperties) - 284usize];
};
pub type MQWCR = tagMQWCR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWCR {
    pub ClusterName: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub ClusterFlags: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWCR"][::std::mem::size_of::<tagMQWCR>() - 56usize];
    ["Alignment of tagMQWCR"][::std::mem::align_of::<tagMQWCR>() - 4usize];
    ["Offset of field: tagMQWCR::ClusterName"][::std::mem::offset_of!(tagMQWCR, ClusterName) - 0usize];
    ["Offset of field: tagMQWCR::ClusterRecOffset"][::std::mem::offset_of!(tagMQWCR, ClusterRecOffset) - 48usize];
    ["Offset of field: tagMQWCR::ClusterFlags"][::std::mem::offset_of!(tagMQWCR, ClusterFlags) - 52usize];
};
pub type MQWDR = tagMQWDR;
pub type PMQWDR = *mut MQWDR;
pub type PPMQWDR = *mut PMQWDR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWDR {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QMgrFlags: MQLONG,
    pub QMgrIdentifier: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub ChannelState: MQLONG,
    pub ChannelDefOffset: MQLONG,
    pub DestSeqNumber: MQLONG,
    pub DestSeqFactor: MQINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWDR"][::std::mem::size_of::<tagMQWDR>() - 136usize];
    ["Alignment of tagMQWDR"][::std::mem::align_of::<tagMQWDR>() - 8usize];
    ["Offset of field: tagMQWDR::StrucId"][::std::mem::offset_of!(tagMQWDR, StrucId) - 0usize];
    ["Offset of field: tagMQWDR::Version"][::std::mem::offset_of!(tagMQWDR, Version) - 4usize];
    ["Offset of field: tagMQWDR::StrucLength"][::std::mem::offset_of!(tagMQWDR, StrucLength) - 8usize];
    ["Offset of field: tagMQWDR::QMgrFlags"][::std::mem::offset_of!(tagMQWDR, QMgrFlags) - 12usize];
    ["Offset of field: tagMQWDR::QMgrIdentifier"][::std::mem::offset_of!(tagMQWDR, QMgrIdentifier) - 16usize];
    ["Offset of field: tagMQWDR::QMgrName"][::std::mem::offset_of!(tagMQWDR, QMgrName) - 64usize];
    ["Offset of field: tagMQWDR::ClusterRecOffset"][::std::mem::offset_of!(tagMQWDR, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWDR::ChannelState"][::std::mem::offset_of!(tagMQWDR, ChannelState) - 116usize];
    ["Offset of field: tagMQWDR::ChannelDefOffset"][::std::mem::offset_of!(tagMQWDR, ChannelDefOffset) - 120usize];
    ["Offset of field: tagMQWDR::DestSeqNumber"][::std::mem::offset_of!(tagMQWDR, DestSeqNumber) - 124usize];
    ["Offset of field: tagMQWDR::DestSeqFactor"][::std::mem::offset_of!(tagMQWDR, DestSeqFactor) - 128usize];
};
pub type MQWDR1 = tagMQWDR1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWDR1 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QMgrFlags: MQLONG,
    pub QMgrIdentifier: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub ChannelState: MQLONG,
    pub ChannelDefOffset: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWDR1"][::std::mem::size_of::<tagMQWDR1>() - 124usize];
    ["Alignment of tagMQWDR1"][::std::mem::align_of::<tagMQWDR1>() - 4usize];
    ["Offset of field: tagMQWDR1::StrucId"][::std::mem::offset_of!(tagMQWDR1, StrucId) - 0usize];
    ["Offset of field: tagMQWDR1::Version"][::std::mem::offset_of!(tagMQWDR1, Version) - 4usize];
    ["Offset of field: tagMQWDR1::StrucLength"][::std::mem::offset_of!(tagMQWDR1, StrucLength) - 8usize];
    ["Offset of field: tagMQWDR1::QMgrFlags"][::std::mem::offset_of!(tagMQWDR1, QMgrFlags) - 12usize];
    ["Offset of field: tagMQWDR1::QMgrIdentifier"][::std::mem::offset_of!(tagMQWDR1, QMgrIdentifier) - 16usize];
    ["Offset of field: tagMQWDR1::QMgrName"][::std::mem::offset_of!(tagMQWDR1, QMgrName) - 64usize];
    ["Offset of field: tagMQWDR1::ClusterRecOffset"][::std::mem::offset_of!(tagMQWDR1, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWDR1::ChannelState"][::std::mem::offset_of!(tagMQWDR1, ChannelState) - 116usize];
    ["Offset of field: tagMQWDR1::ChannelDefOffset"][::std::mem::offset_of!(tagMQWDR1, ChannelDefOffset) - 120usize];
};
pub type MQWDR2 = tagMQWDR2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWDR2 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QMgrFlags: MQLONG,
    pub QMgrIdentifier: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub ChannelState: MQLONG,
    pub ChannelDefOffset: MQLONG,
    pub DestSeqNumber: MQLONG,
    pub DestSeqFactor: MQINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWDR2"][::std::mem::size_of::<tagMQWDR2>() - 136usize];
    ["Alignment of tagMQWDR2"][::std::mem::align_of::<tagMQWDR2>() - 8usize];
    ["Offset of field: tagMQWDR2::StrucId"][::std::mem::offset_of!(tagMQWDR2, StrucId) - 0usize];
    ["Offset of field: tagMQWDR2::Version"][::std::mem::offset_of!(tagMQWDR2, Version) - 4usize];
    ["Offset of field: tagMQWDR2::StrucLength"][::std::mem::offset_of!(tagMQWDR2, StrucLength) - 8usize];
    ["Offset of field: tagMQWDR2::QMgrFlags"][::std::mem::offset_of!(tagMQWDR2, QMgrFlags) - 12usize];
    ["Offset of field: tagMQWDR2::QMgrIdentifier"][::std::mem::offset_of!(tagMQWDR2, QMgrIdentifier) - 16usize];
    ["Offset of field: tagMQWDR2::QMgrName"][::std::mem::offset_of!(tagMQWDR2, QMgrName) - 64usize];
    ["Offset of field: tagMQWDR2::ClusterRecOffset"][::std::mem::offset_of!(tagMQWDR2, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWDR2::ChannelState"][::std::mem::offset_of!(tagMQWDR2, ChannelState) - 116usize];
    ["Offset of field: tagMQWDR2::ChannelDefOffset"][::std::mem::offset_of!(tagMQWDR2, ChannelDefOffset) - 120usize];
    ["Offset of field: tagMQWDR2::DestSeqNumber"][::std::mem::offset_of!(tagMQWDR2, DestSeqNumber) - 124usize];
    ["Offset of field: tagMQWDR2::DestSeqFactor"][::std::mem::offset_of!(tagMQWDR2, DestSeqFactor) - 128usize];
};
pub type MQWQR = tagMQWQR;
pub type PMQWQR = *mut MQWQR;
pub type PPMQWQR = *mut PMQWQR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWQR {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QFlags: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrIdentifier: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub QType: MQLONG,
    pub QDesc: MQCHAR64,
    pub DefBind: MQLONG,
    pub DefPersistence: MQLONG,
    pub DefPriority: MQLONG,
    pub InhibitPut: MQLONG,
    pub CLWLQueuePriority: MQLONG,
    pub CLWLQueueRank: MQLONG,
    pub DefPutResponse: MQLONG,
    pub CapExpiry: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWQR"][::std::mem::size_of::<tagMQWQR>() - 216usize];
    ["Alignment of tagMQWQR"][::std::mem::align_of::<tagMQWQR>() - 4usize];
    ["Offset of field: tagMQWQR::StrucId"][::std::mem::offset_of!(tagMQWQR, StrucId) - 0usize];
    ["Offset of field: tagMQWQR::Version"][::std::mem::offset_of!(tagMQWQR, Version) - 4usize];
    ["Offset of field: tagMQWQR::StrucLength"][::std::mem::offset_of!(tagMQWQR, StrucLength) - 8usize];
    ["Offset of field: tagMQWQR::QFlags"][::std::mem::offset_of!(tagMQWQR, QFlags) - 12usize];
    ["Offset of field: tagMQWQR::QName"][::std::mem::offset_of!(tagMQWQR, QName) - 16usize];
    ["Offset of field: tagMQWQR::QMgrIdentifier"][::std::mem::offset_of!(tagMQWQR, QMgrIdentifier) - 64usize];
    ["Offset of field: tagMQWQR::ClusterRecOffset"][::std::mem::offset_of!(tagMQWQR, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWQR::QType"][::std::mem::offset_of!(tagMQWQR, QType) - 116usize];
    ["Offset of field: tagMQWQR::QDesc"][::std::mem::offset_of!(tagMQWQR, QDesc) - 120usize];
    ["Offset of field: tagMQWQR::DefBind"][::std::mem::offset_of!(tagMQWQR, DefBind) - 184usize];
    ["Offset of field: tagMQWQR::DefPersistence"][::std::mem::offset_of!(tagMQWQR, DefPersistence) - 188usize];
    ["Offset of field: tagMQWQR::DefPriority"][::std::mem::offset_of!(tagMQWQR, DefPriority) - 192usize];
    ["Offset of field: tagMQWQR::InhibitPut"][::std::mem::offset_of!(tagMQWQR, InhibitPut) - 196usize];
    ["Offset of field: tagMQWQR::CLWLQueuePriority"][::std::mem::offset_of!(tagMQWQR, CLWLQueuePriority) - 200usize];
    ["Offset of field: tagMQWQR::CLWLQueueRank"][::std::mem::offset_of!(tagMQWQR, CLWLQueueRank) - 204usize];
    ["Offset of field: tagMQWQR::DefPutResponse"][::std::mem::offset_of!(tagMQWQR, DefPutResponse) - 208usize];
    ["Offset of field: tagMQWQR::CapExpiry"][::std::mem::offset_of!(tagMQWQR, CapExpiry) - 212usize];
};
pub type MQWQR1 = tagMQWQR1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWQR1 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QFlags: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrIdentifier: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub QType: MQLONG,
    pub QDesc: MQCHAR64,
    pub DefBind: MQLONG,
    pub DefPersistence: MQLONG,
    pub DefPriority: MQLONG,
    pub InhibitPut: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWQR1"][::std::mem::size_of::<tagMQWQR1>() - 200usize];
    ["Alignment of tagMQWQR1"][::std::mem::align_of::<tagMQWQR1>() - 4usize];
    ["Offset of field: tagMQWQR1::StrucId"][::std::mem::offset_of!(tagMQWQR1, StrucId) - 0usize];
    ["Offset of field: tagMQWQR1::Version"][::std::mem::offset_of!(tagMQWQR1, Version) - 4usize];
    ["Offset of field: tagMQWQR1::StrucLength"][::std::mem::offset_of!(tagMQWQR1, StrucLength) - 8usize];
    ["Offset of field: tagMQWQR1::QFlags"][::std::mem::offset_of!(tagMQWQR1, QFlags) - 12usize];
    ["Offset of field: tagMQWQR1::QName"][::std::mem::offset_of!(tagMQWQR1, QName) - 16usize];
    ["Offset of field: tagMQWQR1::QMgrIdentifier"][::std::mem::offset_of!(tagMQWQR1, QMgrIdentifier) - 64usize];
    ["Offset of field: tagMQWQR1::ClusterRecOffset"][::std::mem::offset_of!(tagMQWQR1, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWQR1::QType"][::std::mem::offset_of!(tagMQWQR1, QType) - 116usize];
    ["Offset of field: tagMQWQR1::QDesc"][::std::mem::offset_of!(tagMQWQR1, QDesc) - 120usize];
    ["Offset of field: tagMQWQR1::DefBind"][::std::mem::offset_of!(tagMQWQR1, DefBind) - 184usize];
    ["Offset of field: tagMQWQR1::DefPersistence"][::std::mem::offset_of!(tagMQWQR1, DefPersistence) - 188usize];
    ["Offset of field: tagMQWQR1::DefPriority"][::std::mem::offset_of!(tagMQWQR1, DefPriority) - 192usize];
    ["Offset of field: tagMQWQR1::InhibitPut"][::std::mem::offset_of!(tagMQWQR1, InhibitPut) - 196usize];
};
pub type MQWQR2 = tagMQWQR2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWQR2 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QFlags: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrIdentifier: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub QType: MQLONG,
    pub QDesc: MQCHAR64,
    pub DefBind: MQLONG,
    pub DefPersistence: MQLONG,
    pub DefPriority: MQLONG,
    pub InhibitPut: MQLONG,
    pub CLWLQueuePriority: MQLONG,
    pub CLWLQueueRank: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWQR2"][::std::mem::size_of::<tagMQWQR2>() - 208usize];
    ["Alignment of tagMQWQR2"][::std::mem::align_of::<tagMQWQR2>() - 4usize];
    ["Offset of field: tagMQWQR2::StrucId"][::std::mem::offset_of!(tagMQWQR2, StrucId) - 0usize];
    ["Offset of field: tagMQWQR2::Version"][::std::mem::offset_of!(tagMQWQR2, Version) - 4usize];
    ["Offset of field: tagMQWQR2::StrucLength"][::std::mem::offset_of!(tagMQWQR2, StrucLength) - 8usize];
    ["Offset of field: tagMQWQR2::QFlags"][::std::mem::offset_of!(tagMQWQR2, QFlags) - 12usize];
    ["Offset of field: tagMQWQR2::QName"][::std::mem::offset_of!(tagMQWQR2, QName) - 16usize];
    ["Offset of field: tagMQWQR2::QMgrIdentifier"][::std::mem::offset_of!(tagMQWQR2, QMgrIdentifier) - 64usize];
    ["Offset of field: tagMQWQR2::ClusterRecOffset"][::std::mem::offset_of!(tagMQWQR2, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWQR2::QType"][::std::mem::offset_of!(tagMQWQR2, QType) - 116usize];
    ["Offset of field: tagMQWQR2::QDesc"][::std::mem::offset_of!(tagMQWQR2, QDesc) - 120usize];
    ["Offset of field: tagMQWQR2::DefBind"][::std::mem::offset_of!(tagMQWQR2, DefBind) - 184usize];
    ["Offset of field: tagMQWQR2::DefPersistence"][::std::mem::offset_of!(tagMQWQR2, DefPersistence) - 188usize];
    ["Offset of field: tagMQWQR2::DefPriority"][::std::mem::offset_of!(tagMQWQR2, DefPriority) - 192usize];
    ["Offset of field: tagMQWQR2::InhibitPut"][::std::mem::offset_of!(tagMQWQR2, InhibitPut) - 196usize];
    ["Offset of field: tagMQWQR2::CLWLQueuePriority"][::std::mem::offset_of!(tagMQWQR2, CLWLQueuePriority) - 200usize];
    ["Offset of field: tagMQWQR2::CLWLQueueRank"][::std::mem::offset_of!(tagMQWQR2, CLWLQueueRank) - 204usize];
};
pub type MQWQR3 = tagMQWQR3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWQR3 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QFlags: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrIdentifier: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub QType: MQLONG,
    pub QDesc: MQCHAR64,
    pub DefBind: MQLONG,
    pub DefPersistence: MQLONG,
    pub DefPriority: MQLONG,
    pub InhibitPut: MQLONG,
    pub CLWLQueuePriority: MQLONG,
    pub CLWLQueueRank: MQLONG,
    pub DefPutResponse: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWQR3"][::std::mem::size_of::<tagMQWQR3>() - 212usize];
    ["Alignment of tagMQWQR3"][::std::mem::align_of::<tagMQWQR3>() - 4usize];
    ["Offset of field: tagMQWQR3::StrucId"][::std::mem::offset_of!(tagMQWQR3, StrucId) - 0usize];
    ["Offset of field: tagMQWQR3::Version"][::std::mem::offset_of!(tagMQWQR3, Version) - 4usize];
    ["Offset of field: tagMQWQR3::StrucLength"][::std::mem::offset_of!(tagMQWQR3, StrucLength) - 8usize];
    ["Offset of field: tagMQWQR3::QFlags"][::std::mem::offset_of!(tagMQWQR3, QFlags) - 12usize];
    ["Offset of field: tagMQWQR3::QName"][::std::mem::offset_of!(tagMQWQR3, QName) - 16usize];
    ["Offset of field: tagMQWQR3::QMgrIdentifier"][::std::mem::offset_of!(tagMQWQR3, QMgrIdentifier) - 64usize];
    ["Offset of field: tagMQWQR3::ClusterRecOffset"][::std::mem::offset_of!(tagMQWQR3, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWQR3::QType"][::std::mem::offset_of!(tagMQWQR3, QType) - 116usize];
    ["Offset of field: tagMQWQR3::QDesc"][::std::mem::offset_of!(tagMQWQR3, QDesc) - 120usize];
    ["Offset of field: tagMQWQR3::DefBind"][::std::mem::offset_of!(tagMQWQR3, DefBind) - 184usize];
    ["Offset of field: tagMQWQR3::DefPersistence"][::std::mem::offset_of!(tagMQWQR3, DefPersistence) - 188usize];
    ["Offset of field: tagMQWQR3::DefPriority"][::std::mem::offset_of!(tagMQWQR3, DefPriority) - 192usize];
    ["Offset of field: tagMQWQR3::InhibitPut"][::std::mem::offset_of!(tagMQWQR3, InhibitPut) - 196usize];
    ["Offset of field: tagMQWQR3::CLWLQueuePriority"][::std::mem::offset_of!(tagMQWQR3, CLWLQueuePriority) - 200usize];
    ["Offset of field: tagMQWQR3::CLWLQueueRank"][::std::mem::offset_of!(tagMQWQR3, CLWLQueueRank) - 204usize];
    ["Offset of field: tagMQWQR3::DefPutResponse"][::std::mem::offset_of!(tagMQWQR3, DefPutResponse) - 208usize];
};
pub type MQWQR4 = tagMQWQR4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWQR4 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub QFlags: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrIdentifier: MQCHAR48,
    pub ClusterRecOffset: MQLONG,
    pub QType: MQLONG,
    pub QDesc: MQCHAR64,
    pub DefBind: MQLONG,
    pub DefPersistence: MQLONG,
    pub DefPriority: MQLONG,
    pub InhibitPut: MQLONG,
    pub CLWLQueuePriority: MQLONG,
    pub CLWLQueueRank: MQLONG,
    pub DefPutResponse: MQLONG,
    pub CapExpiry: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWQR4"][::std::mem::size_of::<tagMQWQR4>() - 216usize];
    ["Alignment of tagMQWQR4"][::std::mem::align_of::<tagMQWQR4>() - 4usize];
    ["Offset of field: tagMQWQR4::StrucId"][::std::mem::offset_of!(tagMQWQR4, StrucId) - 0usize];
    ["Offset of field: tagMQWQR4::Version"][::std::mem::offset_of!(tagMQWQR4, Version) - 4usize];
    ["Offset of field: tagMQWQR4::StrucLength"][::std::mem::offset_of!(tagMQWQR4, StrucLength) - 8usize];
    ["Offset of field: tagMQWQR4::QFlags"][::std::mem::offset_of!(tagMQWQR4, QFlags) - 12usize];
    ["Offset of field: tagMQWQR4::QName"][::std::mem::offset_of!(tagMQWQR4, QName) - 16usize];
    ["Offset of field: tagMQWQR4::QMgrIdentifier"][::std::mem::offset_of!(tagMQWQR4, QMgrIdentifier) - 64usize];
    ["Offset of field: tagMQWQR4::ClusterRecOffset"][::std::mem::offset_of!(tagMQWQR4, ClusterRecOffset) - 112usize];
    ["Offset of field: tagMQWQR4::QType"][::std::mem::offset_of!(tagMQWQR4, QType) - 116usize];
    ["Offset of field: tagMQWQR4::QDesc"][::std::mem::offset_of!(tagMQWQR4, QDesc) - 120usize];
    ["Offset of field: tagMQWQR4::DefBind"][::std::mem::offset_of!(tagMQWQR4, DefBind) - 184usize];
    ["Offset of field: tagMQWQR4::DefPersistence"][::std::mem::offset_of!(tagMQWQR4, DefPersistence) - 188usize];
    ["Offset of field: tagMQWQR4::DefPriority"][::std::mem::offset_of!(tagMQWQR4, DefPriority) - 192usize];
    ["Offset of field: tagMQWQR4::InhibitPut"][::std::mem::offset_of!(tagMQWQR4, InhibitPut) - 196usize];
    ["Offset of field: tagMQWQR4::CLWLQueuePriority"][::std::mem::offset_of!(tagMQWQR4, CLWLQueuePriority) - 200usize];
    ["Offset of field: tagMQWQR4::CLWLQueueRank"][::std::mem::offset_of!(tagMQWQR4, CLWLQueueRank) - 204usize];
    ["Offset of field: tagMQWQR4::DefPutResponse"][::std::mem::offset_of!(tagMQWQR4, DefPutResponse) - 208usize];
    ["Offset of field: tagMQWQR4::CapExpiry"][::std::mem::offset_of!(tagMQWQR4, CapExpiry) - 212usize];
};
pub type MQWXP = tagMQWXP;
pub type PMQWXP = *mut MQWXP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWXP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub Flags: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub MsgDescPtr: PMQMD,
    pub MsgBufferPtr: PMQVOID,
    pub MsgBufferLength: MQLONG,
    pub MsgLength: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub DestinationCount: MQLONG,
    pub DestinationChosen: MQLONG,
    pub DestinationArrayPtr: PPMQWDR,
    pub QArrayPtr: PPMQWQR,
    pub CacheContext: MQPTR,
    pub CacheType: MQLONG,
    pub CLWLMRUChannels: MQLONG,
    pub pEntryPoints: PMQIEP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWXP"][::std::mem::size_of::<tagMQWXP>() - 248usize];
    ["Alignment of tagMQWXP"][::std::mem::align_of::<tagMQWXP>() - 8usize];
    ["Offset of field: tagMQWXP::StrucId"][::std::mem::offset_of!(tagMQWXP, StrucId) - 0usize];
    ["Offset of field: tagMQWXP::Version"][::std::mem::offset_of!(tagMQWXP, Version) - 4usize];
    ["Offset of field: tagMQWXP::ExitId"][::std::mem::offset_of!(tagMQWXP, ExitId) - 8usize];
    ["Offset of field: tagMQWXP::ExitReason"][::std::mem::offset_of!(tagMQWXP, ExitReason) - 12usize];
    ["Offset of field: tagMQWXP::ExitResponse"][::std::mem::offset_of!(tagMQWXP, ExitResponse) - 16usize];
    ["Offset of field: tagMQWXP::ExitResponse2"][::std::mem::offset_of!(tagMQWXP, ExitResponse2) - 20usize];
    ["Offset of field: tagMQWXP::Feedback"][::std::mem::offset_of!(tagMQWXP, Feedback) - 24usize];
    ["Offset of field: tagMQWXP::Flags"][::std::mem::offset_of!(tagMQWXP, Flags) - 28usize];
    ["Offset of field: tagMQWXP::ExitUserArea"][::std::mem::offset_of!(tagMQWXP, ExitUserArea) - 32usize];
    ["Offset of field: tagMQWXP::ExitData"][::std::mem::offset_of!(tagMQWXP, ExitData) - 48usize];
    ["Offset of field: tagMQWXP::MsgDescPtr"][::std::mem::offset_of!(tagMQWXP, MsgDescPtr) - 80usize];
    ["Offset of field: tagMQWXP::MsgBufferPtr"][::std::mem::offset_of!(tagMQWXP, MsgBufferPtr) - 88usize];
    ["Offset of field: tagMQWXP::MsgBufferLength"][::std::mem::offset_of!(tagMQWXP, MsgBufferLength) - 96usize];
    ["Offset of field: tagMQWXP::MsgLength"][::std::mem::offset_of!(tagMQWXP, MsgLength) - 100usize];
    ["Offset of field: tagMQWXP::QName"][::std::mem::offset_of!(tagMQWXP, QName) - 104usize];
    ["Offset of field: tagMQWXP::QMgrName"][::std::mem::offset_of!(tagMQWXP, QMgrName) - 152usize];
    ["Offset of field: tagMQWXP::DestinationCount"][::std::mem::offset_of!(tagMQWXP, DestinationCount) - 200usize];
    ["Offset of field: tagMQWXP::DestinationChosen"][::std::mem::offset_of!(tagMQWXP, DestinationChosen) - 204usize];
    ["Offset of field: tagMQWXP::DestinationArrayPtr"][::std::mem::offset_of!(tagMQWXP, DestinationArrayPtr) - 208usize];
    ["Offset of field: tagMQWXP::QArrayPtr"][::std::mem::offset_of!(tagMQWXP, QArrayPtr) - 216usize];
    ["Offset of field: tagMQWXP::CacheContext"][::std::mem::offset_of!(tagMQWXP, CacheContext) - 224usize];
    ["Offset of field: tagMQWXP::CacheType"][::std::mem::offset_of!(tagMQWXP, CacheType) - 232usize];
    ["Offset of field: tagMQWXP::CLWLMRUChannels"][::std::mem::offset_of!(tagMQWXP, CLWLMRUChannels) - 236usize];
    ["Offset of field: tagMQWXP::pEntryPoints"][::std::mem::offset_of!(tagMQWXP, pEntryPoints) - 240usize];
};
pub type MQWXP1 = tagMQWXP1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWXP1 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub Flags: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub MsgDescPtr: PMQMD,
    pub MsgBufferPtr: PMQVOID,
    pub MsgBufferLength: MQLONG,
    pub MsgLength: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub DestinationCount: MQLONG,
    pub DestinationChosen: MQLONG,
    pub DestinationArrayPtr: PPMQWDR,
    pub QArrayPtr: PPMQWQR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWXP1"][::std::mem::size_of::<tagMQWXP1>() - 224usize];
    ["Alignment of tagMQWXP1"][::std::mem::align_of::<tagMQWXP1>() - 8usize];
    ["Offset of field: tagMQWXP1::StrucId"][::std::mem::offset_of!(tagMQWXP1, StrucId) - 0usize];
    ["Offset of field: tagMQWXP1::Version"][::std::mem::offset_of!(tagMQWXP1, Version) - 4usize];
    ["Offset of field: tagMQWXP1::ExitId"][::std::mem::offset_of!(tagMQWXP1, ExitId) - 8usize];
    ["Offset of field: tagMQWXP1::ExitReason"][::std::mem::offset_of!(tagMQWXP1, ExitReason) - 12usize];
    ["Offset of field: tagMQWXP1::ExitResponse"][::std::mem::offset_of!(tagMQWXP1, ExitResponse) - 16usize];
    ["Offset of field: tagMQWXP1::ExitResponse2"][::std::mem::offset_of!(tagMQWXP1, ExitResponse2) - 20usize];
    ["Offset of field: tagMQWXP1::Feedback"][::std::mem::offset_of!(tagMQWXP1, Feedback) - 24usize];
    ["Offset of field: tagMQWXP1::Flags"][::std::mem::offset_of!(tagMQWXP1, Flags) - 28usize];
    ["Offset of field: tagMQWXP1::ExitUserArea"][::std::mem::offset_of!(tagMQWXP1, ExitUserArea) - 32usize];
    ["Offset of field: tagMQWXP1::ExitData"][::std::mem::offset_of!(tagMQWXP1, ExitData) - 48usize];
    ["Offset of field: tagMQWXP1::MsgDescPtr"][::std::mem::offset_of!(tagMQWXP1, MsgDescPtr) - 80usize];
    ["Offset of field: tagMQWXP1::MsgBufferPtr"][::std::mem::offset_of!(tagMQWXP1, MsgBufferPtr) - 88usize];
    ["Offset of field: tagMQWXP1::MsgBufferLength"][::std::mem::offset_of!(tagMQWXP1, MsgBufferLength) - 96usize];
    ["Offset of field: tagMQWXP1::MsgLength"][::std::mem::offset_of!(tagMQWXP1, MsgLength) - 100usize];
    ["Offset of field: tagMQWXP1::QName"][::std::mem::offset_of!(tagMQWXP1, QName) - 104usize];
    ["Offset of field: tagMQWXP1::QMgrName"][::std::mem::offset_of!(tagMQWXP1, QMgrName) - 152usize];
    ["Offset of field: tagMQWXP1::DestinationCount"][::std::mem::offset_of!(tagMQWXP1, DestinationCount) - 200usize];
    ["Offset of field: tagMQWXP1::DestinationChosen"][::std::mem::offset_of!(tagMQWXP1, DestinationChosen) - 204usize];
    ["Offset of field: tagMQWXP1::DestinationArrayPtr"][::std::mem::offset_of!(tagMQWXP1, DestinationArrayPtr) - 208usize];
    ["Offset of field: tagMQWXP1::QArrayPtr"][::std::mem::offset_of!(tagMQWXP1, QArrayPtr) - 216usize];
};
pub type MQWXP2 = tagMQWXP2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWXP2 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub Flags: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub MsgDescPtr: PMQMD,
    pub MsgBufferPtr: PMQVOID,
    pub MsgBufferLength: MQLONG,
    pub MsgLength: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub DestinationCount: MQLONG,
    pub DestinationChosen: MQLONG,
    pub DestinationArrayPtr: PPMQWDR,
    pub QArrayPtr: PPMQWQR,
    pub CacheContext: MQPTR,
    pub CacheType: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWXP2"][::std::mem::size_of::<tagMQWXP2>() - 240usize];
    ["Alignment of tagMQWXP2"][::std::mem::align_of::<tagMQWXP2>() - 8usize];
    ["Offset of field: tagMQWXP2::StrucId"][::std::mem::offset_of!(tagMQWXP2, StrucId) - 0usize];
    ["Offset of field: tagMQWXP2::Version"][::std::mem::offset_of!(tagMQWXP2, Version) - 4usize];
    ["Offset of field: tagMQWXP2::ExitId"][::std::mem::offset_of!(tagMQWXP2, ExitId) - 8usize];
    ["Offset of field: tagMQWXP2::ExitReason"][::std::mem::offset_of!(tagMQWXP2, ExitReason) - 12usize];
    ["Offset of field: tagMQWXP2::ExitResponse"][::std::mem::offset_of!(tagMQWXP2, ExitResponse) - 16usize];
    ["Offset of field: tagMQWXP2::ExitResponse2"][::std::mem::offset_of!(tagMQWXP2, ExitResponse2) - 20usize];
    ["Offset of field: tagMQWXP2::Feedback"][::std::mem::offset_of!(tagMQWXP2, Feedback) - 24usize];
    ["Offset of field: tagMQWXP2::Flags"][::std::mem::offset_of!(tagMQWXP2, Flags) - 28usize];
    ["Offset of field: tagMQWXP2::ExitUserArea"][::std::mem::offset_of!(tagMQWXP2, ExitUserArea) - 32usize];
    ["Offset of field: tagMQWXP2::ExitData"][::std::mem::offset_of!(tagMQWXP2, ExitData) - 48usize];
    ["Offset of field: tagMQWXP2::MsgDescPtr"][::std::mem::offset_of!(tagMQWXP2, MsgDescPtr) - 80usize];
    ["Offset of field: tagMQWXP2::MsgBufferPtr"][::std::mem::offset_of!(tagMQWXP2, MsgBufferPtr) - 88usize];
    ["Offset of field: tagMQWXP2::MsgBufferLength"][::std::mem::offset_of!(tagMQWXP2, MsgBufferLength) - 96usize];
    ["Offset of field: tagMQWXP2::MsgLength"][::std::mem::offset_of!(tagMQWXP2, MsgLength) - 100usize];
    ["Offset of field: tagMQWXP2::QName"][::std::mem::offset_of!(tagMQWXP2, QName) - 104usize];
    ["Offset of field: tagMQWXP2::QMgrName"][::std::mem::offset_of!(tagMQWXP2, QMgrName) - 152usize];
    ["Offset of field: tagMQWXP2::DestinationCount"][::std::mem::offset_of!(tagMQWXP2, DestinationCount) - 200usize];
    ["Offset of field: tagMQWXP2::DestinationChosen"][::std::mem::offset_of!(tagMQWXP2, DestinationChosen) - 204usize];
    ["Offset of field: tagMQWXP2::DestinationArrayPtr"][::std::mem::offset_of!(tagMQWXP2, DestinationArrayPtr) - 208usize];
    ["Offset of field: tagMQWXP2::QArrayPtr"][::std::mem::offset_of!(tagMQWXP2, QArrayPtr) - 216usize];
    ["Offset of field: tagMQWXP2::CacheContext"][::std::mem::offset_of!(tagMQWXP2, CacheContext) - 224usize];
    ["Offset of field: tagMQWXP2::CacheType"][::std::mem::offset_of!(tagMQWXP2, CacheType) - 232usize];
};
pub type MQWXP3 = tagMQWXP3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWXP3 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub Flags: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub MsgDescPtr: PMQMD,
    pub MsgBufferPtr: PMQVOID,
    pub MsgBufferLength: MQLONG,
    pub MsgLength: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub DestinationCount: MQLONG,
    pub DestinationChosen: MQLONG,
    pub DestinationArrayPtr: PPMQWDR,
    pub QArrayPtr: PPMQWQR,
    pub CacheContext: MQPTR,
    pub CacheType: MQLONG,
    pub CLWLMRUChannels: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWXP3"][::std::mem::size_of::<tagMQWXP3>() - 240usize];
    ["Alignment of tagMQWXP3"][::std::mem::align_of::<tagMQWXP3>() - 8usize];
    ["Offset of field: tagMQWXP3::StrucId"][::std::mem::offset_of!(tagMQWXP3, StrucId) - 0usize];
    ["Offset of field: tagMQWXP3::Version"][::std::mem::offset_of!(tagMQWXP3, Version) - 4usize];
    ["Offset of field: tagMQWXP3::ExitId"][::std::mem::offset_of!(tagMQWXP3, ExitId) - 8usize];
    ["Offset of field: tagMQWXP3::ExitReason"][::std::mem::offset_of!(tagMQWXP3, ExitReason) - 12usize];
    ["Offset of field: tagMQWXP3::ExitResponse"][::std::mem::offset_of!(tagMQWXP3, ExitResponse) - 16usize];
    ["Offset of field: tagMQWXP3::ExitResponse2"][::std::mem::offset_of!(tagMQWXP3, ExitResponse2) - 20usize];
    ["Offset of field: tagMQWXP3::Feedback"][::std::mem::offset_of!(tagMQWXP3, Feedback) - 24usize];
    ["Offset of field: tagMQWXP3::Flags"][::std::mem::offset_of!(tagMQWXP3, Flags) - 28usize];
    ["Offset of field: tagMQWXP3::ExitUserArea"][::std::mem::offset_of!(tagMQWXP3, ExitUserArea) - 32usize];
    ["Offset of field: tagMQWXP3::ExitData"][::std::mem::offset_of!(tagMQWXP3, ExitData) - 48usize];
    ["Offset of field: tagMQWXP3::MsgDescPtr"][::std::mem::offset_of!(tagMQWXP3, MsgDescPtr) - 80usize];
    ["Offset of field: tagMQWXP3::MsgBufferPtr"][::std::mem::offset_of!(tagMQWXP3, MsgBufferPtr) - 88usize];
    ["Offset of field: tagMQWXP3::MsgBufferLength"][::std::mem::offset_of!(tagMQWXP3, MsgBufferLength) - 96usize];
    ["Offset of field: tagMQWXP3::MsgLength"][::std::mem::offset_of!(tagMQWXP3, MsgLength) - 100usize];
    ["Offset of field: tagMQWXP3::QName"][::std::mem::offset_of!(tagMQWXP3, QName) - 104usize];
    ["Offset of field: tagMQWXP3::QMgrName"][::std::mem::offset_of!(tagMQWXP3, QMgrName) - 152usize];
    ["Offset of field: tagMQWXP3::DestinationCount"][::std::mem::offset_of!(tagMQWXP3, DestinationCount) - 200usize];
    ["Offset of field: tagMQWXP3::DestinationChosen"][::std::mem::offset_of!(tagMQWXP3, DestinationChosen) - 204usize];
    ["Offset of field: tagMQWXP3::DestinationArrayPtr"][::std::mem::offset_of!(tagMQWXP3, DestinationArrayPtr) - 208usize];
    ["Offset of field: tagMQWXP3::QArrayPtr"][::std::mem::offset_of!(tagMQWXP3, QArrayPtr) - 216usize];
    ["Offset of field: tagMQWXP3::CacheContext"][::std::mem::offset_of!(tagMQWXP3, CacheContext) - 224usize];
    ["Offset of field: tagMQWXP3::CacheType"][::std::mem::offset_of!(tagMQWXP3, CacheType) - 232usize];
    ["Offset of field: tagMQWXP3::CLWLMRUChannels"][::std::mem::offset_of!(tagMQWXP3, CLWLMRUChannels) - 236usize];
};
pub type MQWXP4 = tagMQWXP4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQWXP4 {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ExitId: MQLONG,
    pub ExitReason: MQLONG,
    pub ExitResponse: MQLONG,
    pub ExitResponse2: MQLONG,
    pub Feedback: MQLONG,
    pub Flags: MQLONG,
    pub ExitUserArea: MQBYTE16,
    pub ExitData: MQCHAR32,
    pub MsgDescPtr: PMQMD,
    pub MsgBufferPtr: PMQVOID,
    pub MsgBufferLength: MQLONG,
    pub MsgLength: MQLONG,
    pub QName: MQCHAR48,
    pub QMgrName: MQCHAR48,
    pub DestinationCount: MQLONG,
    pub DestinationChosen: MQLONG,
    pub DestinationArrayPtr: PPMQWDR,
    pub QArrayPtr: PPMQWQR,
    pub CacheContext: MQPTR,
    pub CacheType: MQLONG,
    pub CLWLMRUChannels: MQLONG,
    pub pEntryPoints: PMQIEP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQWXP4"][::std::mem::size_of::<tagMQWXP4>() - 248usize];
    ["Alignment of tagMQWXP4"][::std::mem::align_of::<tagMQWXP4>() - 8usize];
    ["Offset of field: tagMQWXP4::StrucId"][::std::mem::offset_of!(tagMQWXP4, StrucId) - 0usize];
    ["Offset of field: tagMQWXP4::Version"][::std::mem::offset_of!(tagMQWXP4, Version) - 4usize];
    ["Offset of field: tagMQWXP4::ExitId"][::std::mem::offset_of!(tagMQWXP4, ExitId) - 8usize];
    ["Offset of field: tagMQWXP4::ExitReason"][::std::mem::offset_of!(tagMQWXP4, ExitReason) - 12usize];
    ["Offset of field: tagMQWXP4::ExitResponse"][::std::mem::offset_of!(tagMQWXP4, ExitResponse) - 16usize];
    ["Offset of field: tagMQWXP4::ExitResponse2"][::std::mem::offset_of!(tagMQWXP4, ExitResponse2) - 20usize];
    ["Offset of field: tagMQWXP4::Feedback"][::std::mem::offset_of!(tagMQWXP4, Feedback) - 24usize];
    ["Offset of field: tagMQWXP4::Flags"][::std::mem::offset_of!(tagMQWXP4, Flags) - 28usize];
    ["Offset of field: tagMQWXP4::ExitUserArea"][::std::mem::offset_of!(tagMQWXP4, ExitUserArea) - 32usize];
    ["Offset of field: tagMQWXP4::ExitData"][::std::mem::offset_of!(tagMQWXP4, ExitData) - 48usize];
    ["Offset of field: tagMQWXP4::MsgDescPtr"][::std::mem::offset_of!(tagMQWXP4, MsgDescPtr) - 80usize];
    ["Offset of field: tagMQWXP4::MsgBufferPtr"][::std::mem::offset_of!(tagMQWXP4, MsgBufferPtr) - 88usize];
    ["Offset of field: tagMQWXP4::MsgBufferLength"][::std::mem::offset_of!(tagMQWXP4, MsgBufferLength) - 96usize];
    ["Offset of field: tagMQWXP4::MsgLength"][::std::mem::offset_of!(tagMQWXP4, MsgLength) - 100usize];
    ["Offset of field: tagMQWXP4::QName"][::std::mem::offset_of!(tagMQWXP4, QName) - 104usize];
    ["Offset of field: tagMQWXP4::QMgrName"][::std::mem::offset_of!(tagMQWXP4, QMgrName) - 152usize];
    ["Offset of field: tagMQWXP4::DestinationCount"][::std::mem::offset_of!(tagMQWXP4, DestinationCount) - 200usize];
    ["Offset of field: tagMQWXP4::DestinationChosen"][::std::mem::offset_of!(tagMQWXP4, DestinationChosen) - 204usize];
    ["Offset of field: tagMQWXP4::DestinationArrayPtr"][::std::mem::offset_of!(tagMQWXP4, DestinationArrayPtr) - 208usize];
    ["Offset of field: tagMQWXP4::QArrayPtr"][::std::mem::offset_of!(tagMQWXP4, QArrayPtr) - 216usize];
    ["Offset of field: tagMQWXP4::CacheContext"][::std::mem::offset_of!(tagMQWXP4, CacheContext) - 224usize];
    ["Offset of field: tagMQWXP4::CacheType"][::std::mem::offset_of!(tagMQWXP4, CacheType) - 232usize];
    ["Offset of field: tagMQWXP4::CLWLMRUChannels"][::std::mem::offset_of!(tagMQWXP4, CLWLMRUChannels) - 236usize];
    ["Offset of field: tagMQWXP4::pEntryPoints"][::std::mem::offset_of!(tagMQWXP4, pEntryPoints) - 240usize];
};
pub type MQXEPO = tagMQXEPO;
pub type PMQXEPO = *mut MQXEPO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQXEPO {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Options: MQLONG,
    pub ExitProperties: MQCHARV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQXEPO"][::std::mem::size_of::<tagMQXEPO>() - 40usize];
    ["Alignment of tagMQXEPO"][::std::mem::align_of::<tagMQXEPO>() - 8usize];
    ["Offset of field: tagMQXEPO::StrucId"][::std::mem::offset_of!(tagMQXEPO, StrucId) - 0usize];
    ["Offset of field: tagMQXEPO::Version"][::std::mem::offset_of!(tagMQXEPO, Version) - 4usize];
    ["Offset of field: tagMQXEPO::Options"][::std::mem::offset_of!(tagMQXEPO, Options) - 8usize];
    ["Offset of field: tagMQXEPO::ExitProperties"][::std::mem::offset_of!(tagMQXEPO, ExitProperties) - 16usize];
};
extern "C" {
    pub fn MQXEP(
        Hconfig: MQHCONFIG,
        ExitReason: MQLONG,
        Function: MQLONG,
        pEntryPoint: PMQFUNC,
        pExitOpts: PMQXEPO,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_XEP_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconfig: MQHCONFIG,
        ExitReason: MQLONG,
        Function: MQLONG,
        pEntryPoint: PMQFUNC,
        pExitOpts: PMQXEPO,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_XEP_CALL = MQ_XEP_CALL;
extern "C" {
    pub fn MQXCLWLN(
        pExitParms: PMQWXP,
        CurrentRecord: MQPTR,
        NextOffset: MQLONG,
        pNextRecord: PMQPTR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_XCLWLN_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        pExitParms: PMQWXP,
        CurrentRecord: MQPTR,
        NextOffset: MQLONG,
        pNextRecord: PMQPTR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_XCLWLN_CALL = MQ_XCLWLN_CALL;
extern "C" {
    pub fn MQXCNVC(
        Hconn: MQHCONN,
        Options: MQLONG,
        SourceCCSID: MQLONG,
        SourceLength: MQLONG,
        pSourceBuffer: PMQCHAR,
        TargetCCSID: MQLONG,
        TargetLength: MQLONG,
        pTargetBuffer: PMQCHAR,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
pub type MQ_XCNVC_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        Hconn: MQHCONN,
        Options: MQLONG,
        SourceCCSID: MQLONG,
        SourceLength: MQLONG,
        pSourceBuffer: PMQCHAR,
        TargetCCSID: MQLONG,
        TargetLength: MQLONG,
        pTargetBuffer: PMQCHAR,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    ),
>;
pub type PMQ_XCNVC_CALL = MQ_XCNVC_CALL;
extern "C" {
    pub fn MQXDX(
        pDataConvExitParms: PMQDXP,
        pMsgDesc: PMQMD,
        InBufferLength: MQLONG,
        pInBuffer: PMQVOID,
        OutBufferLength: MQLONG,
        pOutBuffer: PMQVOID,
    );
}
pub type MQ_XDX_CALL = ::std::option::Option<
    unsafe extern "C" fn(
        pDataConvExitParms: PMQDXP,
        pMsgDesc: PMQMD,
        InBufferLength: MQLONG,
        pInBuffer: PMQVOID,
        OutBufferLength: MQLONG,
        pOutBuffer: PMQVOID,
    ),
>;
pub type PMQ_XDX_CALL = MQ_XDX_CALL;
extern "C" {
    pub fn MQACTIVE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQACTP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQACTV_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQACT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQADOPT_CHECK_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQADOPT_TYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQADPCTX_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAIT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAPPL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAUTHENTICATE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAUTHOPT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAUTH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAUTOCLUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQAUTO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBACF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBALANCED_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBALSTATE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBMHO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBND_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBNO_BALTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBNO_OPTIONS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBNO_TIMEOUT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBPLOCATION_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQBT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCACF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCACH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCADSD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCAFTY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCAMO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCAP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCAUT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCBCF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCBCT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCBDO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCBD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCBO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCBT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCCSI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCCT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCDC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCEX_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFACCESS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFCONLOS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFOFFLD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFOP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFO_REFRESH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFO_REMOVE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFSTATUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCFT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCGWI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHAD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHIDS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHK_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHLA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHLD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHRR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHSH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHSR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHSSTATE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHTAB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCHT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCIH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCIT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLCT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLROUTE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLRS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLRT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLST_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLWL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCLXQ_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCMDI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCMDL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCMD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCMHO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCNO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCODL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCOMPRESS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCOPY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCQT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCRC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCSP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCSRV_CONVERT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCSRV_DLQ_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCTES_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCTLO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQCUOWC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDCC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDELO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDHF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDISCONNECT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDLV_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDMHO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDMPO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDNSWLM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDOPT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDSB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQDSE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQENC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEPH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQET_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEVO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEVR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEXPI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEXTATTRS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQEXT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQFB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQFC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQFSENC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQFS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQFUN_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQGACF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQGMO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQGUR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQHA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQHB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQHC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQHM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQHO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQHSTATE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIACF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIACH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIAMO64_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIAMO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIAMO_MONITOR_DATATYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIAMO_MONITOR_FLAGS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIASY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIAV_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIDO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIEPF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIGQPA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIGQ_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIIH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIMGRCOV_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIMMREASON_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIMPO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQINBD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIND_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIPADDR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQIT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQKAI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQKEY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQLDAPC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQLDAP_AUTHORMD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQLDAP_NESTGRP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQLOGTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQLR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMASTER_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMATCH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMCAS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMCAT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMCB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMCEV_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMCP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMDEF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMDS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMEDIMGINTVL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMEDIMGLOGLN_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMEDIMGSCHED_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMHBO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMLP_ENCRYPTION_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMLP_SIGN_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMLP_TOLERATE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMMBI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMODE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMON_OVERRIDE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMON_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMON_AVAILABILITY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQMULC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNHABACKLOG_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNHACONNACTV_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNHAINSYNC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNHAROLE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNPMS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNPM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNSH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQNT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOPER_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOPMODE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQOT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPAGECLAS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPER_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPMO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPMRF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPRI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPROP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPROTO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPRT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPSCLUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPSCT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPSM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPSPROP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPSST_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQPUBO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQA_BACKOUT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQA_GET_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQA_PUT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQA_SHAREABLE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQDT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQFS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQMDT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQMFAC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQMF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQMOPT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQMSTA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQMT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQSGD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQSGS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQSIE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQSOT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQSO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQSUM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQQT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRAR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRCCF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRCN_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRCVTIME_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRDNS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRD_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQREADA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRECAUTO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRECORDING_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQREGO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQREORG_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRFH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRMHF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQROUTE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRQ_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQRU_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSCA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSCOPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSCO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSCYC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSECCOMM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSECITEM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSECPROT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSECSW_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSECTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSELTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSEL_ALL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSEL_ANY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSMPO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSPL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSQQM_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSRO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSSL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSTAT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSTDBY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQST_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSUBTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSUB_DURABILITY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSUB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSVC_CONTROL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSVC_STATUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSVC_TYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSYNCPOINT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSYSOBJ_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQSYSP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQS_AVAIL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQS_EXPANDST_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQS_OPENMODE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQS_STATUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTA_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTA_PROXY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTA_PUB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTA_SUB_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTCPKEEP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTCPSTACK_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTIME_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTOPT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTRAXSTR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTRIGGER_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTSCOPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQTYPE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUCI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUIDSUPP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUNDELIVERED_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUOWST_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUOWT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUSAGE_DS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUSAGE_EXPAND_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUSAGE_PS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUSAGE_SMDS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUSEDLQ_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUSRC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQUS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQVL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQVS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQVU_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQWARN_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQWIH_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQWI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQWS_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQWXP_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXACT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXCC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXC_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXDR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXEPO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXF_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXPT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXR2_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXR_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQXT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZAET_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZAO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZAT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZCI_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZID_AUTHORITY_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZID_NAME_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZID_USERID_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZID_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZIO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZSE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZSL_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQZTO_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQ_CERT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQ_MQTT_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn MQ_SUITE_STR(v: MQLONG) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQI_BY_VALUE_STR {
    pub value: MQLONG,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQI_BY_VALUE_STR"][::std::mem::size_of::<MQI_BY_VALUE_STR>() - 16usize];
    ["Alignment of MQI_BY_VALUE_STR"][::std::mem::align_of::<MQI_BY_VALUE_STR>() - 8usize];
    ["Offset of field: MQI_BY_VALUE_STR::value"][::std::mem::offset_of!(MQI_BY_VALUE_STR, value) - 0usize];
    ["Offset of field: MQI_BY_VALUE_STR::name"][::std::mem::offset_of!(MQI_BY_VALUE_STR, name) - 8usize];
};
extern "C" {
    pub static MQI_BY_VALUE_STR: [MQI_BY_VALUE_STR; 5242usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQI_BY_NAME_STR {
    pub name: *mut ::std::os::raw::c_char,
    pub value: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQI_BY_NAME_STR"][::std::mem::size_of::<MQI_BY_NAME_STR>() - 16usize];
    ["Alignment of MQI_BY_NAME_STR"][::std::mem::align_of::<MQI_BY_NAME_STR>() - 8usize];
    ["Offset of field: MQI_BY_NAME_STR::name"][::std::mem::offset_of!(MQI_BY_NAME_STR, name) - 0usize];
    ["Offset of field: MQI_BY_NAME_STR::value"][::std::mem::offset_of!(MQI_BY_NAME_STR, value) - 8usize];
};
extern "C" {
    pub static MQI_BY_NAME_STR: [MQI_BY_NAME_STR; 5242usize];
}
pub type MQHBAG = MQLONG;
pub type PMQHBAG = *mut MQHBAG;
extern "C" {
    pub fn mqAddBag(Bag: MQHBAG, Selector: MQLONG, ItemValue: MQHBAG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqAddByteString(
        Bag: MQHBAG,
        Selector: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQBYTE,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqAddByteStringFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQBYTE,
        Operator: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqAddInquiry(Bag: MQHBAG, Selector: MQLONG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqAddInteger(Bag: MQHBAG, Selector: MQLONG, ItemValue: MQLONG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqAddInteger64(Bag: MQHBAG, Selector: MQLONG, ItemValue: MQINT64, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqAddIntegerFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemValue: MQLONG,
        Operator: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqAddString(
        Bag: MQHBAG,
        Selector: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQCHAR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqAddStringFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQCHAR,
        Operator: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqBagToBuffer(
        OptionsBag: MQHBAG,
        DataBag: MQHBAG,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        pDataLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqBufferToBag(
        OptionsBag: MQHBAG,
        BufferLength: MQLONG,
        pBuffer: PMQVOID,
        DataBag: MQHBAG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqClearBag(Bag: MQHBAG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqCountItems(Bag: MQHBAG, Selector: MQLONG, pItemCount: PMQLONG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqCreateBag(Options: MQLONG, pBag: PMQHBAG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqDeleteBag(pBag: PMQHBAG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqDeleteItem(Bag: MQHBAG, Selector: MQLONG, ItemIndex: MQLONG, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqExecute(
        Hconn: MQHCONN,
        Command: MQLONG,
        OptionsBag: MQHBAG,
        AdminBag: MQHBAG,
        ResponseBag: MQHBAG,
        AdminQ: MQHOBJ,
        ResponseQ: MQHOBJ,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqGetBag(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pGetMsgOpts: PMQVOID,
        Bag: MQHBAG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireBag(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        pItemValue: PMQHBAG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireByteString(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQBYTE,
        pByteStringLength: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireByteStringFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQBYTE,
        pByteStringLength: PMQLONG,
        pOperator: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireInteger(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        pItemValue: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireInteger64(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        pItemValue: PMQINT64,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireIntegerFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        pItemValue: PMQLONG,
        pOperator: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireItemInfo(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        pOutSelector: PMQLONG,
        pItemType: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireString(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQCHAR,
        pStringLength: PMQLONG,
        pCodedCharSetId: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqInquireStringFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQCHAR,
        pStringLength: PMQLONG,
        pCodedCharSetId: PMQLONG,
        pOperator: PMQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqPad(pString: PMQCHAR, BufferLength: MQLONG, pBuffer: PMQCHAR, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqPutBag(
        Hconn: MQHCONN,
        Hobj: MQHOBJ,
        pMsgDesc: PMQVOID,
        pPutMsgOpts: PMQVOID,
        Bag: MQHBAG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetByteString(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQBYTE,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetByteStringFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQBYTE,
        Operator: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetInteger(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        ItemValue: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetInteger64(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        ItemValue: MQINT64,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetIntegerFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        ItemValue: MQLONG,
        Operator: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetString(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQCHAR,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqSetStringFilter(
        Bag: MQHBAG,
        Selector: MQLONG,
        ItemIndex: MQLONG,
        BufferLength: MQLONG,
        pBuffer: PMQCHAR,
        Operator: MQLONG,
        pCompCode: PMQLONG,
        pReason: PMQLONG,
    );
}
extern "C" {
    pub fn mqTrim(BufferLength: MQLONG, pBuffer: PMQCHAR, pString: PMQCHAR, pCompCode: PMQLONG, pReason: PMQLONG);
}
extern "C" {
    pub fn mqTruncateBag(Bag: MQHBAG, ItemCount: MQLONG, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQCFH = tagMQCFH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFH {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Version: MQLONG,
    pub Command: MQLONG,
    pub MsgSeqNumber: MQLONG,
    pub Control: MQLONG,
    pub CompCode: MQLONG,
    pub Reason: MQLONG,
    pub ParameterCount: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFH"][::std::mem::size_of::<tagMQCFH>() - 36usize];
    ["Alignment of tagMQCFH"][::std::mem::align_of::<tagMQCFH>() - 4usize];
    ["Offset of field: tagMQCFH::Type"][::std::mem::offset_of!(tagMQCFH, Type) - 0usize];
    ["Offset of field: tagMQCFH::StrucLength"][::std::mem::offset_of!(tagMQCFH, StrucLength) - 4usize];
    ["Offset of field: tagMQCFH::Version"][::std::mem::offset_of!(tagMQCFH, Version) - 8usize];
    ["Offset of field: tagMQCFH::Command"][::std::mem::offset_of!(tagMQCFH, Command) - 12usize];
    ["Offset of field: tagMQCFH::MsgSeqNumber"][::std::mem::offset_of!(tagMQCFH, MsgSeqNumber) - 16usize];
    ["Offset of field: tagMQCFH::Control"][::std::mem::offset_of!(tagMQCFH, Control) - 20usize];
    ["Offset of field: tagMQCFH::CompCode"][::std::mem::offset_of!(tagMQCFH, CompCode) - 24usize];
    ["Offset of field: tagMQCFH::Reason"][::std::mem::offset_of!(tagMQCFH, Reason) - 28usize];
    ["Offset of field: tagMQCFH::ParameterCount"][::std::mem::offset_of!(tagMQCFH, ParameterCount) - 32usize];
};
pub type MQCFBF = tagMQCFBF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFBF {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Operator: MQLONG,
    pub FilterValueLength: MQLONG,
    pub FilterValue: [MQBYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFBF"][::std::mem::size_of::<tagMQCFBF>() - 24usize];
    ["Alignment of tagMQCFBF"][::std::mem::align_of::<tagMQCFBF>() - 4usize];
    ["Offset of field: tagMQCFBF::Type"][::std::mem::offset_of!(tagMQCFBF, Type) - 0usize];
    ["Offset of field: tagMQCFBF::StrucLength"][::std::mem::offset_of!(tagMQCFBF, StrucLength) - 4usize];
    ["Offset of field: tagMQCFBF::Parameter"][::std::mem::offset_of!(tagMQCFBF, Parameter) - 8usize];
    ["Offset of field: tagMQCFBF::Operator"][::std::mem::offset_of!(tagMQCFBF, Operator) - 12usize];
    ["Offset of field: tagMQCFBF::FilterValueLength"][::std::mem::offset_of!(tagMQCFBF, FilterValueLength) - 16usize];
    ["Offset of field: tagMQCFBF::FilterValue"][::std::mem::offset_of!(tagMQCFBF, FilterValue) - 20usize];
};
pub type MQCFBS = tagMQCFBS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFBS {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub StringLength: MQLONG,
    pub String: [MQBYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFBS"][::std::mem::size_of::<tagMQCFBS>() - 20usize];
    ["Alignment of tagMQCFBS"][::std::mem::align_of::<tagMQCFBS>() - 4usize];
    ["Offset of field: tagMQCFBS::Type"][::std::mem::offset_of!(tagMQCFBS, Type) - 0usize];
    ["Offset of field: tagMQCFBS::StrucLength"][::std::mem::offset_of!(tagMQCFBS, StrucLength) - 4usize];
    ["Offset of field: tagMQCFBS::Parameter"][::std::mem::offset_of!(tagMQCFBS, Parameter) - 8usize];
    ["Offset of field: tagMQCFBS::StringLength"][::std::mem::offset_of!(tagMQCFBS, StringLength) - 12usize];
    ["Offset of field: tagMQCFBS::String"][::std::mem::offset_of!(tagMQCFBS, String) - 16usize];
};
pub type MQCFGR = tagMQCFGR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFGR {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub ParameterCount: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFGR"][::std::mem::size_of::<tagMQCFGR>() - 16usize];
    ["Alignment of tagMQCFGR"][::std::mem::align_of::<tagMQCFGR>() - 4usize];
    ["Offset of field: tagMQCFGR::Type"][::std::mem::offset_of!(tagMQCFGR, Type) - 0usize];
    ["Offset of field: tagMQCFGR::StrucLength"][::std::mem::offset_of!(tagMQCFGR, StrucLength) - 4usize];
    ["Offset of field: tagMQCFGR::Parameter"][::std::mem::offset_of!(tagMQCFGR, Parameter) - 8usize];
    ["Offset of field: tagMQCFGR::ParameterCount"][::std::mem::offset_of!(tagMQCFGR, ParameterCount) - 12usize];
};
pub type MQCFIF = tagMQCFIF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFIF {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Operator: MQLONG,
    pub FilterValue: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFIF"][::std::mem::size_of::<tagMQCFIF>() - 20usize];
    ["Alignment of tagMQCFIF"][::std::mem::align_of::<tagMQCFIF>() - 4usize];
    ["Offset of field: tagMQCFIF::Type"][::std::mem::offset_of!(tagMQCFIF, Type) - 0usize];
    ["Offset of field: tagMQCFIF::StrucLength"][::std::mem::offset_of!(tagMQCFIF, StrucLength) - 4usize];
    ["Offset of field: tagMQCFIF::Parameter"][::std::mem::offset_of!(tagMQCFIF, Parameter) - 8usize];
    ["Offset of field: tagMQCFIF::Operator"][::std::mem::offset_of!(tagMQCFIF, Operator) - 12usize];
    ["Offset of field: tagMQCFIF::FilterValue"][::std::mem::offset_of!(tagMQCFIF, FilterValue) - 16usize];
};
pub type MQCFIL = tagMQCFIL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFIL {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Count: MQLONG,
    pub Values: [MQLONG; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFIL"][::std::mem::size_of::<tagMQCFIL>() - 20usize];
    ["Alignment of tagMQCFIL"][::std::mem::align_of::<tagMQCFIL>() - 4usize];
    ["Offset of field: tagMQCFIL::Type"][::std::mem::offset_of!(tagMQCFIL, Type) - 0usize];
    ["Offset of field: tagMQCFIL::StrucLength"][::std::mem::offset_of!(tagMQCFIL, StrucLength) - 4usize];
    ["Offset of field: tagMQCFIL::Parameter"][::std::mem::offset_of!(tagMQCFIL, Parameter) - 8usize];
    ["Offset of field: tagMQCFIL::Count"][::std::mem::offset_of!(tagMQCFIL, Count) - 12usize];
    ["Offset of field: tagMQCFIL::Values"][::std::mem::offset_of!(tagMQCFIL, Values) - 16usize];
};
pub type MQCFIL64 = tagMQCFIL64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFIL64 {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Count: MQLONG,
    pub Values: [MQINT64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFIL64"][::std::mem::size_of::<tagMQCFIL64>() - 24usize];
    ["Alignment of tagMQCFIL64"][::std::mem::align_of::<tagMQCFIL64>() - 8usize];
    ["Offset of field: tagMQCFIL64::Type"][::std::mem::offset_of!(tagMQCFIL64, Type) - 0usize];
    ["Offset of field: tagMQCFIL64::StrucLength"][::std::mem::offset_of!(tagMQCFIL64, StrucLength) - 4usize];
    ["Offset of field: tagMQCFIL64::Parameter"][::std::mem::offset_of!(tagMQCFIL64, Parameter) - 8usize];
    ["Offset of field: tagMQCFIL64::Count"][::std::mem::offset_of!(tagMQCFIL64, Count) - 12usize];
    ["Offset of field: tagMQCFIL64::Values"][::std::mem::offset_of!(tagMQCFIL64, Values) - 16usize];
};
pub type MQCFIN = tagMQCFIN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFIN {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Value: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFIN"][::std::mem::size_of::<tagMQCFIN>() - 16usize];
    ["Alignment of tagMQCFIN"][::std::mem::align_of::<tagMQCFIN>() - 4usize];
    ["Offset of field: tagMQCFIN::Type"][::std::mem::offset_of!(tagMQCFIN, Type) - 0usize];
    ["Offset of field: tagMQCFIN::StrucLength"][::std::mem::offset_of!(tagMQCFIN, StrucLength) - 4usize];
    ["Offset of field: tagMQCFIN::Parameter"][::std::mem::offset_of!(tagMQCFIN, Parameter) - 8usize];
    ["Offset of field: tagMQCFIN::Value"][::std::mem::offset_of!(tagMQCFIN, Value) - 12usize];
};
pub type MQCFIN64 = tagMQCFIN64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFIN64 {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Reserved: MQLONG,
    pub Value: MQINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFIN64"][::std::mem::size_of::<tagMQCFIN64>() - 24usize];
    ["Alignment of tagMQCFIN64"][::std::mem::align_of::<tagMQCFIN64>() - 8usize];
    ["Offset of field: tagMQCFIN64::Type"][::std::mem::offset_of!(tagMQCFIN64, Type) - 0usize];
    ["Offset of field: tagMQCFIN64::StrucLength"][::std::mem::offset_of!(tagMQCFIN64, StrucLength) - 4usize];
    ["Offset of field: tagMQCFIN64::Parameter"][::std::mem::offset_of!(tagMQCFIN64, Parameter) - 8usize];
    ["Offset of field: tagMQCFIN64::Reserved"][::std::mem::offset_of!(tagMQCFIN64, Reserved) - 12usize];
    ["Offset of field: tagMQCFIN64::Value"][::std::mem::offset_of!(tagMQCFIN64, Value) - 16usize];
};
pub type MQCFSF = tagMQCFSF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFSF {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub Operator: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub FilterValueLength: MQLONG,
    pub FilterValue: [MQCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFSF"][::std::mem::size_of::<tagMQCFSF>() - 28usize];
    ["Alignment of tagMQCFSF"][::std::mem::align_of::<tagMQCFSF>() - 4usize];
    ["Offset of field: tagMQCFSF::Type"][::std::mem::offset_of!(tagMQCFSF, Type) - 0usize];
    ["Offset of field: tagMQCFSF::StrucLength"][::std::mem::offset_of!(tagMQCFSF, StrucLength) - 4usize];
    ["Offset of field: tagMQCFSF::Parameter"][::std::mem::offset_of!(tagMQCFSF, Parameter) - 8usize];
    ["Offset of field: tagMQCFSF::Operator"][::std::mem::offset_of!(tagMQCFSF, Operator) - 12usize];
    ["Offset of field: tagMQCFSF::CodedCharSetId"][::std::mem::offset_of!(tagMQCFSF, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQCFSF::FilterValueLength"][::std::mem::offset_of!(tagMQCFSF, FilterValueLength) - 20usize];
    ["Offset of field: tagMQCFSF::FilterValue"][::std::mem::offset_of!(tagMQCFSF, FilterValue) - 24usize];
};
pub type MQCFSL = tagMQCFSL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFSL {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Count: MQLONG,
    pub StringLength: MQLONG,
    pub Strings: [MQCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFSL"][::std::mem::size_of::<tagMQCFSL>() - 28usize];
    ["Alignment of tagMQCFSL"][::std::mem::align_of::<tagMQCFSL>() - 4usize];
    ["Offset of field: tagMQCFSL::Type"][::std::mem::offset_of!(tagMQCFSL, Type) - 0usize];
    ["Offset of field: tagMQCFSL::StrucLength"][::std::mem::offset_of!(tagMQCFSL, StrucLength) - 4usize];
    ["Offset of field: tagMQCFSL::Parameter"][::std::mem::offset_of!(tagMQCFSL, Parameter) - 8usize];
    ["Offset of field: tagMQCFSL::CodedCharSetId"][::std::mem::offset_of!(tagMQCFSL, CodedCharSetId) - 12usize];
    ["Offset of field: tagMQCFSL::Count"][::std::mem::offset_of!(tagMQCFSL, Count) - 16usize];
    ["Offset of field: tagMQCFSL::StringLength"][::std::mem::offset_of!(tagMQCFSL, StringLength) - 20usize];
    ["Offset of field: tagMQCFSL::Strings"][::std::mem::offset_of!(tagMQCFSL, Strings) - 24usize];
};
pub type MQCFST = tagMQCFST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQCFST {
    pub Type: MQLONG,
    pub StrucLength: MQLONG,
    pub Parameter: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub StringLength: MQLONG,
    pub String: [MQCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQCFST"][::std::mem::size_of::<tagMQCFST>() - 24usize];
    ["Alignment of tagMQCFST"][::std::mem::align_of::<tagMQCFST>() - 4usize];
    ["Offset of field: tagMQCFST::Type"][::std::mem::offset_of!(tagMQCFST, Type) - 0usize];
    ["Offset of field: tagMQCFST::StrucLength"][::std::mem::offset_of!(tagMQCFST, StrucLength) - 4usize];
    ["Offset of field: tagMQCFST::Parameter"][::std::mem::offset_of!(tagMQCFST, Parameter) - 8usize];
    ["Offset of field: tagMQCFST::CodedCharSetId"][::std::mem::offset_of!(tagMQCFST, CodedCharSetId) - 12usize];
    ["Offset of field: tagMQCFST::StringLength"][::std::mem::offset_of!(tagMQCFST, StringLength) - 16usize];
    ["Offset of field: tagMQCFST::String"][::std::mem::offset_of!(tagMQCFST, String) - 20usize];
};
pub type MQEPH = tagMQEPH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQEPH {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Encoding: MQLONG,
    pub CodedCharSetId: MQLONG,
    pub Format: MQCHAR8,
    pub Flags: MQLONG,
    pub PCFHeader: MQCFH,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQEPH"][::std::mem::size_of::<tagMQEPH>() - 68usize];
    ["Alignment of tagMQEPH"][::std::mem::align_of::<tagMQEPH>() - 4usize];
    ["Offset of field: tagMQEPH::StrucId"][::std::mem::offset_of!(tagMQEPH, StrucId) - 0usize];
    ["Offset of field: tagMQEPH::Version"][::std::mem::offset_of!(tagMQEPH, Version) - 4usize];
    ["Offset of field: tagMQEPH::StrucLength"][::std::mem::offset_of!(tagMQEPH, StrucLength) - 8usize];
    ["Offset of field: tagMQEPH::Encoding"][::std::mem::offset_of!(tagMQEPH, Encoding) - 12usize];
    ["Offset of field: tagMQEPH::CodedCharSetId"][::std::mem::offset_of!(tagMQEPH, CodedCharSetId) - 16usize];
    ["Offset of field: tagMQEPH::Format"][::std::mem::offset_of!(tagMQEPH, Format) - 20usize];
    ["Offset of field: tagMQEPH::Flags"][::std::mem::offset_of!(tagMQEPH, Flags) - 28usize];
    ["Offset of field: tagMQEPH::PCFHeader"][::std::mem::offset_of!(tagMQEPH, PCFHeader) - 32usize];
};
pub type MQZED = tagMQZED;
pub type PMQZED = *mut MQZED;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQZED {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub EntityNamePtr: PMQCHAR,
    pub EntityDomainPtr: PMQCHAR,
    pub SecurityId: MQBYTE40,
    pub CorrelationPtr: MQPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQZED"][::std::mem::size_of::<tagMQZED>() - 72usize];
    ["Alignment of tagMQZED"][::std::mem::align_of::<tagMQZED>() - 8usize];
    ["Offset of field: tagMQZED::StrucId"][::std::mem::offset_of!(tagMQZED, StrucId) - 0usize];
    ["Offset of field: tagMQZED::Version"][::std::mem::offset_of!(tagMQZED, Version) - 4usize];
    ["Offset of field: tagMQZED::EntityNamePtr"][::std::mem::offset_of!(tagMQZED, EntityNamePtr) - 8usize];
    ["Offset of field: tagMQZED::EntityDomainPtr"][::std::mem::offset_of!(tagMQZED, EntityDomainPtr) - 16usize];
    ["Offset of field: tagMQZED::SecurityId"][::std::mem::offset_of!(tagMQZED, SecurityId) - 24usize];
    ["Offset of field: tagMQZED::CorrelationPtr"][::std::mem::offset_of!(tagMQZED, CorrelationPtr) - 64usize];
};
pub type MQZAC = tagMQZAC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQZAC {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ProcessId: MQPID,
    pub ThreadId: MQTID,
    pub ApplName: MQCHAR28,
    pub UserID: MQCHAR12,
    pub EffectiveUserID: MQCHAR12,
    pub Environment: MQLONG,
    pub CallerType: MQLONG,
    pub AuthenticationType: MQLONG,
    pub BindType: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQZAC"][::std::mem::size_of::<tagMQZAC>() - 84usize];
    ["Alignment of tagMQZAC"][::std::mem::align_of::<tagMQZAC>() - 4usize];
    ["Offset of field: tagMQZAC::StrucId"][::std::mem::offset_of!(tagMQZAC, StrucId) - 0usize];
    ["Offset of field: tagMQZAC::Version"][::std::mem::offset_of!(tagMQZAC, Version) - 4usize];
    ["Offset of field: tagMQZAC::ProcessId"][::std::mem::offset_of!(tagMQZAC, ProcessId) - 8usize];
    ["Offset of field: tagMQZAC::ThreadId"][::std::mem::offset_of!(tagMQZAC, ThreadId) - 12usize];
    ["Offset of field: tagMQZAC::ApplName"][::std::mem::offset_of!(tagMQZAC, ApplName) - 16usize];
    ["Offset of field: tagMQZAC::UserID"][::std::mem::offset_of!(tagMQZAC, UserID) - 44usize];
    ["Offset of field: tagMQZAC::EffectiveUserID"][::std::mem::offset_of!(tagMQZAC, EffectiveUserID) - 56usize];
    ["Offset of field: tagMQZAC::Environment"][::std::mem::offset_of!(tagMQZAC, Environment) - 68usize];
    ["Offset of field: tagMQZAC::CallerType"][::std::mem::offset_of!(tagMQZAC, CallerType) - 72usize];
    ["Offset of field: tagMQZAC::AuthenticationType"][::std::mem::offset_of!(tagMQZAC, AuthenticationType) - 76usize];
    ["Offset of field: tagMQZAC::BindType"][::std::mem::offset_of!(tagMQZAC, BindType) - 80usize];
};
pub type MQZAD = tagMQZAD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQZAD {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub ProfileName: MQCHAR48,
    pub ObjectType: MQLONG,
    pub Authority: MQLONG,
    pub EntityDataPtr: PMQZED,
    pub EntityType: MQLONG,
    pub Options: MQLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQZAD"][::std::mem::size_of::<tagMQZAD>() - 80usize];
    ["Alignment of tagMQZAD"][::std::mem::align_of::<tagMQZAD>() - 8usize];
    ["Offset of field: tagMQZAD::StrucId"][::std::mem::offset_of!(tagMQZAD, StrucId) - 0usize];
    ["Offset of field: tagMQZAD::Version"][::std::mem::offset_of!(tagMQZAD, Version) - 4usize];
    ["Offset of field: tagMQZAD::ProfileName"][::std::mem::offset_of!(tagMQZAD, ProfileName) - 8usize];
    ["Offset of field: tagMQZAD::ObjectType"][::std::mem::offset_of!(tagMQZAD, ObjectType) - 56usize];
    ["Offset of field: tagMQZAD::Authority"][::std::mem::offset_of!(tagMQZAD, Authority) - 60usize];
    ["Offset of field: tagMQZAD::EntityDataPtr"][::std::mem::offset_of!(tagMQZAD, EntityDataPtr) - 64usize];
    ["Offset of field: tagMQZAD::EntityType"][::std::mem::offset_of!(tagMQZAD, EntityType) - 72usize];
    ["Offset of field: tagMQZAD::Options"][::std::mem::offset_of!(tagMQZAD, Options) - 76usize];
};
pub type MQZFP = tagMQZFP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQZFP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub Reserved: MQBYTE8,
    pub CorrelationPtr: MQPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQZFP"][::std::mem::size_of::<tagMQZFP>() - 24usize];
    ["Alignment of tagMQZFP"][::std::mem::align_of::<tagMQZFP>() - 8usize];
    ["Offset of field: tagMQZFP::StrucId"][::std::mem::offset_of!(tagMQZFP, StrucId) - 0usize];
    ["Offset of field: tagMQZFP::Version"][::std::mem::offset_of!(tagMQZFP, Version) - 4usize];
    ["Offset of field: tagMQZFP::Reserved"][::std::mem::offset_of!(tagMQZFP, Reserved) - 8usize];
    ["Offset of field: tagMQZFP::CorrelationPtr"][::std::mem::offset_of!(tagMQZFP, CorrelationPtr) - 16usize];
};
pub type MQZIC = tagMQZIC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQZIC {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub UserIdentifier: MQCHAR12,
    pub AccountingToken: MQBYTE32,
    pub ApplIdentityData: MQCHAR32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQZIC"][::std::mem::size_of::<tagMQZIC>() - 84usize];
    ["Alignment of tagMQZIC"][::std::mem::align_of::<tagMQZIC>() - 4usize];
    ["Offset of field: tagMQZIC::StrucId"][::std::mem::offset_of!(tagMQZIC, StrucId) - 0usize];
    ["Offset of field: tagMQZIC::Version"][::std::mem::offset_of!(tagMQZIC, Version) - 4usize];
    ["Offset of field: tagMQZIC::UserIdentifier"][::std::mem::offset_of!(tagMQZIC, UserIdentifier) - 8usize];
    ["Offset of field: tagMQZIC::AccountingToken"][::std::mem::offset_of!(tagMQZIC, AccountingToken) - 20usize];
    ["Offset of field: tagMQZIC::ApplIdentityData"][::std::mem::offset_of!(tagMQZIC, ApplIdentityData) - 52usize];
};
extern "C" {
    pub fn MQZEP(Hconfig: MQHCONFIG, Function: MQLONG, pEntryPoint: PMQFUNC, pCompCode: PMQLONG, pReason: PMQLONG);
}
pub type MQ_ZEP_CALL = ::std::option::Option<
    unsafe extern "C" fn(Hconfig: MQHCONFIG, Function: MQLONG, pEntryPoint: PMQFUNC, pCompCode: PMQLONG, pReason: PMQLONG),
>;
pub type PMQ_ZEP_CALL = MQ_ZEP_CALL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMQIEP {
    pub StrucId: MQCHAR4,
    pub Version: MQLONG,
    pub StrucLength: MQLONG,
    pub Flags: MQLONG,
    pub Reserved: MQPTR,
    pub MQBACK_Call: PMQ_BACK_CALL,
    pub MQBEGIN_Call: PMQ_BEGIN_CALL,
    pub MQBUFMH_Call: PMQ_BUFMH_CALL,
    pub MQCB_Call: PMQ_CB_CALL,
    pub MQCLOSE_Call: PMQ_CLOSE_CALL,
    pub MQCMIT_Call: PMQ_CMIT_CALL,
    pub MQCONN_Call: PMQ_CONN_CALL,
    pub MQCONNX_Call: PMQ_CONNX_CALL,
    pub MQCRTMH_Call: PMQ_CRTMH_CALL,
    pub MQCTL_Call: PMQ_CTL_CALL,
    pub MQDISC_Call: PMQ_DISC_CALL,
    pub MQDLTMH_Call: PMQ_DLTMH_CALL,
    pub MQDLTMP_Call: PMQ_DLTMP_CALL,
    pub MQGET_Call: PMQ_GET_CALL,
    pub MQINQ_Call: PMQ_INQ_CALL,
    pub MQINQMP_Call: PMQ_INQMP_CALL,
    pub MQMHBUF_Call: PMQ_MHBUF_CALL,
    pub MQOPEN_Call: PMQ_OPEN_CALL,
    pub MQPUT_Call: PMQ_PUT_CALL,
    pub MQPUT1_Call: PMQ_PUT1_CALL,
    pub MQSET_Call: PMQ_SET_CALL,
    pub MQSETMP_Call: PMQ_SETMP_CALL,
    pub MQSTAT_Call: PMQ_STAT_CALL,
    pub MQSUB_Call: PMQ_SUB_CALL,
    pub MQSUBRQ_Call: PMQ_SUBRQ_CALL,
    pub MQXCLWLN_Call: PMQ_XCLWLN_CALL,
    pub MQXCNVC_Call: PMQ_XCNVC_CALL,
    pub MQXDX_Call: PMQ_XDX_CALL,
    pub MQXEP_Call: PMQ_XEP_CALL,
    pub MQZEP_Call: PMQ_ZEP_CALL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMQIEP"][::std::mem::size_of::<tagMQIEP>() - 264usize];
    ["Alignment of tagMQIEP"][::std::mem::align_of::<tagMQIEP>() - 8usize];
    ["Offset of field: tagMQIEP::StrucId"][::std::mem::offset_of!(tagMQIEP, StrucId) - 0usize];
    ["Offset of field: tagMQIEP::Version"][::std::mem::offset_of!(tagMQIEP, Version) - 4usize];
    ["Offset of field: tagMQIEP::StrucLength"][::std::mem::offset_of!(tagMQIEP, StrucLength) - 8usize];
    ["Offset of field: tagMQIEP::Flags"][::std::mem::offset_of!(tagMQIEP, Flags) - 12usize];
    ["Offset of field: tagMQIEP::Reserved"][::std::mem::offset_of!(tagMQIEP, Reserved) - 16usize];
    ["Offset of field: tagMQIEP::MQBACK_Call"][::std::mem::offset_of!(tagMQIEP, MQBACK_Call) - 24usize];
    ["Offset of field: tagMQIEP::MQBEGIN_Call"][::std::mem::offset_of!(tagMQIEP, MQBEGIN_Call) - 32usize];
    ["Offset of field: tagMQIEP::MQBUFMH_Call"][::std::mem::offset_of!(tagMQIEP, MQBUFMH_Call) - 40usize];
    ["Offset of field: tagMQIEP::MQCB_Call"][::std::mem::offset_of!(tagMQIEP, MQCB_Call) - 48usize];
    ["Offset of field: tagMQIEP::MQCLOSE_Call"][::std::mem::offset_of!(tagMQIEP, MQCLOSE_Call) - 56usize];
    ["Offset of field: tagMQIEP::MQCMIT_Call"][::std::mem::offset_of!(tagMQIEP, MQCMIT_Call) - 64usize];
    ["Offset of field: tagMQIEP::MQCONN_Call"][::std::mem::offset_of!(tagMQIEP, MQCONN_Call) - 72usize];
    ["Offset of field: tagMQIEP::MQCONNX_Call"][::std::mem::offset_of!(tagMQIEP, MQCONNX_Call) - 80usize];
    ["Offset of field: tagMQIEP::MQCRTMH_Call"][::std::mem::offset_of!(tagMQIEP, MQCRTMH_Call) - 88usize];
    ["Offset of field: tagMQIEP::MQCTL_Call"][::std::mem::offset_of!(tagMQIEP, MQCTL_Call) - 96usize];
    ["Offset of field: tagMQIEP::MQDISC_Call"][::std::mem::offset_of!(tagMQIEP, MQDISC_Call) - 104usize];
    ["Offset of field: tagMQIEP::MQDLTMH_Call"][::std::mem::offset_of!(tagMQIEP, MQDLTMH_Call) - 112usize];
    ["Offset of field: tagMQIEP::MQDLTMP_Call"][::std::mem::offset_of!(tagMQIEP, MQDLTMP_Call) - 120usize];
    ["Offset of field: tagMQIEP::MQGET_Call"][::std::mem::offset_of!(tagMQIEP, MQGET_Call) - 128usize];
    ["Offset of field: tagMQIEP::MQINQ_Call"][::std::mem::offset_of!(tagMQIEP, MQINQ_Call) - 136usize];
    ["Offset of field: tagMQIEP::MQINQMP_Call"][::std::mem::offset_of!(tagMQIEP, MQINQMP_Call) - 144usize];
    ["Offset of field: tagMQIEP::MQMHBUF_Call"][::std::mem::offset_of!(tagMQIEP, MQMHBUF_Call) - 152usize];
    ["Offset of field: tagMQIEP::MQOPEN_Call"][::std::mem::offset_of!(tagMQIEP, MQOPEN_Call) - 160usize];
    ["Offset of field: tagMQIEP::MQPUT_Call"][::std::mem::offset_of!(tagMQIEP, MQPUT_Call) - 168usize];
    ["Offset of field: tagMQIEP::MQPUT1_Call"][::std::mem::offset_of!(tagMQIEP, MQPUT1_Call) - 176usize];
    ["Offset of field: tagMQIEP::MQSET_Call"][::std::mem::offset_of!(tagMQIEP, MQSET_Call) - 184usize];
    ["Offset of field: tagMQIEP::MQSETMP_Call"][::std::mem::offset_of!(tagMQIEP, MQSETMP_Call) - 192usize];
    ["Offset of field: tagMQIEP::MQSTAT_Call"][::std::mem::offset_of!(tagMQIEP, MQSTAT_Call) - 200usize];
    ["Offset of field: tagMQIEP::MQSUB_Call"][::std::mem::offset_of!(tagMQIEP, MQSUB_Call) - 208usize];
    ["Offset of field: tagMQIEP::MQSUBRQ_Call"][::std::mem::offset_of!(tagMQIEP, MQSUBRQ_Call) - 216usize];
    ["Offset of field: tagMQIEP::MQXCLWLN_Call"][::std::mem::offset_of!(tagMQIEP, MQXCLWLN_Call) - 224usize];
    ["Offset of field: tagMQIEP::MQXCNVC_Call"][::std::mem::offset_of!(tagMQIEP, MQXCNVC_Call) - 232usize];
    ["Offset of field: tagMQIEP::MQXDX_Call"][::std::mem::offset_of!(tagMQIEP, MQXDX_Call) - 240usize];
    ["Offset of field: tagMQIEP::MQXEP_Call"][::std::mem::offset_of!(tagMQIEP, MQXEP_Call) - 248usize];
    ["Offset of field: tagMQIEP::MQZEP_Call"][::std::mem::offset_of!(tagMQIEP, MQZEP_Call) - 256usize];
};
